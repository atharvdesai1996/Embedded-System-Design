                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___sdcc_heap_size
                                     12 	.globl _main
                                     13 	.globl _dataout
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _printf_tiny
                                     17 	.globl _printf
                                     18 	.globl _TF1
                                     19 	.globl _TR1
                                     20 	.globl _TF0
                                     21 	.globl _TR0
                                     22 	.globl _IE1
                                     23 	.globl _IT1
                                     24 	.globl _IE0
                                     25 	.globl _IT0
                                     26 	.globl _SM0
                                     27 	.globl _SM1
                                     28 	.globl _SM2
                                     29 	.globl _REN
                                     30 	.globl _TB8
                                     31 	.globl _RB8
                                     32 	.globl _TI
                                     33 	.globl _RI
                                     34 	.globl _CY
                                     35 	.globl _AC
                                     36 	.globl _F0
                                     37 	.globl _RS1
                                     38 	.globl _RS0
                                     39 	.globl _OV
                                     40 	.globl _F1
                                     41 	.globl _P
                                     42 	.globl _RD
                                     43 	.globl _WR
                                     44 	.globl _T1
                                     45 	.globl _T0
                                     46 	.globl _INT1
                                     47 	.globl _INT0
                                     48 	.globl _TXD0
                                     49 	.globl _TXD
                                     50 	.globl _RXD0
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _P2_7
                                     61 	.globl _P2_6
                                     62 	.globl _P2_5
                                     63 	.globl _P2_4
                                     64 	.globl _P2_3
                                     65 	.globl _P2_2
                                     66 	.globl _P2_1
                                     67 	.globl _P2_0
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _P0_7
                                     77 	.globl _P0_6
                                     78 	.globl _P0_5
                                     79 	.globl _P0_4
                                     80 	.globl _P0_3
                                     81 	.globl _P0_2
                                     82 	.globl _P0_1
                                     83 	.globl _P0_0
                                     84 	.globl _PS
                                     85 	.globl _PT1
                                     86 	.globl _PX1
                                     87 	.globl _PT0
                                     88 	.globl _PX0
                                     89 	.globl _EA
                                     90 	.globl _ES
                                     91 	.globl _ET1
                                     92 	.globl _EX1
                                     93 	.globl _ET0
                                     94 	.globl _EX0
                                     95 	.globl _BREG_F7
                                     96 	.globl _BREG_F6
                                     97 	.globl _BREG_F5
                                     98 	.globl _BREG_F4
                                     99 	.globl _BREG_F3
                                    100 	.globl _BREG_F2
                                    101 	.globl _BREG_F1
                                    102 	.globl _BREG_F0
                                    103 	.globl _TMOD
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TH1
                                    107 	.globl _TH0
                                    108 	.globl _TCON
                                    109 	.globl _SP
                                    110 	.globl _SCON
                                    111 	.globl _SBUF0
                                    112 	.globl _SBUF
                                    113 	.globl _PSW
                                    114 	.globl _PCON
                                    115 	.globl _P3
                                    116 	.globl _P2
                                    117 	.globl _P1
                                    118 	.globl _P0
                                    119 	.globl _IP
                                    120 	.globl _IE
                                    121 	.globl _DP0L
                                    122 	.globl _DPL
                                    123 	.globl _DP0H
                                    124 	.globl _DPH
                                    125 	.globl _B
                                    126 	.globl _ACC
                                    127 	.globl _ptr
                                    128 	.globl _buff01size
                                    129 	.globl ___sdcc_heap
                                    130 	.globl _takeinput
                                    131 	.globl _getchar
                                    132 	.globl _putchar
                                    133 ;--------------------------------------------------------
                                    134 ; special function registers
                                    135 ;--------------------------------------------------------
                                    136 	.area RSEG    (ABS,DATA)
      000000                        137 	.org 0x0000
                           0000E0   138 _ACC	=	0x00e0
                           0000F0   139 _B	=	0x00f0
                           000083   140 _DPH	=	0x0083
                           000083   141 _DP0H	=	0x0083
                           000082   142 _DPL	=	0x0082
                           000082   143 _DP0L	=	0x0082
                           0000A8   144 _IE	=	0x00a8
                           0000B8   145 _IP	=	0x00b8
                           000080   146 _P0	=	0x0080
                           000090   147 _P1	=	0x0090
                           0000A0   148 _P2	=	0x00a0
                           0000B0   149 _P3	=	0x00b0
                           000087   150 _PCON	=	0x0087
                           0000D0   151 _PSW	=	0x00d0
                           000099   152 _SBUF	=	0x0099
                           000099   153 _SBUF0	=	0x0099
                           000098   154 _SCON	=	0x0098
                           000081   155 _SP	=	0x0081
                           000088   156 _TCON	=	0x0088
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           00008A   159 _TL0	=	0x008a
                           00008B   160 _TL1	=	0x008b
                           000089   161 _TMOD	=	0x0089
                                    162 ;--------------------------------------------------------
                                    163 ; special function bits
                                    164 ;--------------------------------------------------------
                                    165 	.area RSEG    (ABS,DATA)
      000000                        166 	.org 0x0000
                           0000F0   167 _BREG_F0	=	0x00f0
                           0000F1   168 _BREG_F1	=	0x00f1
                           0000F2   169 _BREG_F2	=	0x00f2
                           0000F3   170 _BREG_F3	=	0x00f3
                           0000F4   171 _BREG_F4	=	0x00f4
                           0000F5   172 _BREG_F5	=	0x00f5
                           0000F6   173 _BREG_F6	=	0x00f6
                           0000F7   174 _BREG_F7	=	0x00f7
                           0000A8   175 _EX0	=	0x00a8
                           0000A9   176 _ET0	=	0x00a9
                           0000AA   177 _EX1	=	0x00aa
                           0000AB   178 _ET1	=	0x00ab
                           0000AC   179 _ES	=	0x00ac
                           0000AF   180 _EA	=	0x00af
                           0000B8   181 _PX0	=	0x00b8
                           0000B9   182 _PT0	=	0x00b9
                           0000BA   183 _PX1	=	0x00ba
                           0000BB   184 _PT1	=	0x00bb
                           0000BC   185 _PS	=	0x00bc
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000090   194 _P1_0	=	0x0090
                           000091   195 _P1_1	=	0x0091
                           000092   196 _P1_2	=	0x0092
                           000093   197 _P1_3	=	0x0093
                           000094   198 _P1_4	=	0x0094
                           000095   199 _P1_5	=	0x0095
                           000096   200 _P1_6	=	0x0096
                           000097   201 _P1_7	=	0x0097
                           0000A0   202 _P2_0	=	0x00a0
                           0000A1   203 _P2_1	=	0x00a1
                           0000A2   204 _P2_2	=	0x00a2
                           0000A3   205 _P2_3	=	0x00a3
                           0000A4   206 _P2_4	=	0x00a4
                           0000A5   207 _P2_5	=	0x00a5
                           0000A6   208 _P2_6	=	0x00a6
                           0000A7   209 _P2_7	=	0x00a7
                           0000B0   210 _P3_0	=	0x00b0
                           0000B1   211 _P3_1	=	0x00b1
                           0000B2   212 _P3_2	=	0x00b2
                           0000B3   213 _P3_3	=	0x00b3
                           0000B4   214 _P3_4	=	0x00b4
                           0000B5   215 _P3_5	=	0x00b5
                           0000B6   216 _P3_6	=	0x00b6
                           0000B7   217 _P3_7	=	0x00b7
                           0000B0   218 _RXD	=	0x00b0
                           0000B0   219 _RXD0	=	0x00b0
                           0000B1   220 _TXD	=	0x00b1
                           0000B1   221 _TXD0	=	0x00b1
                           0000B2   222 _INT0	=	0x00b2
                           0000B3   223 _INT1	=	0x00b3
                           0000B4   224 _T0	=	0x00b4
                           0000B5   225 _T1	=	0x00b5
                           0000B6   226 _WR	=	0x00b6
                           0000B7   227 _RD	=	0x00b7
                           0000D0   228 _P	=	0x00d0
                           0000D1   229 _F1	=	0x00d1
                           0000D2   230 _OV	=	0x00d2
                           0000D3   231 _RS0	=	0x00d3
                           0000D4   232 _RS1	=	0x00d4
                           0000D5   233 _F0	=	0x00d5
                           0000D6   234 _AC	=	0x00d6
                           0000D7   235 _CY	=	0x00d7
                           000098   236 _RI	=	0x0098
                           000099   237 _TI	=	0x0099
                           00009A   238 _RB8	=	0x009a
                           00009B   239 _TB8	=	0x009b
                           00009C   240 _REN	=	0x009c
                           00009D   241 _SM2	=	0x009d
                           00009E   242 _SM1	=	0x009e
                           00009F   243 _SM0	=	0x009f
                           000088   244 _IT0	=	0x0088
                           000089   245 _IE0	=	0x0089
                           00008A   246 _IT1	=	0x008a
                           00008B   247 _IE1	=	0x008b
                           00008C   248 _TR0	=	0x008c
                           00008D   249 _TF0	=	0x008d
                           00008E   250 _TR1	=	0x008e
                           00008F   251 _TF1	=	0x008f
                                    252 ;--------------------------------------------------------
                                    253 ; overlayable register banks
                                    254 ;--------------------------------------------------------
                                    255 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        256 	.ds 8
                                    257 ;--------------------------------------------------------
                                    258 ; internal ram data
                                    259 ;--------------------------------------------------------
                                    260 	.area DSEG    (DATA)
      000000                        261 _main_sloc0_1_0:
      000000                        262 	.ds 3
      000003                        263 _main_sloc1_1_0:
      000003                        264 	.ds 2
      000005                        265 _main_sloc2_1_0:
      000005                        266 	.ds 3
      000008                        267 _main_sloc3_1_0:
      000008                        268 	.ds 2
      00000A                        269 _main_sloc4_1_0:
      00000A                        270 	.ds 2
      00000C                        271 _main_sloc5_1_0:
      00000C                        272 	.ds 2
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable items in internal ram 
                                    275 ;--------------------------------------------------------
                                    276 ;--------------------------------------------------------
                                    277 ; Stack segment in internal ram 
                                    278 ;--------------------------------------------------------
                                    279 	.area	SSEG
      000000                        280 __start__stack:
      000000                        281 	.ds	1
                                    282 
                                    283 ;--------------------------------------------------------
                                    284 ; indirectly addressable internal ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area ISEG    (DATA)
                                    287 ;--------------------------------------------------------
                                    288 ; absolute internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area IABS    (ABS,DATA)
                                    291 	.area IABS    (ABS,DATA)
                                    292 ;--------------------------------------------------------
                                    293 ; bit data
                                    294 ;--------------------------------------------------------
                                    295 	.area BSEG    (BIT)
                                    296 ;--------------------------------------------------------
                                    297 ; paged external ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area PSEG    (PAG,XDATA)
                                    300 ;--------------------------------------------------------
                                    301 ; external ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area XSEG    (XDATA)
      000000                        304 ___sdcc_heap::
      000000                        305 	.ds 4800
      0012C0                        306 _dataout_x_65536_62:
      0012C0                        307 	.ds 1
      0012C1                        308 _buff01size::
      0012C1                        309 	.ds 2
      0012C3                        310 _main_buffer_131072_67:
      0012C3                        311 	.ds 60
      0012FF                        312 _main_buffnewcount_131072_67:
      0012FF                        313 	.ds 2
      001301                        314 _main_totalstoragecount_131072_67:
      001301                        315 	.ds 2
      001303                        316 _main_startaddr_131072_67:
      001303                        317 	.ds 40
      00132B                        318 _main_endaddr_131072_67:
      00132B                        319 	.ds 40
      001353                        320 _main_buffersizes_131072_67:
      001353                        321 	.ds 40
      00137B                        322 _main_storagecountall_131072_67:
      00137B                        323 	.ds 40
      0013A3                        324 _main_totalcharafterQ_131072_67:
      0013A3                        325 	.ds 2
      0013A5                        326 _main_freespacesbuff_131072_67:
      0013A5                        327 	.ds 40
      0013CD                        328 _takeinput_number_65537_103:
      0013CD                        329 	.ds 2
      0013CF                        330 _putchar_b_65536_109:
      0013CF                        331 	.ds 2
                                    332 ;--------------------------------------------------------
                                    333 ; absolute external ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area XABS    (ABS,XDATA)
                                    336 ;--------------------------------------------------------
                                    337 ; external initialized ram data
                                    338 ;--------------------------------------------------------
                                    339 	.area XISEG   (XDATA)
      000000                        340 _ptr::
      000000                        341 	.ds 2
                                    342 	.area HOME    (CODE)
                                    343 	.area GSINIT0 (CODE)
                                    344 	.area GSINIT1 (CODE)
                                    345 	.area GSINIT2 (CODE)
                                    346 	.area GSINIT3 (CODE)
                                    347 	.area GSINIT4 (CODE)
                                    348 	.area GSINIT5 (CODE)
                                    349 	.area GSINIT  (CODE)
                                    350 	.area GSFINAL (CODE)
                                    351 	.area CSEG    (CODE)
                                    352 ;--------------------------------------------------------
                                    353 ; interrupt vector 
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
      000000                        356 __interrupt_vect:
      000000 02r00r00         [24]  357 	ljmp	__sdcc_gsinit_startup
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.globl __sdcc_gsinit_startup
                                    366 	.globl __sdcc_program_startup
                                    367 	.globl __start__stack
                                    368 	.globl __mcs51_genXINIT
                                    369 	.globl __mcs51_genXRAMCLEAR
                                    370 	.globl __mcs51_genRAMCLEAR
                                    371 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  372 	ljmp	__sdcc_program_startup
                                    373 ;--------------------------------------------------------
                                    374 ; Home
                                    375 ;--------------------------------------------------------
                                    376 	.area HOME    (CODE)
                                    377 	.area HOME    (CODE)
      000003                        378 __sdcc_program_startup:
      000003 02r00r12         [24]  379 	ljmp	_main
                                    380 ;	return from main will return to caller
                                    381 ;--------------------------------------------------------
                                    382 ; code
                                    383 ;--------------------------------------------------------
                                    384 	.area CSEG    (CODE)
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'dataout'
                                    387 ;------------------------------------------------------------
                                    388 ;x                         Allocated with name '_dataout_x_65536_62'
                                    389 ;ptr                       Allocated with name '_dataout_ptr_65536_63'
                                    390 ;------------------------------------------------------------
                                    391 ;	main.c:25: void dataout(uint8_t x)
                                    392 ;	-----------------------------------------
                                    393 ;	 function dataout
                                    394 ;	-----------------------------------------
      000000                        395 _dataout:
                           000007   396 	ar7 = 0x07
                           000006   397 	ar6 = 0x06
                           000005   398 	ar5 = 0x05
                           000004   399 	ar4 = 0x04
                           000003   400 	ar3 = 0x03
                           000002   401 	ar2 = 0x02
                           000001   402 	ar1 = 0x01
                           000000   403 	ar0 = 0x00
      000000 E5 82            [12]  404 	mov	a,dpl
      000002 90r12rC0         [24]  405 	mov	dptr,#_dataout_x_65536_62
      000005 F0               [24]  406 	movx	@dptr,a
                                    407 ;	main.c:29: *ptr = (x);
      000006 E0               [24]  408 	movx	a,@dptr
      000007 FF               [12]  409 	mov	r7,a
      000008 90 FF FF         [24]  410 	mov	dptr,#0xffff
      00000B 75 F0 00         [24]  411 	mov	b,#0x00
      00000E EF               [12]  412 	mov	a,r7
                                    413 ;	main.c:30: }
      00000F 02r00r00         [24]  414 	ljmp	__gptrput
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'main'
                                    417 ;------------------------------------------------------------
                                    418 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    419 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    420 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    421 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    422 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    423 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                    424 ;buffer                    Allocated with name '_main_buffer_131072_67'
                                    425 ;buffnewcount              Allocated with name '_main_buffnewcount_131072_67'
                                    426 ;totalcharcount            Allocated with name '_main_totalcharcount_131072_67'
                                    427 ;totalstoragecount         Allocated with name '_main_totalstoragecount_131072_67'
                                    428 ;startaddr                 Allocated with name '_main_startaddr_131072_67'
                                    429 ;endaddr                   Allocated with name '_main_endaddr_131072_67'
                                    430 ;buffersizes               Allocated with name '_main_buffersizes_131072_67'
                                    431 ;storagecountall           Allocated with name '_main_storagecountall_131072_67'
                                    432 ;totalcharafterQ           Allocated with name '_main_totalcharafterQ_131072_67'
                                    433 ;freespacesbuff            Allocated with name '_main_freespacesbuff_131072_67'
                                    434 ;m                         Allocated with name '_main_m_196609_69'
                                    435 ;takechar                  Allocated with name '_main_takechar_196609_75'
                                    436 ;n                         Allocated with name '_main_n_262146_79'
                                    437 ;buffno                    Allocated with name '_main_buffno_262146_82'
                                    438 ;d                         Allocated with name '_main_d_262146_86'
                                    439 ;e                         Allocated with name '_main_e_262146_86'
                                    440 ;g                         Allocated with name '_main_g_262146_94'
                                    441 ;k                         Allocated with name '_main_k_262146_99'
                                    442 ;------------------------------------------------------------
                                    443 ;	main.c:37: void main(void)
                                    444 ;	-----------------------------------------
                                    445 ;	 function main
                                    446 ;	-----------------------------------------
      000012                        447 _main:
                                    448 ;	main.c:47: uint16_t totalstoragecount = 0;
      000012 90r13r01         [24]  449 	mov	dptr,#_main_totalstoragecount_131072_67
      000015 E4               [12]  450 	clr	a
      000016 F0               [24]  451 	movx	@dptr,a
      000017 A3               [24]  452 	inc	dptr
      000018 F0               [24]  453 	movx	@dptr,a
                                    454 ;	main.c:52: uint16_t totalcharafterQ =0;
      000019 90r13rA3         [24]  455 	mov	dptr,#_main_totalcharafterQ_131072_67
      00001C F0               [24]  456 	movx	@dptr,a
      00001D A3               [24]  457 	inc	dptr
      00001E F0               [24]  458 	movx	@dptr,a
                                    459 ;	main.c:61: while(1)
      00001F 7E 00            [12]  460 	mov	r6,#0x00
      000021 7F 00            [12]  461 	mov	r7,#0x00
      000023                        462 00112$:
                                    463 ;	main.c:64: printf("### Enter a valid buffer size for buffer 0 and 1 ###");
      000023 C0 07            [24]  464 	push	ar7
      000025 C0 06            [24]  465 	push	ar6
      000027 74r02            [12]  466 	mov	a,#___str_0
      000029 C0 E0            [24]  467 	push	acc
      00002B 74s00            [12]  468 	mov	a,#(___str_0 >> 8)
      00002D C0 E0            [24]  469 	push	acc
      00002F 74 80            [12]  470 	mov	a,#0x80
      000031 C0 E0            [24]  471 	push	acc
      000033 12r00r00         [24]  472 	lcall	_printf
      000036 15 81            [12]  473 	dec	sp
      000038 15 81            [12]  474 	dec	sp
      00003A 15 81            [12]  475 	dec	sp
                                    476 ;	main.c:65: uint16_t m= takeinput();
      00003C 12r0Br38         [24]  477 	lcall	_takeinput
      00003F AC 82            [24]  478 	mov	r4,dpl
      000041 AD 83            [24]  479 	mov	r5,dph
      000043 D0 06            [24]  480 	pop	ar6
      000045 D0 07            [24]  481 	pop	ar7
                                    482 ;	main.c:66: if (m>=32 && m<=3200)
      000047 8C 02            [24]  483 	mov	ar2,r4
      000049 8D 03            [24]  484 	mov	ar3,r5
      00004B C3               [12]  485 	clr	c
      00004C EA               [12]  486 	mov	a,r2
      00004D 94 20            [12]  487 	subb	a,#0x20
      00004F EB               [12]  488 	mov	a,r3
      000050 94 00            [12]  489 	subb	a,#0x00
      000052 40 37            [24]  490 	jc	00102$
      000054 8C 02            [24]  491 	mov	ar2,r4
      000056 8D 03            [24]  492 	mov	ar3,r5
      000058 C3               [12]  493 	clr	c
      000059 74 80            [12]  494 	mov	a,#0x80
      00005B 9A               [12]  495 	subb	a,r2
      00005C 74 0C            [12]  496 	mov	a,#0x0c
      00005E 9B               [12]  497 	subb	a,r3
      00005F 40 2A            [24]  498 	jc	00102$
                                    499 ;	main.c:69: buffer[0] = (uint8_t *)malloc(m);
      000061 8C 82            [24]  500 	mov	dpl,r4
      000063 8D 83            [24]  501 	mov	dph,r5
      000065 C0 07            [24]  502 	push	ar7
      000067 C0 06            [24]  503 	push	ar6
      000069 C0 05            [24]  504 	push	ar5
      00006B C0 04            [24]  505 	push	ar4
      00006D 12r00r00         [24]  506 	lcall	_malloc
      000070 AA 82            [24]  507 	mov	r2,dpl
      000072 AB 83            [24]  508 	mov	r3,dph
      000074 D0 04            [24]  509 	pop	ar4
      000076 D0 05            [24]  510 	pop	ar5
      000078 D0 06            [24]  511 	pop	ar6
      00007A D0 07            [24]  512 	pop	ar7
      00007C 8B 01            [24]  513 	mov	ar1,r3
      00007E 7B 00            [12]  514 	mov	r3,#0x00
      000080 90r12rC3         [24]  515 	mov	dptr,#_main_buffer_131072_67
      000083 EA               [12]  516 	mov	a,r2
      000084 F0               [24]  517 	movx	@dptr,a
      000085 E9               [12]  518 	mov	a,r1
      000086 A3               [24]  519 	inc	dptr
      000087 F0               [24]  520 	movx	@dptr,a
      000088 EB               [12]  521 	mov	a,r3
      000089 A3               [24]  522 	inc	dptr
      00008A F0               [24]  523 	movx	@dptr,a
      00008B                        524 00102$:
                                    525 ;	main.c:78: if (buffer[0] == 0)
      00008B 90r12rC3         [24]  526 	mov	dptr,#_main_buffer_131072_67
      00008E E0               [24]  527 	movx	a,@dptr
      00008F F9               [12]  528 	mov	r1,a
      000090 A3               [24]  529 	inc	dptr
      000091 E0               [24]  530 	movx	a,@dptr
      000092 FA               [12]  531 	mov	r2,a
      000093 A3               [24]  532 	inc	dptr
      000094 E0               [24]  533 	movx	a,@dptr
      000095 E9               [12]  534 	mov	a,r1
      000096 4A               [12]  535 	orl	a,r2
      000097 70 22            [24]  536 	jnz	00105$
                                    537 ;	main.c:79: printf_tiny("\n \rMalloc buffer0 failed\n\r"); //j,hgtjkygk
      000099 C0 07            [24]  538 	push	ar7
      00009B C0 06            [24]  539 	push	ar6
      00009D C0 05            [24]  540 	push	ar5
      00009F C0 04            [24]  541 	push	ar4
      0000A1 74r37            [12]  542 	mov	a,#___str_1
      0000A3 C0 E0            [24]  543 	push	acc
      0000A5 74s00            [12]  544 	mov	a,#(___str_1 >> 8)
      0000A7 C0 E0            [24]  545 	push	acc
      0000A9 12r00r00         [24]  546 	lcall	_printf_tiny
      0000AC 15 81            [12]  547 	dec	sp
      0000AE 15 81            [12]  548 	dec	sp
      0000B0 D0 04            [24]  549 	pop	ar4
      0000B2 D0 05            [24]  550 	pop	ar5
      0000B4 D0 06            [24]  551 	pop	ar6
      0000B6 D0 07            [24]  552 	pop	ar7
      0000B8 02r01r4D         [24]  553 	ljmp	00106$
      0000BB                        554 00105$:
                                    555 ;	main.c:82: printf_tiny("\n \rMalloc buffer0 passed\n\r");
      0000BB C0 07            [24]  556 	push	ar7
      0000BD C0 06            [24]  557 	push	ar6
      0000BF C0 05            [24]  558 	push	ar5
      0000C1 C0 04            [24]  559 	push	ar4
      0000C3 74r52            [12]  560 	mov	a,#___str_2
      0000C5 C0 E0            [24]  561 	push	acc
      0000C7 74s00            [12]  562 	mov	a,#(___str_2 >> 8)
      0000C9 C0 E0            [24]  563 	push	acc
      0000CB 12r00r00         [24]  564 	lcall	_printf_tiny
      0000CE 15 81            [12]  565 	dec	sp
      0000D0 15 81            [12]  566 	dec	sp
      0000D2 D0 04            [24]  567 	pop	ar4
      0000D4 D0 05            [24]  568 	pop	ar5
      0000D6 D0 06            [24]  569 	pop	ar6
      0000D8 D0 07            [24]  570 	pop	ar7
                                    571 ;	main.c:84: startaddr[0]= (int)buffer[0];
      0000DA 90r12rC3         [24]  572 	mov	dptr,#_main_buffer_131072_67
      0000DD E0               [24]  573 	movx	a,@dptr
      0000DE FA               [12]  574 	mov	r2,a
      0000DF A3               [24]  575 	inc	dptr
      0000E0 E0               [24]  576 	movx	a,@dptr
      0000E1 FB               [12]  577 	mov	r3,a
      0000E2 90r13r03         [24]  578 	mov	dptr,#_main_startaddr_131072_67
      0000E5 EA               [12]  579 	mov	a,r2
      0000E6 F0               [24]  580 	movx	@dptr,a
      0000E7 EB               [12]  581 	mov	a,r3
      0000E8 A3               [24]  582 	inc	dptr
      0000E9 F0               [24]  583 	movx	@dptr,a
                                    584 ;	main.c:85: endaddr[0]= (int)(buffer[0]+ m);
      0000EA 90r12rC3         [24]  585 	mov	dptr,#_main_buffer_131072_67
      0000ED E0               [24]  586 	movx	a,@dptr
      0000EE F9               [12]  587 	mov	r1,a
      0000EF A3               [24]  588 	inc	dptr
      0000F0 E0               [24]  589 	movx	a,@dptr
      0000F1 FA               [12]  590 	mov	r2,a
      0000F2 A3               [24]  591 	inc	dptr
      0000F3 E0               [24]  592 	movx	a,@dptr
      0000F4 EC               [12]  593 	mov	a,r4
      0000F5 29               [12]  594 	add	a,r1
      0000F6 F9               [12]  595 	mov	r1,a
      0000F7 ED               [12]  596 	mov	a,r5
      0000F8 3A               [12]  597 	addc	a,r2
      0000F9 FA               [12]  598 	mov	r2,a
      0000FA 90r13r2B         [24]  599 	mov	dptr,#_main_endaddr_131072_67
      0000FD E9               [12]  600 	mov	a,r1
      0000FE F0               [24]  601 	movx	@dptr,a
      0000FF EA               [12]  602 	mov	a,r2
      000100 A3               [24]  603 	inc	dptr
      000101 F0               [24]  604 	movx	@dptr,a
                                    605 ;	main.c:86: buffersizes[0]= m;
      000102 90r13r53         [24]  606 	mov	dptr,#_main_buffersizes_131072_67
      000105 EC               [12]  607 	mov	a,r4
      000106 F0               [24]  608 	movx	@dptr,a
      000107 ED               [12]  609 	mov	a,r5
      000108 A3               [24]  610 	inc	dptr
      000109 F0               [24]  611 	movx	@dptr,a
                                    612 ;	main.c:87: printf("\n \rBuffer 0 created at :0X0%x \n \r",startaddr[buffnewcount]);
      00010A EE               [12]  613 	mov	a,r6
      00010B 2E               [12]  614 	add	a,r6
      00010C FA               [12]  615 	mov	r2,a
      00010D EF               [12]  616 	mov	a,r7
      00010E 33               [12]  617 	rlc	a
      00010F FB               [12]  618 	mov	r3,a
      000110 EA               [12]  619 	mov	a,r2
      000111 24r03            [12]  620 	add	a,#_main_startaddr_131072_67
      000113 F5 82            [12]  621 	mov	dpl,a
      000115 EB               [12]  622 	mov	a,r3
      000116 34s13            [12]  623 	addc	a,#(_main_startaddr_131072_67 >> 8)
      000118 F5 83            [12]  624 	mov	dph,a
      00011A E0               [24]  625 	movx	a,@dptr
      00011B FA               [12]  626 	mov	r2,a
      00011C A3               [24]  627 	inc	dptr
      00011D E0               [24]  628 	movx	a,@dptr
      00011E FB               [12]  629 	mov	r3,a
      00011F C0 07            [24]  630 	push	ar7
      000121 C0 06            [24]  631 	push	ar6
      000123 C0 05            [24]  632 	push	ar5
      000125 C0 04            [24]  633 	push	ar4
      000127 C0 02            [24]  634 	push	ar2
      000129 C0 03            [24]  635 	push	ar3
      00012B 74r6D            [12]  636 	mov	a,#___str_3
      00012D C0 E0            [24]  637 	push	acc
      00012F 74s00            [12]  638 	mov	a,#(___str_3 >> 8)
      000131 C0 E0            [24]  639 	push	acc
      000133 74 80            [12]  640 	mov	a,#0x80
      000135 C0 E0            [24]  641 	push	acc
      000137 12r00r00         [24]  642 	lcall	_printf
      00013A E5 81            [12]  643 	mov	a,sp
      00013C 24 FB            [12]  644 	add	a,#0xfb
      00013E F5 81            [12]  645 	mov	sp,a
      000140 D0 04            [24]  646 	pop	ar4
      000142 D0 05            [24]  647 	pop	ar5
      000144 D0 06            [24]  648 	pop	ar6
      000146 D0 07            [24]  649 	pop	ar7
                                    650 ;	main.c:88: buffnewcount++;
      000148 0E               [12]  651 	inc	r6
      000149 BE 00 01         [24]  652 	cjne	r6,#0x00,00300$
      00014C 0F               [12]  653 	inc	r7
      00014D                        654 00300$:
      00014D                        655 00106$:
                                    656 ;	main.c:91: if (m<1980 && buffer[0] !=0)
      00014D 8C 02            [24]  657 	mov	ar2,r4
      00014F 8D 03            [24]  658 	mov	ar3,r5
      000151 C3               [12]  659 	clr	c
      000152 EA               [12]  660 	mov	a,r2
      000153 94 BC            [12]  661 	subb	a,#0xbc
      000155 EB               [12]  662 	mov	a,r3
      000156 94 07            [12]  663 	subb	a,#0x07
      000158 40 03            [24]  664 	jc	00301$
      00015A 02r02r44         [24]  665 	ljmp	00108$
      00015D                        666 00301$:
      00015D 90r12rC3         [24]  667 	mov	dptr,#_main_buffer_131072_67
      000160 E0               [24]  668 	movx	a,@dptr
      000161 F9               [12]  669 	mov	r1,a
      000162 A3               [24]  670 	inc	dptr
      000163 E0               [24]  671 	movx	a,@dptr
      000164 FA               [12]  672 	mov	r2,a
      000165 A3               [24]  673 	inc	dptr
      000166 E0               [24]  674 	movx	a,@dptr
      000167 FB               [12]  675 	mov	r3,a
      000168 E9               [12]  676 	mov	a,r1
      000169 4A               [12]  677 	orl	a,r2
      00016A 70 03            [24]  678 	jnz	00302$
      00016C 02r02r44         [24]  679 	ljmp	00108$
      00016F                        680 00302$:
                                    681 ;	main.c:93: buffer[1] = (uint8_t *)malloc(m);
      00016F 8C 82            [24]  682 	mov	dpl,r4
      000171 8D 83            [24]  683 	mov	dph,r5
      000173 C0 07            [24]  684 	push	ar7
      000175 C0 06            [24]  685 	push	ar6
      000177 C0 05            [24]  686 	push	ar5
      000179 C0 04            [24]  687 	push	ar4
      00017B 12r00r00         [24]  688 	lcall	_malloc
      00017E AA 82            [24]  689 	mov	r2,dpl
      000180 AB 83            [24]  690 	mov	r3,dph
      000182 D0 04            [24]  691 	pop	ar4
      000184 D0 05            [24]  692 	pop	ar5
      000186 8A*00            [24]  693 	mov	_main_sloc0_1_0,r2
      000188 8B*01            [24]  694 	mov	(_main_sloc0_1_0 + 1),r3
      00018A 75*02 00         [24]  695 	mov	(_main_sloc0_1_0 + 2),#0x00
      00018D 90r12rC6         [24]  696 	mov	dptr,#(_main_buffer_131072_67 + 0x0003)
      000190 E5*00            [12]  697 	mov	a,_main_sloc0_1_0
      000192 F0               [24]  698 	movx	@dptr,a
      000193 E5*01            [12]  699 	mov	a,(_main_sloc0_1_0 + 1)
      000195 A3               [24]  700 	inc	dptr
      000196 F0               [24]  701 	movx	@dptr,a
      000197 E5*02            [12]  702 	mov	a,(_main_sloc0_1_0 + 2)
      000199 A3               [24]  703 	inc	dptr
      00019A F0               [24]  704 	movx	@dptr,a
                                    705 ;	main.c:94: startaddr[1]= (int)buffer[1];
      00019B A8*00            [24]  706 	mov	r0,_main_sloc0_1_0
      00019D AB*01            [24]  707 	mov	r3,(_main_sloc0_1_0 + 1)
      00019F 90r13r05         [24]  708 	mov	dptr,#(_main_startaddr_131072_67 + 0x0002)
      0001A2 E8               [12]  709 	mov	a,r0
      0001A3 F0               [24]  710 	movx	@dptr,a
      0001A4 EB               [12]  711 	mov	a,r3
      0001A5 A3               [24]  712 	inc	dptr
      0001A6 F0               [24]  713 	movx	@dptr,a
                                    714 ;	main.c:95: endaddr[1]= (int)(buffer[1]+ m);
      0001A7 EC               [12]  715 	mov	a,r4
      0001A8 25*00            [12]  716 	add	a,_main_sloc0_1_0
      0001AA F9               [12]  717 	mov	r1,a
      0001AB ED               [12]  718 	mov	a,r5
      0001AC 35*01            [12]  719 	addc	a,(_main_sloc0_1_0 + 1)
      0001AE FA               [12]  720 	mov	r2,a
      0001AF 90r13r2D         [24]  721 	mov	dptr,#(_main_endaddr_131072_67 + 0x0002)
      0001B2 E9               [12]  722 	mov	a,r1
      0001B3 F0               [24]  723 	movx	@dptr,a
      0001B4 EA               [12]  724 	mov	a,r2
      0001B5 A3               [24]  725 	inc	dptr
      0001B6 F0               [24]  726 	movx	@dptr,a
                                    727 ;	main.c:96: buffersizes[1]= m;
      0001B7 90r13r55         [24]  728 	mov	dptr,#(_main_buffersizes_131072_67 + 0x0002)
      0001BA EC               [12]  729 	mov	a,r4
      0001BB F0               [24]  730 	movx	@dptr,a
      0001BC ED               [12]  731 	mov	a,r5
      0001BD A3               [24]  732 	inc	dptr
      0001BE F0               [24]  733 	movx	@dptr,a
                                    734 ;	main.c:97: buff01size=m;
      0001BF 90r12rC1         [24]  735 	mov	dptr,#_buff01size
      0001C2 EC               [12]  736 	mov	a,r4
      0001C3 F0               [24]  737 	movx	@dptr,a
      0001C4 ED               [12]  738 	mov	a,r5
      0001C5 A3               [24]  739 	inc	dptr
      0001C6 F0               [24]  740 	movx	@dptr,a
                                    741 ;	main.c:98: printf_tiny("\n \rMalloc buffer1 passed \n \r");
      0001C7 74r8F            [12]  742 	mov	a,#___str_4
      0001C9 C0 E0            [24]  743 	push	acc
      0001CB 74s00            [12]  744 	mov	a,#(___str_4 >> 8)
      0001CD C0 E0            [24]  745 	push	acc
      0001CF 12r00r00         [24]  746 	lcall	_printf_tiny
      0001D2 15 81            [12]  747 	dec	sp
      0001D4 15 81            [12]  748 	dec	sp
      0001D6 D0 06            [24]  749 	pop	ar6
      0001D8 D0 07            [24]  750 	pop	ar7
                                    751 ;	main.c:99: printf("\n \rBuffer 1 created at : :0X0%x \n \r",startaddr[buffnewcount]);
      0001DA EE               [12]  752 	mov	a,r6
      0001DB 2E               [12]  753 	add	a,r6
      0001DC FC               [12]  754 	mov	r4,a
      0001DD EF               [12]  755 	mov	a,r7
      0001DE 33               [12]  756 	rlc	a
      0001DF FD               [12]  757 	mov	r5,a
      0001E0 EC               [12]  758 	mov	a,r4
      0001E1 24r03            [12]  759 	add	a,#_main_startaddr_131072_67
      0001E3 F5 82            [12]  760 	mov	dpl,a
      0001E5 ED               [12]  761 	mov	a,r5
      0001E6 34s13            [12]  762 	addc	a,#(_main_startaddr_131072_67 >> 8)
      0001E8 F5 83            [12]  763 	mov	dph,a
      0001EA E0               [24]  764 	movx	a,@dptr
      0001EB FC               [12]  765 	mov	r4,a
      0001EC A3               [24]  766 	inc	dptr
      0001ED E0               [24]  767 	movx	a,@dptr
      0001EE FD               [12]  768 	mov	r5,a
      0001EF C0 07            [24]  769 	push	ar7
      0001F1 C0 06            [24]  770 	push	ar6
      0001F3 C0 04            [24]  771 	push	ar4
      0001F5 C0 05            [24]  772 	push	ar5
      0001F7 74rAC            [12]  773 	mov	a,#___str_5
      0001F9 C0 E0            [24]  774 	push	acc
      0001FB 74s00            [12]  775 	mov	a,#(___str_5 >> 8)
      0001FD C0 E0            [24]  776 	push	acc
      0001FF 74 80            [12]  777 	mov	a,#0x80
      000201 C0 E0            [24]  778 	push	acc
      000203 12r00r00         [24]  779 	lcall	_printf
      000206 E5 81            [12]  780 	mov	a,sp
      000208 24 FB            [12]  781 	add	a,#0xfb
      00020A F5 81            [12]  782 	mov	sp,a
      00020C D0 06            [24]  783 	pop	ar6
      00020E D0 07            [24]  784 	pop	ar7
                                    785 ;	main.c:100: buffnewcount++;
      000210 90r12rFF         [24]  786 	mov	dptr,#_main_buffnewcount_131072_67
      000213 74 01            [12]  787 	mov	a,#0x01
      000215 2E               [12]  788 	add	a,r6
      000216 F0               [24]  789 	movx	@dptr,a
      000217 E4               [12]  790 	clr	a
      000218 3F               [12]  791 	addc	a,r7
      000219 A3               [24]  792 	inc	dptr
      00021A F0               [24]  793 	movx	@dptr,a
                                    794 ;	main.c:101: storagecountall[0]=0;
      00021B 90r13r7B         [24]  795 	mov	dptr,#_main_storagecountall_131072_67
      00021E E4               [12]  796 	clr	a
      00021F F0               [24]  797 	movx	@dptr,a
      000220 A3               [24]  798 	inc	dptr
      000221 F0               [24]  799 	movx	@dptr,a
                                    800 ;	main.c:102: freespacesbuff[0]=buff01size;
      000222 90r12rC1         [24]  801 	mov	dptr,#_buff01size
      000225 E0               [24]  802 	movx	a,@dptr
      000226 FC               [12]  803 	mov	r4,a
      000227 A3               [24]  804 	inc	dptr
      000228 E0               [24]  805 	movx	a,@dptr
      000229 FD               [12]  806 	mov	r5,a
      00022A 90r13rA5         [24]  807 	mov	dptr,#_main_freespacesbuff_131072_67
      00022D EC               [12]  808 	mov	a,r4
      00022E F0               [24]  809 	movx	@dptr,a
      00022F ED               [12]  810 	mov	a,r5
      000230 A3               [24]  811 	inc	dptr
      000231 F0               [24]  812 	movx	@dptr,a
                                    813 ;	main.c:103: freespacesbuff[1]= buff01size;
      000232 90r12rC1         [24]  814 	mov	dptr,#_buff01size
      000235 E0               [24]  815 	movx	a,@dptr
      000236 FC               [12]  816 	mov	r4,a
      000237 A3               [24]  817 	inc	dptr
      000238 E0               [24]  818 	movx	a,@dptr
      000239 FD               [12]  819 	mov	r5,a
      00023A 90r13rA7         [24]  820 	mov	dptr,#(_main_freespacesbuff_131072_67 + 0x0002)
      00023D EC               [12]  821 	mov	a,r4
      00023E F0               [24]  822 	movx	@dptr,a
      00023F ED               [12]  823 	mov	a,r5
      000240 A3               [24]  824 	inc	dptr
      000241 F0               [24]  825 	movx	@dptr,a
                                    826 ;	main.c:104: break;
      000242 80 2E            [24]  827 	sjmp	00194$
      000244                        828 00108$:
                                    829 ;	main.c:108: free(buffer[0]);
      000244 90r12rC3         [24]  830 	mov	dptr,#_main_buffer_131072_67
      000247 E0               [24]  831 	movx	a,@dptr
      000248 FB               [12]  832 	mov	r3,a
      000249 A3               [24]  833 	inc	dptr
      00024A E0               [24]  834 	movx	a,@dptr
      00024B FC               [12]  835 	mov	r4,a
      00024C A3               [24]  836 	inc	dptr
      00024D E0               [24]  837 	movx	a,@dptr
      00024E FD               [12]  838 	mov	r5,a
      00024F 8B 82            [24]  839 	mov	dpl,r3
      000251 8C 83            [24]  840 	mov	dph,r4
      000253 8D F0            [24]  841 	mov	b,r5
      000255 C0 07            [24]  842 	push	ar7
      000257 C0 06            [24]  843 	push	ar6
      000259 12r00r00         [24]  844 	lcall	_free
                                    845 ;	main.c:109: printf_tiny("\n \rMalloc buffer1 failed so reenter value\n\r");
      00025C 74rD0            [12]  846 	mov	a,#___str_6
      00025E C0 E0            [24]  847 	push	acc
      000260 74s00            [12]  848 	mov	a,#(___str_6 >> 8)
      000262 C0 E0            [24]  849 	push	acc
      000264 12r00r00         [24]  850 	lcall	_printf_tiny
      000267 15 81            [12]  851 	dec	sp
      000269 15 81            [12]  852 	dec	sp
      00026B D0 06            [24]  853 	pop	ar6
      00026D D0 07            [24]  854 	pop	ar7
      00026F 02r00r23         [24]  855 	ljmp	00112$
                                    856 ;	main.c:114: while(1)
      000272                        857 00194$:
      000272 90r12rFF         [24]  858 	mov	dptr,#_main_buffnewcount_131072_67
      000275 E0               [24]  859 	movx	a,@dptr
      000276 F5*0A            [12]  860 	mov	_main_sloc4_1_0,a
      000278 A3               [24]  861 	inc	dptr
      000279 E0               [24]  862 	movx	a,@dptr
      00027A F5*0B            [12]  863 	mov	(_main_sloc4_1_0 + 1),a
      00027C 7C 00            [12]  864 	mov	r4,#0x00
      00027E 7D 00            [12]  865 	mov	r5,#0x00
      000280                        866 00148$:
                                    867 ;	main.c:116: printf("\n\r ####### Select from the command options below ##########");
      000280 C0 05            [24]  868 	push	ar5
      000282 C0 04            [24]  869 	push	ar4
      000284 74rFC            [12]  870 	mov	a,#___str_7
      000286 C0 E0            [24]  871 	push	acc
      000288 74s00            [12]  872 	mov	a,#(___str_7 >> 8)
      00028A C0 E0            [24]  873 	push	acc
      00028C 74 80            [12]  874 	mov	a,#0x80
      00028E C0 E0            [24]  875 	push	acc
      000290 12r00r00         [24]  876 	lcall	_printf
      000293 15 81            [12]  877 	dec	sp
      000295 15 81            [12]  878 	dec	sp
      000297 15 81            [12]  879 	dec	sp
                                    880 ;	main.c:117: printf("\n \r 1. '+' Sign --> Add a New Buffer");
      000299 74r38            [12]  881 	mov	a,#___str_8
      00029B C0 E0            [24]  882 	push	acc
      00029D 74s01            [12]  883 	mov	a,#(___str_8 >> 8)
      00029F C0 E0            [24]  884 	push	acc
      0002A1 74 80            [12]  885 	mov	a,#0x80
      0002A3 C0 E0            [24]  886 	push	acc
      0002A5 12r00r00         [24]  887 	lcall	_printf
      0002A8 15 81            [12]  888 	dec	sp
      0002AA 15 81            [12]  889 	dec	sp
      0002AC 15 81            [12]  890 	dec	sp
                                    891 ;	main.c:118: printf("\n \r 2. '-' Sign --> Clean a Buffer");
      0002AE 74r5D            [12]  892 	mov	a,#___str_9
      0002B0 C0 E0            [24]  893 	push	acc
      0002B2 74s01            [12]  894 	mov	a,#(___str_9 >> 8)
      0002B4 C0 E0            [24]  895 	push	acc
      0002B6 74 80            [12]  896 	mov	a,#0x80
      0002B8 C0 E0            [24]  897 	push	acc
      0002BA 12r00r00         [24]  898 	lcall	_printf
      0002BD 15 81            [12]  899 	dec	sp
      0002BF 15 81            [12]  900 	dec	sp
      0002C1 15 81            [12]  901 	dec	sp
                                    902 ;	main.c:119: printf("\n \r 3. '?' Sign --> Display a Detailed Heap Report");
      0002C3 74r80            [12]  903 	mov	a,#___str_10
      0002C5 C0 E0            [24]  904 	push	acc
      0002C7 74s01            [12]  905 	mov	a,#(___str_10 >> 8)
      0002C9 C0 E0            [24]  906 	push	acc
      0002CB 74 80            [12]  907 	mov	a,#0x80
      0002CD C0 E0            [24]  908 	push	acc
      0002CF 12r00r00         [24]  909 	lcall	_printf
      0002D2 15 81            [12]  910 	dec	sp
      0002D4 15 81            [12]  911 	dec	sp
      0002D6 15 81            [12]  912 	dec	sp
                                    913 ;	main.c:120: printf("\n \r 4. '@' Sign --> Clear all Buffers Data and Start Again");
      0002D8 74rB3            [12]  914 	mov	a,#___str_11
      0002DA C0 E0            [24]  915 	push	acc
      0002DC 74s01            [12]  916 	mov	a,#(___str_11 >> 8)
      0002DE C0 E0            [24]  917 	push	acc
      0002E0 74 80            [12]  918 	mov	a,#0x80
      0002E2 C0 E0            [24]  919 	push	acc
      0002E4 12r00r00         [24]  920 	lcall	_printf
      0002E7 15 81            [12]  921 	dec	sp
      0002E9 15 81            [12]  922 	dec	sp
      0002EB 15 81            [12]  923 	dec	sp
                                    924 ;	main.c:121: printf("\n \r 5. 'a'-'z'  --> Store these Characters in Buffer 0");
      0002ED 74rEE            [12]  925 	mov	a,#___str_12
      0002EF C0 E0            [24]  926 	push	acc
      0002F1 74s01            [12]  927 	mov	a,#(___str_12 >> 8)
      0002F3 C0 E0            [24]  928 	push	acc
      0002F5 74 80            [12]  929 	mov	a,#0x80
      0002F7 C0 E0            [24]  930 	push	acc
      0002F9 12r00r00         [24]  931 	lcall	_printf
      0002FC 15 81            [12]  932 	dec	sp
      0002FE 15 81            [12]  933 	dec	sp
      000300 15 81            [12]  934 	dec	sp
                                    935 ;	main.c:122: printf("##############################################################");
      000302 74r25            [12]  936 	mov	a,#___str_13
      000304 C0 E0            [24]  937 	push	acc
      000306 74s02            [12]  938 	mov	a,#(___str_13 >> 8)
      000308 C0 E0            [24]  939 	push	acc
      00030A 74 80            [12]  940 	mov	a,#0x80
      00030C C0 E0            [24]  941 	push	acc
      00030E 12r00r00         [24]  942 	lcall	_printf
      000311 15 81            [12]  943 	dec	sp
      000313 15 81            [12]  944 	dec	sp
      000315 15 81            [12]  945 	dec	sp
                                    946 ;	main.c:123: printf_tiny("\n \rEnter character \n \r");
      000317 74r64            [12]  947 	mov	a,#___str_14
      000319 C0 E0            [24]  948 	push	acc
      00031B 74s02            [12]  949 	mov	a,#(___str_14 >> 8)
      00031D C0 E0            [24]  950 	push	acc
      00031F 12r00r00         [24]  951 	lcall	_printf_tiny
      000322 15 81            [12]  952 	dec	sp
      000324 15 81            [12]  953 	dec	sp
                                    954 ;	main.c:124: uint16_t takechar = getchar();
      000326 12r0BrF9         [24]  955 	lcall	_getchar
      000329 85 82*0C         [24]  956 	mov	_main_sloc5_1_0,dpl
      00032C 85 83*0D         [24]  957 	mov	(_main_sloc5_1_0 + 1),dph
      00032F D0 04            [24]  958 	pop	ar4
      000331 D0 05            [24]  959 	pop	ar5
                                    960 ;	main.c:125: totalcharcount++;
      000333 0C               [12]  961 	inc	r4
      000334 BC 00 01         [24]  962 	cjne	r4,#0x00,00303$
      000337 0D               [12]  963 	inc	r5
      000338                        964 00303$:
                                    965 ;	main.c:126: if(takechar !='?')
      000338 74 3F            [12]  966 	mov	a,#0x3f
      00033A B5*0C 06         [24]  967 	cjne	a,_main_sloc5_1_0,00304$
      00033D E4               [12]  968 	clr	a
      00033E B5*0D 02         [24]  969 	cjne	a,(_main_sloc5_1_0 + 1),00304$
      000341 80 0C            [24]  970 	sjmp	00115$
      000343                        971 00304$:
                                    972 ;	main.c:128: totalcharafterQ++;
      000343 90r13rA3         [24]  973 	mov	dptr,#_main_totalcharafterQ_131072_67
      000346 E0               [24]  974 	movx	a,@dptr
      000347 24 01            [12]  975 	add	a,#0x01
      000349 F0               [24]  976 	movx	@dptr,a
      00034A A3               [24]  977 	inc	dptr
      00034B E0               [24]  978 	movx	a,@dptr
      00034C 34 00            [12]  979 	addc	a,#0x00
      00034E F0               [24]  980 	movx	@dptr,a
      00034F                        981 00115$:
                                    982 ;	main.c:130: printf("\n \rTotal number of characters =%d \n \r",totalcharcount);
      00034F C0 05            [24]  983 	push	ar5
      000351 C0 04            [24]  984 	push	ar4
      000353 C0 04            [24]  985 	push	ar4
      000355 C0 05            [24]  986 	push	ar5
      000357 74r7B            [12]  987 	mov	a,#___str_15
      000359 C0 E0            [24]  988 	push	acc
      00035B 74s02            [12]  989 	mov	a,#(___str_15 >> 8)
      00035D C0 E0            [24]  990 	push	acc
      00035F 74 80            [12]  991 	mov	a,#0x80
      000361 C0 E0            [24]  992 	push	acc
      000363 12r00r00         [24]  993 	lcall	_printf
      000366 E5 81            [12]  994 	mov	a,sp
      000368 24 FB            [12]  995 	add	a,#0xfb
      00036A F5 81            [12]  996 	mov	sp,a
                                    997 ;	main.c:131: putchar(takechar);
      00036C 85*0C 82         [24]  998 	mov	dpl,_main_sloc5_1_0
      00036F 85*0D 83         [24]  999 	mov	dph,(_main_sloc5_1_0 + 1)
      000372 12r0Cr07         [24] 1000 	lcall	_putchar
      000375 D0 04            [24] 1001 	pop	ar4
      000377 D0 05            [24] 1002 	pop	ar5
                                   1003 ;	main.c:132: if ((takechar>96 && takechar<123) && freespacesbuff[0] !=0)      // to get character from 'a' to 'z' and store in Buffer 0
      000379 A8*0C            [24] 1004 	mov	r0,_main_sloc5_1_0
      00037B A9*0D            [24] 1005 	mov	r1,(_main_sloc5_1_0 + 1)
      00037D C3               [12] 1006 	clr	c
      00037E 74 60            [12] 1007 	mov	a,#0x60
      000380 98               [12] 1008 	subb	a,r0
      000381 E4               [12] 1009 	clr	a
      000382 99               [12] 1010 	subb	a,r1
      000383 40 03            [24] 1011 	jc	00305$
      000385 02r04r7A         [24] 1012 	ljmp	00117$
      000388                       1013 00305$:
      000388 A8*0C            [24] 1014 	mov	r0,_main_sloc5_1_0
      00038A A9*0D            [24] 1015 	mov	r1,(_main_sloc5_1_0 + 1)
      00038C C3               [12] 1016 	clr	c
      00038D E8               [12] 1017 	mov	a,r0
      00038E 94 7B            [12] 1018 	subb	a,#0x7b
      000390 E9               [12] 1019 	mov	a,r1
      000391 94 00            [12] 1020 	subb	a,#0x00
      000393 40 03            [24] 1021 	jc	00306$
      000395 02r04r7A         [24] 1022 	ljmp	00117$
      000398                       1023 00306$:
      000398 90r13rA5         [24] 1024 	mov	dptr,#_main_freespacesbuff_131072_67
      00039B E0               [24] 1025 	movx	a,@dptr
      00039C F8               [12] 1026 	mov	r0,a
      00039D A3               [24] 1027 	inc	dptr
      00039E E0               [24] 1028 	movx	a,@dptr
      00039F F9               [12] 1029 	mov	r1,a
      0003A0 48               [12] 1030 	orl	a,r0
      0003A1 70 03            [24] 1031 	jnz	00307$
      0003A3 02r04r7A         [24] 1032 	ljmp	00117$
      0003A6                       1033 00307$:
                                   1034 ;	main.c:134: DEBUGPORT(0xAA);
      0003A6 C0 04            [24] 1035 	push	ar4
      0003A8 C0 05            [24] 1036 	push	ar5
      0003AA 75 82 AA         [24] 1037 	mov	dpl,#0xaa
      0003AD C0 05            [24] 1038 	push	ar5
      0003AF C0 04            [24] 1039 	push	ar4
      0003B1 12r00r00         [24] 1040 	lcall	_dataout
      0003B4 D0 04            [24] 1041 	pop	ar4
      0003B6 D0 05            [24] 1042 	pop	ar5
                                   1043 ;	main.c:135: *(buffer[0]+ totalstoragecount) = takechar;
      0003B8 90r12rC3         [24] 1044 	mov	dptr,#_main_buffer_131072_67
      0003BB E0               [24] 1045 	movx	a,@dptr
      0003BC F5*00            [12] 1046 	mov	_main_sloc0_1_0,a
      0003BE A3               [24] 1047 	inc	dptr
      0003BF E0               [24] 1048 	movx	a,@dptr
      0003C0 F5*01            [12] 1049 	mov	(_main_sloc0_1_0 + 1),a
      0003C2 A3               [24] 1050 	inc	dptr
      0003C3 E0               [24] 1051 	movx	a,@dptr
      0003C4 F5*02            [12] 1052 	mov	(_main_sloc0_1_0 + 2),a
      0003C6 90r13r01         [24] 1053 	mov	dptr,#_main_totalstoragecount_131072_67
      0003C9 E0               [24] 1054 	movx	a,@dptr
      0003CA F5*03            [12] 1055 	mov	_main_sloc1_1_0,a
      0003CC A3               [24] 1056 	inc	dptr
      0003CD E0               [24] 1057 	movx	a,@dptr
      0003CE F5*04            [12] 1058 	mov	(_main_sloc1_1_0 + 1),a
      0003D0 E5*03            [12] 1059 	mov	a,_main_sloc1_1_0
      0003D2 25*00            [12] 1060 	add	a,_main_sloc0_1_0
      0003D4 F5*00            [12] 1061 	mov	_main_sloc0_1_0,a
      0003D6 E5*04            [12] 1062 	mov	a,(_main_sloc1_1_0 + 1)
      0003D8 35*01            [12] 1063 	addc	a,(_main_sloc0_1_0 + 1)
      0003DA F5*01            [12] 1064 	mov	(_main_sloc0_1_0 + 1),a
      0003DC AC*0C            [24] 1065 	mov	r4,_main_sloc5_1_0
      0003DE 85*00 82         [24] 1066 	mov	dpl,_main_sloc0_1_0
      0003E1 85*01 83         [24] 1067 	mov	dph,(_main_sloc0_1_0 + 1)
      0003E4 85*02 F0         [24] 1068 	mov	b,(_main_sloc0_1_0 + 2)
      0003E7 EC               [12] 1069 	mov	a,r4
      0003E8 12r00r00         [24] 1070 	lcall	__gptrput
                                   1071 ;	main.c:137: printf(" --> This character is stored at %p \n",(buffer[0]+totalstoragecount));
      0003EB 90r12rC3         [24] 1072 	mov	dptr,#_main_buffer_131072_67
      0003EE E0               [24] 1073 	movx	a,@dptr
      0003EF F9               [12] 1074 	mov	r1,a
      0003F0 A3               [24] 1075 	inc	dptr
      0003F1 E0               [24] 1076 	movx	a,@dptr
      0003F2 FC               [12] 1077 	mov	r4,a
      0003F3 A3               [24] 1078 	inc	dptr
      0003F4 E0               [24] 1079 	movx	a,@dptr
      0003F5 FD               [12] 1080 	mov	r5,a
      0003F6 E5*03            [12] 1081 	mov	a,_main_sloc1_1_0
      0003F8 29               [12] 1082 	add	a,r1
      0003F9 F9               [12] 1083 	mov	r1,a
      0003FA E5*04            [12] 1084 	mov	a,(_main_sloc1_1_0 + 1)
      0003FC 3C               [12] 1085 	addc	a,r4
      0003FD FC               [12] 1086 	mov	r4,a
      0003FE C0 05            [24] 1087 	push	ar5
      000400 C0 04            [24] 1088 	push	ar4
      000402 C0 01            [24] 1089 	push	ar1
      000404 C0 04            [24] 1090 	push	ar4
      000406 C0 05            [24] 1091 	push	ar5
      000408 74rA1            [12] 1092 	mov	a,#___str_16
      00040A C0 E0            [24] 1093 	push	acc
      00040C 74s02            [12] 1094 	mov	a,#(___str_16 >> 8)
      00040E C0 E0            [24] 1095 	push	acc
      000410 74 80            [12] 1096 	mov	a,#0x80
      000412 C0 E0            [24] 1097 	push	acc
      000414 12r00r00         [24] 1098 	lcall	_printf
      000417 E5 81            [12] 1099 	mov	a,sp
      000419 24 FA            [12] 1100 	add	a,#0xfa
      00041B F5 81            [12] 1101 	mov	sp,a
      00041D D0 04            [24] 1102 	pop	ar4
      00041F D0 05            [24] 1103 	pop	ar5
                                   1104 ;	main.c:140: totalstoragecount++;
      000421 90r13r01         [24] 1105 	mov	dptr,#_main_totalstoragecount_131072_67
      000424 74 01            [12] 1106 	mov	a,#0x01
      000426 25*03            [12] 1107 	add	a,_main_sloc1_1_0
      000428 F0               [24] 1108 	movx	@dptr,a
      000429 E4               [12] 1109 	clr	a
      00042A 35*04            [12] 1110 	addc	a,(_main_sloc1_1_0 + 1)
      00042C A3               [24] 1111 	inc	dptr
      00042D F0               [24] 1112 	movx	@dptr,a
                                   1113 ;	main.c:142: storagecountall[0]=totalstoragecount;
      00042E 90r13r01         [24] 1114 	mov	dptr,#_main_totalstoragecount_131072_67
      000431 E0               [24] 1115 	movx	a,@dptr
      000432 FC               [12] 1116 	mov	r4,a
      000433 A3               [24] 1117 	inc	dptr
      000434 E0               [24] 1118 	movx	a,@dptr
      000435 FD               [12] 1119 	mov	r5,a
      000436 90r13r7B         [24] 1120 	mov	dptr,#_main_storagecountall_131072_67
      000439 EC               [12] 1121 	mov	a,r4
      00043A F0               [24] 1122 	movx	@dptr,a
      00043B ED               [12] 1123 	mov	a,r5
      00043C A3               [24] 1124 	inc	dptr
      00043D F0               [24] 1125 	movx	@dptr,a
                                   1126 ;	main.c:143: freespacesbuff[0]= buff01size - storagecountall[0];
      00043E 90r12rC1         [24] 1127 	mov	dptr,#_buff01size
      000441 E0               [24] 1128 	movx	a,@dptr
      000442 F8               [12] 1129 	mov	r0,a
      000443 A3               [24] 1130 	inc	dptr
      000444 E0               [24] 1131 	movx	a,@dptr
      000445 F9               [12] 1132 	mov	r1,a
      000446 E8               [12] 1133 	mov	a,r0
      000447 C3               [12] 1134 	clr	c
      000448 9C               [12] 1135 	subb	a,r4
      000449 F8               [12] 1136 	mov	r0,a
      00044A E9               [12] 1137 	mov	a,r1
      00044B 9D               [12] 1138 	subb	a,r5
      00044C F9               [12] 1139 	mov	r1,a
      00044D 90r13rA5         [24] 1140 	mov	dptr,#_main_freespacesbuff_131072_67
      000450 E8               [12] 1141 	mov	a,r0
      000451 F0               [24] 1142 	movx	@dptr,a
      000452 E9               [12] 1143 	mov	a,r1
      000453 A3               [24] 1144 	inc	dptr
      000454 F0               [24] 1145 	movx	@dptr,a
                                   1146 ;	main.c:144: printf("\n \r Total number of storage characters =%d \n",totalstoragecount);
      000455 C0 05            [24] 1147 	push	ar5
      000457 C0 04            [24] 1148 	push	ar4
      000459 C0 04            [24] 1149 	push	ar4
      00045B C0 05            [24] 1150 	push	ar5
      00045D 74rC7            [12] 1151 	mov	a,#___str_17
      00045F C0 E0            [24] 1152 	push	acc
      000461 74s02            [12] 1153 	mov	a,#(___str_17 >> 8)
      000463 C0 E0            [24] 1154 	push	acc
      000465 74 80            [12] 1155 	mov	a,#0x80
      000467 C0 E0            [24] 1156 	push	acc
      000469 12r00r00         [24] 1157 	lcall	_printf
      00046C E5 81            [12] 1158 	mov	a,sp
      00046E 24 FB            [12] 1159 	add	a,#0xfb
      000470 F5 81            [12] 1160 	mov	sp,a
      000472 D0 04            [24] 1161 	pop	ar4
      000474 D0 05            [24] 1162 	pop	ar5
                                   1163 ;	main.c:236: main();
      000476 D0 05            [24] 1164 	pop	ar5
      000478 D0 04            [24] 1165 	pop	ar4
                                   1166 ;	main.c:144: printf("\n \r Total number of storage characters =%d \n",totalstoragecount);
      00047A                       1167 00117$:
                                   1168 ;	main.c:146: if (takechar=='+')      //to create a new buffer
      00047A 74 2B            [12] 1169 	mov	a,#0x2b
      00047C B5*0C 06         [24] 1170 	cjne	a,_main_sloc5_1_0,00308$
      00047F E4               [12] 1171 	clr	a
      000480 B5*0D 02         [24] 1172 	cjne	a,(_main_sloc5_1_0 + 1),00308$
      000483 80 03            [24] 1173 	sjmp	00309$
      000485                       1174 00308$:
      000485 02r06r0E         [24] 1175 	ljmp	00124$
      000488                       1176 00309$:
                                   1177 ;	main.c:148: DEBUGPORT(0xBB);
      000488 C0 04            [24] 1178 	push	ar4
      00048A C0 05            [24] 1179 	push	ar5
      00048C 75 82 BB         [24] 1180 	mov	dpl,#0xbb
      00048F C0 05            [24] 1181 	push	ar5
      000491 C0 04            [24] 1182 	push	ar4
      000493 12r00r00         [24] 1183 	lcall	_dataout
                                   1184 ;	main.c:149: printf("\n \r You need to enter a number between 30 to 300 bytes to create a new buffer \n");
      000496 74rF4            [12] 1185 	mov	a,#___str_18
      000498 C0 E0            [24] 1186 	push	acc
      00049A 74s02            [12] 1187 	mov	a,#(___str_18 >> 8)
      00049C C0 E0            [24] 1188 	push	acc
      00049E 74 80            [12] 1189 	mov	a,#0x80
      0004A0 C0 E0            [24] 1190 	push	acc
      0004A2 12r00r00         [24] 1191 	lcall	_printf
      0004A5 15 81            [12] 1192 	dec	sp
      0004A7 15 81            [12] 1193 	dec	sp
      0004A9 15 81            [12] 1194 	dec	sp
                                   1195 ;	main.c:150: uint16_t n= takeinput();
      0004AB 12r0Br38         [24] 1196 	lcall	_takeinput
      0004AE 85 82*00         [24] 1197 	mov	_main_sloc0_1_0,dpl
      0004B1 85 83*01         [24] 1198 	mov	(_main_sloc0_1_0 + 1),dph
      0004B4 D0 04            [24] 1199 	pop	ar4
      0004B6 D0 05            [24] 1200 	pop	ar5
                                   1201 ;	main.c:151: if (n>=30 && n<=300){
      0004B8 AC*00            [24] 1202 	mov	r4,_main_sloc0_1_0
      0004BA AD*01            [24] 1203 	mov	r5,(_main_sloc0_1_0 + 1)
      0004BC C3               [12] 1204 	clr	c
      0004BD EC               [12] 1205 	mov	a,r4
      0004BE 94 1E            [12] 1206 	subb	a,#0x1e
      0004C0 ED               [12] 1207 	mov	a,r5
      0004C1 94 00            [12] 1208 	subb	a,#0x00
      0004C3 D0 05            [24] 1209 	pop	ar5
      0004C5 D0 04            [24] 1210 	pop	ar4
      0004C7 50 03            [24] 1211 	jnc	00310$
      0004C9 02r06r0E         [24] 1212 	ljmp	00124$
      0004CC                       1213 00310$:
      0004CC C0 04            [24] 1214 	push	ar4
      0004CE C0 05            [24] 1215 	push	ar5
      0004D0 AC*00            [24] 1216 	mov	r4,_main_sloc0_1_0
      0004D2 AD*01            [24] 1217 	mov	r5,(_main_sloc0_1_0 + 1)
      0004D4 C3               [12] 1218 	clr	c
      0004D5 74 2C            [12] 1219 	mov	a,#0x2c
      0004D7 9C               [12] 1220 	subb	a,r4
      0004D8 74 01            [12] 1221 	mov	a,#0x01
      0004DA 9D               [12] 1222 	subb	a,r5
      0004DB D0 05            [24] 1223 	pop	ar5
      0004DD D0 04            [24] 1224 	pop	ar4
      0004DF 50 03            [24] 1225 	jnc	00311$
      0004E1 02r06r0E         [24] 1226 	ljmp	00124$
      0004E4                       1227 00311$:
                                   1228 ;	main.c:152: buffer[buffnewcount] = (uint8_t *)malloc(n);
      0004E4 C0 04            [24] 1229 	push	ar4
      0004E6 C0 05            [24] 1230 	push	ar5
      0004E8 90r00r00         [24] 1231 	mov	dptr,#__mulint_PARM_2
      0004EB E5*0A            [12] 1232 	mov	a,_main_sloc4_1_0
      0004ED F0               [24] 1233 	movx	@dptr,a
      0004EE E5*0B            [12] 1234 	mov	a,(_main_sloc4_1_0 + 1)
      0004F0 A3               [24] 1235 	inc	dptr
      0004F1 F0               [24] 1236 	movx	@dptr,a
      0004F2 90 00 03         [24] 1237 	mov	dptr,#0x0003
      0004F5 12r00r00         [24] 1238 	lcall	__mulint
      0004F8 AC 82            [24] 1239 	mov	r4,dpl
      0004FA AD 83            [24] 1240 	mov	r5,dph
      0004FC EC               [12] 1241 	mov	a,r4
      0004FD 24rC3            [12] 1242 	add	a,#_main_buffer_131072_67
      0004FF F5*03            [12] 1243 	mov	_main_sloc1_1_0,a
      000501 ED               [12] 1244 	mov	a,r5
      000502 34s12            [12] 1245 	addc	a,#(_main_buffer_131072_67 >> 8)
      000504 F5*04            [12] 1246 	mov	(_main_sloc1_1_0 + 1),a
      000506 85*00 82         [24] 1247 	mov	dpl,_main_sloc0_1_0
      000509 85*01 83         [24] 1248 	mov	dph,(_main_sloc0_1_0 + 1)
      00050C 12r00r00         [24] 1249 	lcall	_malloc
      00050F AC 82            [24] 1250 	mov	r4,dpl
      000511 AD 83            [24] 1251 	mov	r5,dph
      000513 8C*05            [24] 1252 	mov	_main_sloc2_1_0,r4
      000515 8D*06            [24] 1253 	mov	(_main_sloc2_1_0 + 1),r5
      000517 75*07 00         [24] 1254 	mov	(_main_sloc2_1_0 + 2),#0x00
      00051A 85*03 82         [24] 1255 	mov	dpl,_main_sloc1_1_0
      00051D 85*04 83         [24] 1256 	mov	dph,(_main_sloc1_1_0 + 1)
      000520 E5*05            [12] 1257 	mov	a,_main_sloc2_1_0
      000522 F0               [24] 1258 	movx	@dptr,a
      000523 E5*06            [12] 1259 	mov	a,(_main_sloc2_1_0 + 1)
      000525 A3               [24] 1260 	inc	dptr
      000526 F0               [24] 1261 	movx	@dptr,a
      000527 E5*07            [12] 1262 	mov	a,(_main_sloc2_1_0 + 2)
      000529 A3               [24] 1263 	inc	dptr
      00052A F0               [24] 1264 	movx	@dptr,a
                                   1265 ;	main.c:153: startaddr[buffnewcount] = (int)buffer[buffnewcount];
      00052B E5*0A            [12] 1266 	mov	a,_main_sloc4_1_0
      00052D 25*0A            [12] 1267 	add	a,_main_sloc4_1_0
      00052F F5*08            [12] 1268 	mov	_main_sloc3_1_0,a
      000531 E5*0B            [12] 1269 	mov	a,(_main_sloc4_1_0 + 1)
      000533 33               [12] 1270 	rlc	a
      000534 F5*09            [12] 1271 	mov	(_main_sloc3_1_0 + 1),a
      000536 E5*08            [12] 1272 	mov	a,_main_sloc3_1_0
      000538 24r03            [12] 1273 	add	a,#_main_startaddr_131072_67
      00053A F5 82            [12] 1274 	mov	dpl,a
      00053C E5*09            [12] 1275 	mov	a,(_main_sloc3_1_0 + 1)
      00053E 34s13            [12] 1276 	addc	a,#(_main_startaddr_131072_67 >> 8)
      000540 F5 83            [12] 1277 	mov	dph,a
      000542 A9*05            [24] 1278 	mov	r1,_main_sloc2_1_0
      000544 AC*06            [24] 1279 	mov	r4,(_main_sloc2_1_0 + 1)
      000546 E9               [12] 1280 	mov	a,r1
      000547 F0               [24] 1281 	movx	@dptr,a
      000548 EC               [12] 1282 	mov	a,r4
      000549 A3               [24] 1283 	inc	dptr
      00054A F0               [24] 1284 	movx	@dptr,a
                                   1285 ;	main.c:154: endaddr[buffnewcount]= (int)(buffer[buffnewcount]+ n);
      00054B E5*08            [12] 1286 	mov	a,_main_sloc3_1_0
      00054D 24r2B            [12] 1287 	add	a,#_main_endaddr_131072_67
      00054F F5 82            [12] 1288 	mov	dpl,a
      000551 E5*09            [12] 1289 	mov	a,(_main_sloc3_1_0 + 1)
      000553 34s13            [12] 1290 	addc	a,#(_main_endaddr_131072_67 >> 8)
      000555 F5 83            [12] 1291 	mov	dph,a
      000557 E5*00            [12] 1292 	mov	a,_main_sloc0_1_0
      000559 25*05            [12] 1293 	add	a,_main_sloc2_1_0
      00055B F9               [12] 1294 	mov	r1,a
      00055C E5*01            [12] 1295 	mov	a,(_main_sloc0_1_0 + 1)
      00055E 35*06            [12] 1296 	addc	a,(_main_sloc2_1_0 + 1)
      000560 FC               [12] 1297 	mov	r4,a
      000561 E9               [12] 1298 	mov	a,r1
      000562 F0               [24] 1299 	movx	@dptr,a
      000563 EC               [12] 1300 	mov	a,r4
      000564 A3               [24] 1301 	inc	dptr
      000565 F0               [24] 1302 	movx	@dptr,a
                                   1303 ;	main.c:155: buffersizes[buffnewcount]= n;
      000566 E5*08            [12] 1304 	mov	a,_main_sloc3_1_0
      000568 24r53            [12] 1305 	add	a,#_main_buffersizes_131072_67
      00056A F5 82            [12] 1306 	mov	dpl,a
      00056C E5*09            [12] 1307 	mov	a,(_main_sloc3_1_0 + 1)
      00056E 34s13            [12] 1308 	addc	a,#(_main_buffersizes_131072_67 >> 8)
      000570 F5 83            [12] 1309 	mov	dph,a
      000572 E5*00            [12] 1310 	mov	a,_main_sloc0_1_0
      000574 F0               [24] 1311 	movx	@dptr,a
      000575 E5*01            [12] 1312 	mov	a,(_main_sloc0_1_0 + 1)
      000577 A3               [24] 1313 	inc	dptr
      000578 F0               [24] 1314 	movx	@dptr,a
                                   1315 ;	main.c:156: storagecountall[buffnewcount]=0;
      000579 E5*08            [12] 1316 	mov	a,_main_sloc3_1_0
      00057B 24r7B            [12] 1317 	add	a,#_main_storagecountall_131072_67
      00057D FC               [12] 1318 	mov	r4,a
      00057E E5*09            [12] 1319 	mov	a,(_main_sloc3_1_0 + 1)
      000580 34s13            [12] 1320 	addc	a,#(_main_storagecountall_131072_67 >> 8)
      000582 FD               [12] 1321 	mov	r5,a
      000583 8C 82            [24] 1322 	mov	dpl,r4
      000585 8D 83            [24] 1323 	mov	dph,r5
      000587 E4               [12] 1324 	clr	a
      000588 F0               [24] 1325 	movx	@dptr,a
      000589 A3               [24] 1326 	inc	dptr
      00058A F0               [24] 1327 	movx	@dptr,a
                                   1328 ;	main.c:157: freespacesbuff[buffnewcount]= n - storagecountall[buffnewcount];
      00058B E5*08            [12] 1329 	mov	a,_main_sloc3_1_0
      00058D 24rA5            [12] 1330 	add	a,#_main_freespacesbuff_131072_67
      00058F F8               [12] 1331 	mov	r0,a
      000590 E5*09            [12] 1332 	mov	a,(_main_sloc3_1_0 + 1)
      000592 34s13            [12] 1333 	addc	a,#(_main_freespacesbuff_131072_67 >> 8)
      000594 F9               [12] 1334 	mov	r1,a
      000595 8C 82            [24] 1335 	mov	dpl,r4
      000597 8D 83            [24] 1336 	mov	dph,r5
      000599 E0               [24] 1337 	movx	a,@dptr
      00059A FC               [12] 1338 	mov	r4,a
      00059B A3               [24] 1339 	inc	dptr
      00059C E0               [24] 1340 	movx	a,@dptr
      00059D FD               [12] 1341 	mov	r5,a
      00059E E5*00            [12] 1342 	mov	a,_main_sloc0_1_0
      0005A0 C3               [12] 1343 	clr	c
      0005A1 9C               [12] 1344 	subb	a,r4
      0005A2 FC               [12] 1345 	mov	r4,a
      0005A3 E5*01            [12] 1346 	mov	a,(_main_sloc0_1_0 + 1)
      0005A5 9D               [12] 1347 	subb	a,r5
      0005A6 FD               [12] 1348 	mov	r5,a
      0005A7 88 82            [24] 1349 	mov	dpl,r0
      0005A9 89 83            [24] 1350 	mov	dph,r1
      0005AB EC               [12] 1351 	mov	a,r4
      0005AC F0               [24] 1352 	movx	@dptr,a
      0005AD ED               [12] 1353 	mov	a,r5
      0005AE A3               [24] 1354 	inc	dptr
      0005AF F0               [24] 1355 	movx	@dptr,a
                                   1356 ;	main.c:158: printf_tiny("\n \r New Malloc buffer %d passed\n\r",buffnewcount);
      0005B0 C0 05            [24] 1357 	push	ar5
      0005B2 C0 04            [24] 1358 	push	ar4
      0005B4 C0*0A            [24] 1359 	push	_main_sloc4_1_0
      0005B6 C0*0B            [24] 1360 	push	(_main_sloc4_1_0 + 1)
      0005B8 74r44            [12] 1361 	mov	a,#___str_19
      0005BA C0 E0            [24] 1362 	push	acc
      0005BC 74s03            [12] 1363 	mov	a,#(___str_19 >> 8)
      0005BE C0 E0            [24] 1364 	push	acc
      0005C0 12r00r00         [24] 1365 	lcall	_printf_tiny
      0005C3 E5 81            [12] 1366 	mov	a,sp
      0005C5 24 FC            [12] 1367 	add	a,#0xfc
      0005C7 F5 81            [12] 1368 	mov	sp,a
      0005C9 D0 04            [24] 1369 	pop	ar4
      0005CB D0 05            [24] 1370 	pop	ar5
                                   1371 ;	main.c:159: printf("\n \r Address of buffer no %d: %p \n \r",buffnewcount, buffer[buffnewcount]);
      0005CD 85*03 82         [24] 1372 	mov	dpl,_main_sloc1_1_0
      0005D0 85*04 83         [24] 1373 	mov	dph,(_main_sloc1_1_0 + 1)
      0005D3 E0               [24] 1374 	movx	a,@dptr
      0005D4 F9               [12] 1375 	mov	r1,a
      0005D5 A3               [24] 1376 	inc	dptr
      0005D6 E0               [24] 1377 	movx	a,@dptr
      0005D7 FC               [12] 1378 	mov	r4,a
      0005D8 A3               [24] 1379 	inc	dptr
      0005D9 E0               [24] 1380 	movx	a,@dptr
      0005DA FD               [12] 1381 	mov	r5,a
      0005DB C0 05            [24] 1382 	push	ar5
      0005DD C0 04            [24] 1383 	push	ar4
      0005DF C0 01            [24] 1384 	push	ar1
      0005E1 C0 04            [24] 1385 	push	ar4
      0005E3 C0 05            [24] 1386 	push	ar5
      0005E5 C0*0A            [24] 1387 	push	_main_sloc4_1_0
      0005E7 C0*0B            [24] 1388 	push	(_main_sloc4_1_0 + 1)
      0005E9 74r66            [12] 1389 	mov	a,#___str_20
      0005EB C0 E0            [24] 1390 	push	acc
      0005ED 74s03            [12] 1391 	mov	a,#(___str_20 >> 8)
      0005EF C0 E0            [24] 1392 	push	acc
      0005F1 74 80            [12] 1393 	mov	a,#0x80
      0005F3 C0 E0            [24] 1394 	push	acc
      0005F5 12r00r00         [24] 1395 	lcall	_printf
      0005F8 E5 81            [12] 1396 	mov	a,sp
      0005FA 24 F8            [12] 1397 	add	a,#0xf8
      0005FC F5 81            [12] 1398 	mov	sp,a
      0005FE D0 04            [24] 1399 	pop	ar4
      000600 D0 05            [24] 1400 	pop	ar5
                                   1401 ;	main.c:160: buffnewcount++;
      000602 05*0A            [12] 1402 	inc	_main_sloc4_1_0
      000604 E4               [12] 1403 	clr	a
      000605 B5*0A 02         [24] 1404 	cjne	a,_main_sloc4_1_0,00312$
      000608 05*0B            [12] 1405 	inc	(_main_sloc4_1_0 + 1)
      00060A                       1406 00312$:
                                   1407 ;	main.c:236: main();
      00060A D0 05            [24] 1408 	pop	ar5
      00060C D0 04            [24] 1409 	pop	ar4
                                   1410 ;	main.c:160: buffnewcount++;
      00060E                       1411 00124$:
                                   1412 ;	main.c:163: if (takechar=='-')   // TO delete a buffer
      00060E 74 2D            [12] 1413 	mov	a,#0x2d
      000610 B5*0C 06         [24] 1414 	cjne	a,_main_sloc5_1_0,00313$
      000613 E4               [12] 1415 	clr	a
      000614 B5*0D 02         [24] 1416 	cjne	a,(_main_sloc5_1_0 + 1),00313$
      000617 80 03            [24] 1417 	sjmp	00314$
      000619                       1418 00313$:
      000619 02r06rFC         [24] 1419 	ljmp	00130$
      00061C                       1420 00314$:
                                   1421 ;	main.c:165: DEBUGPORT(0xCC);
      00061C C0 04            [24] 1422 	push	ar4
      00061E C0 05            [24] 1423 	push	ar5
      000620 75 82 CC         [24] 1424 	mov	dpl,#0xcc
      000623 C0 05            [24] 1425 	push	ar5
      000625 C0 04            [24] 1426 	push	ar4
      000627 12r00r00         [24] 1427 	lcall	_dataout
                                   1428 ;	main.c:166: printf("\n \r You need to enter a valid buffer number to clear it \n");
      00062A 74r8A            [12] 1429 	mov	a,#___str_21
      00062C C0 E0            [24] 1430 	push	acc
      00062E 74s03            [12] 1431 	mov	a,#(___str_21 >> 8)
      000630 C0 E0            [24] 1432 	push	acc
      000632 74 80            [12] 1433 	mov	a,#0x80
      000634 C0 E0            [24] 1434 	push	acc
      000636 12r00r00         [24] 1435 	lcall	_printf
      000639 15 81            [12] 1436 	dec	sp
      00063B 15 81            [12] 1437 	dec	sp
      00063D 15 81            [12] 1438 	dec	sp
                                   1439 ;	main.c:167: uint16_t buffno = takeinput();
      00063F 12r0Br38         [24] 1440 	lcall	_takeinput
      000642 85 82*08         [24] 1441 	mov	_main_sloc3_1_0,dpl
      000645 85 83*09         [24] 1442 	mov	(_main_sloc3_1_0 + 1),dph
      000648 D0 04            [24] 1443 	pop	ar4
      00064A D0 05            [24] 1444 	pop	ar5
                                   1445 ;	main.c:168: if ((buffno <= buffnewcount) && (buffno != 0))
      00064C AC*08            [24] 1446 	mov	r4,_main_sloc3_1_0
      00064E AD*09            [24] 1447 	mov	r5,(_main_sloc3_1_0 + 1)
      000650 C3               [12] 1448 	clr	c
      000651 E5*0A            [12] 1449 	mov	a,_main_sloc4_1_0
      000653 9C               [12] 1450 	subb	a,r4
      000654 E5*0B            [12] 1451 	mov	a,(_main_sloc4_1_0 + 1)
      000656 9D               [12] 1452 	subb	a,r5
      000657 D0 05            [24] 1453 	pop	ar5
      000659 D0 04            [24] 1454 	pop	ar4
      00065B 50 03            [24] 1455 	jnc	00315$
      00065D 02r06rDF         [24] 1456 	ljmp	00126$
      000660                       1457 00315$:
      000660 E5*08            [12] 1458 	mov	a,_main_sloc3_1_0
      000662 45*09            [12] 1459 	orl	a,(_main_sloc3_1_0 + 1)
      000664 60 79            [24] 1460 	jz	00126$
                                   1461 ;	main.c:170: free(buffer[buffno]);
      000666 C0 04            [24] 1462 	push	ar4
      000668 C0 05            [24] 1463 	push	ar5
      00066A 90r00r00         [24] 1464 	mov	dptr,#__mulint_PARM_2
      00066D E5*08            [12] 1465 	mov	a,_main_sloc3_1_0
      00066F F0               [24] 1466 	movx	@dptr,a
      000670 E5*09            [12] 1467 	mov	a,(_main_sloc3_1_0 + 1)
      000672 A3               [24] 1468 	inc	dptr
      000673 F0               [24] 1469 	movx	@dptr,a
      000674 90 00 03         [24] 1470 	mov	dptr,#0x0003
      000677 12r00r00         [24] 1471 	lcall	__mulint
      00067A AC 82            [24] 1472 	mov	r4,dpl
      00067C AD 83            [24] 1473 	mov	r5,dph
      00067E EC               [12] 1474 	mov	a,r4
      00067F 24rC3            [12] 1475 	add	a,#_main_buffer_131072_67
      000681 F5 82            [12] 1476 	mov	dpl,a
      000683 ED               [12] 1477 	mov	a,r5
      000684 34s12            [12] 1478 	addc	a,#(_main_buffer_131072_67 >> 8)
      000686 F5 83            [12] 1479 	mov	dph,a
      000688 E0               [24] 1480 	movx	a,@dptr
      000689 F9               [12] 1481 	mov	r1,a
      00068A A3               [24] 1482 	inc	dptr
      00068B E0               [24] 1483 	movx	a,@dptr
      00068C FC               [12] 1484 	mov	r4,a
      00068D A3               [24] 1485 	inc	dptr
      00068E E0               [24] 1486 	movx	a,@dptr
      00068F FD               [12] 1487 	mov	r5,a
      000690 89 82            [24] 1488 	mov	dpl,r1
      000692 8C 83            [24] 1489 	mov	dph,r4
      000694 8D F0            [24] 1490 	mov	b,r5
      000696 C0 05            [24] 1491 	push	ar5
      000698 C0 04            [24] 1492 	push	ar4
      00069A 12r00r00         [24] 1493 	lcall	_free
      00069D D0 04            [24] 1494 	pop	ar4
      00069F D0 05            [24] 1495 	pop	ar5
                                   1496 ;	main.c:171: startaddr[buffno]=0;
      0006A1 E5*08            [12] 1497 	mov	a,_main_sloc3_1_0
      0006A3 25*08            [12] 1498 	add	a,_main_sloc3_1_0
      0006A5 FC               [12] 1499 	mov	r4,a
      0006A6 E5*09            [12] 1500 	mov	a,(_main_sloc3_1_0 + 1)
      0006A8 33               [12] 1501 	rlc	a
      0006A9 FD               [12] 1502 	mov	r5,a
      0006AA EC               [12] 1503 	mov	a,r4
      0006AB 24r03            [12] 1504 	add	a,#_main_startaddr_131072_67
      0006AD F5 82            [12] 1505 	mov	dpl,a
      0006AF ED               [12] 1506 	mov	a,r5
      0006B0 34s13            [12] 1507 	addc	a,#(_main_startaddr_131072_67 >> 8)
      0006B2 F5 83            [12] 1508 	mov	dph,a
      0006B4 E4               [12] 1509 	clr	a
      0006B5 F0               [24] 1510 	movx	@dptr,a
      0006B6 A3               [24] 1511 	inc	dptr
      0006B7 F0               [24] 1512 	movx	@dptr,a
                                   1513 ;	main.c:172: printf("\n \r Buffer %d Cleared \n \r",buffno);
      0006B8 C0 05            [24] 1514 	push	ar5
      0006BA C0 04            [24] 1515 	push	ar4
      0006BC C0*08            [24] 1516 	push	_main_sloc3_1_0
      0006BE C0*09            [24] 1517 	push	(_main_sloc3_1_0 + 1)
      0006C0 74rC4            [12] 1518 	mov	a,#___str_22
      0006C2 C0 E0            [24] 1519 	push	acc
      0006C4 74s03            [12] 1520 	mov	a,#(___str_22 >> 8)
      0006C6 C0 E0            [24] 1521 	push	acc
      0006C8 74 80            [12] 1522 	mov	a,#0x80
      0006CA C0 E0            [24] 1523 	push	acc
      0006CC 12r00r00         [24] 1524 	lcall	_printf
      0006CF E5 81            [12] 1525 	mov	a,sp
      0006D1 24 FB            [12] 1526 	add	a,#0xfb
      0006D3 F5 81            [12] 1527 	mov	sp,a
      0006D5 D0 04            [24] 1528 	pop	ar4
      0006D7 D0 05            [24] 1529 	pop	ar5
      0006D9 D0 05            [24] 1530 	pop	ar5
      0006DB D0 04            [24] 1531 	pop	ar4
      0006DD 80 1D            [24] 1532 	sjmp	00130$
      0006DF                       1533 00126$:
                                   1534 ;	main.c:177: printf("\n \r You entered a wrong Buffer number \n \r");
      0006DF C0 05            [24] 1535 	push	ar5
      0006E1 C0 04            [24] 1536 	push	ar4
      0006E3 74rDE            [12] 1537 	mov	a,#___str_23
      0006E5 C0 E0            [24] 1538 	push	acc
      0006E7 74s03            [12] 1539 	mov	a,#(___str_23 >> 8)
      0006E9 C0 E0            [24] 1540 	push	acc
      0006EB 74 80            [12] 1541 	mov	a,#0x80
      0006ED C0 E0            [24] 1542 	push	acc
      0006EF 12r00r00         [24] 1543 	lcall	_printf
      0006F2 15 81            [12] 1544 	dec	sp
      0006F4 15 81            [12] 1545 	dec	sp
      0006F6 15 81            [12] 1546 	dec	sp
      0006F8 D0 04            [24] 1547 	pop	ar4
      0006FA D0 05            [24] 1548 	pop	ar5
      0006FC                       1549 00130$:
                                   1550 ;	main.c:180: if (takechar=='?')    // To give a detailed Heap report,Print Buffer 0 contents and clear Buffer 0
      0006FC 74 3F            [12] 1551 	mov	a,#0x3f
      0006FE B5*0C 06         [24] 1552 	cjne	a,_main_sloc5_1_0,00317$
      000701 E4               [12] 1553 	clr	a
      000702 B5*0D 02         [24] 1554 	cjne	a,(_main_sloc5_1_0 + 1),00317$
      000705 80 03            [24] 1555 	sjmp	00318$
      000707                       1556 00317$:
      000707 02r09r1B         [24] 1557 	ljmp	00138$
      00070A                       1558 00318$:
                                   1559 ;	main.c:182: DEBUGPORT(0xDD);
      00070A 75 82 DD         [24] 1560 	mov	dpl,#0xdd
      00070D C0 05            [24] 1561 	push	ar5
      00070F C0 04            [24] 1562 	push	ar4
      000711 12r00r00         [24] 1563 	lcall	_dataout
                                   1564 ;	main.c:185: printf("\n \r ########################## Heap Report ########################### \n");
      000714 74r08            [12] 1565 	mov	a,#___str_24
      000716 C0 E0            [24] 1566 	push	acc
      000718 74s04            [12] 1567 	mov	a,#(___str_24 >> 8)
      00071A C0 E0            [24] 1568 	push	acc
      00071C 74 80            [12] 1569 	mov	a,#0x80
      00071E C0 E0            [24] 1570 	push	acc
      000720 12r00r00         [24] 1571 	lcall	_printf
      000723 15 81            [12] 1572 	dec	sp
      000725 15 81            [12] 1573 	dec	sp
      000727 15 81            [12] 1574 	dec	sp
                                   1575 ;	main.c:186: printf("\n\rBuffer\tStarting Addr\tEsnding Addr\tSize\tStorageChar\t Free Space \n");
      000729 74r51            [12] 1576 	mov	a,#___str_25
      00072B C0 E0            [24] 1577 	push	acc
      00072D 74s04            [12] 1578 	mov	a,#(___str_25 >> 8)
      00072F C0 E0            [24] 1579 	push	acc
      000731 74 80            [12] 1580 	mov	a,#0x80
      000733 C0 E0            [24] 1581 	push	acc
      000735 12r00r00         [24] 1582 	lcall	_printf
      000738 15 81            [12] 1583 	dec	sp
      00073A 15 81            [12] 1584 	dec	sp
      00073C 15 81            [12] 1585 	dec	sp
      00073E D0 04            [24] 1586 	pop	ar4
      000740 D0 05            [24] 1587 	pop	ar5
                                   1588 ;	main.c:187: for (d=0; d< buffnewcount; d++)
      000742 A8*0A            [24] 1589 	mov	r0,_main_sloc4_1_0
      000744 A9*0B            [24] 1590 	mov	r1,(_main_sloc4_1_0 + 1)
      000746 E4               [12] 1591 	clr	a
      000747 F5*08            [12] 1592 	mov	_main_sloc3_1_0,a
      000749 F5*09            [12] 1593 	mov	(_main_sloc3_1_0 + 1),a
      00074B                       1594 00154$:
      00074B C0 04            [24] 1595 	push	ar4
      00074D C0 05            [24] 1596 	push	ar5
      00074F AC*08            [24] 1597 	mov	r4,_main_sloc3_1_0
      000751 AD*09            [24] 1598 	mov	r5,(_main_sloc3_1_0 + 1)
      000753 C3               [12] 1599 	clr	c
      000754 EC               [12] 1600 	mov	a,r4
      000755 98               [12] 1601 	subb	a,r0
      000756 ED               [12] 1602 	mov	a,r5
      000757 99               [12] 1603 	subb	a,r1
      000758 D0 05            [24] 1604 	pop	ar5
      00075A D0 04            [24] 1605 	pop	ar4
      00075C 40 03            [24] 1606 	jc	00319$
      00075E 02r08r1E         [24] 1607 	ljmp	00133$
      000761                       1608 00319$:
                                   1609 ;	main.c:189: if(startaddr[d] !=0)
      000761 E5*08            [12] 1610 	mov	a,_main_sloc3_1_0
      000763 25*08            [12] 1611 	add	a,_main_sloc3_1_0
      000765 F5*05            [12] 1612 	mov	_main_sloc2_1_0,a
      000767 E5*09            [12] 1613 	mov	a,(_main_sloc3_1_0 + 1)
      000769 33               [12] 1614 	rlc	a
      00076A F5*06            [12] 1615 	mov	(_main_sloc2_1_0 + 1),a
      00076C E5*05            [12] 1616 	mov	a,_main_sloc2_1_0
      00076E 24r03            [12] 1617 	add	a,#_main_startaddr_131072_67
      000770 F5 82            [12] 1618 	mov	dpl,a
      000772 E5*06            [12] 1619 	mov	a,(_main_sloc2_1_0 + 1)
      000774 34s13            [12] 1620 	addc	a,#(_main_startaddr_131072_67 >> 8)
      000776 F5 83            [12] 1621 	mov	dph,a
      000778 E0               [24] 1622 	movx	a,@dptr
      000779 F5*03            [12] 1623 	mov	_main_sloc1_1_0,a
      00077B A3               [24] 1624 	inc	dptr
      00077C E0               [24] 1625 	movx	a,@dptr
      00077D F5*04            [12] 1626 	mov	(_main_sloc1_1_0 + 1),a
      00077F E5*03            [12] 1627 	mov	a,_main_sloc1_1_0
      000781 45*04            [12] 1628 	orl	a,(_main_sloc1_1_0 + 1)
      000783 70 03            [24] 1629 	jnz	00320$
      000785 02r08r13         [24] 1630 	ljmp	00155$
      000788                       1631 00320$:
                                   1632 ;	main.c:191: printf("\n\r%d\t0X0%x\t\t0X0%x\t\t %d\t\t%d\t%d\n\r",d,startaddr[d],endaddr[d],buffersizes[d],storagecountall[d],freespacesbuff[d]);
      000788 C0 04            [24] 1633 	push	ar4
      00078A C0 05            [24] 1634 	push	ar5
      00078C E5*05            [12] 1635 	mov	a,_main_sloc2_1_0
      00078E 24rA5            [12] 1636 	add	a,#_main_freespacesbuff_131072_67
      000790 F5 82            [12] 1637 	mov	dpl,a
      000792 E5*06            [12] 1638 	mov	a,(_main_sloc2_1_0 + 1)
      000794 34s13            [12] 1639 	addc	a,#(_main_freespacesbuff_131072_67 >> 8)
      000796 F5 83            [12] 1640 	mov	dph,a
      000798 E0               [24] 1641 	movx	a,@dptr
      000799 FC               [12] 1642 	mov	r4,a
      00079A A3               [24] 1643 	inc	dptr
      00079B E0               [24] 1644 	movx	a,@dptr
      00079C FD               [12] 1645 	mov	r5,a
      00079D E5*05            [12] 1646 	mov	a,_main_sloc2_1_0
      00079F 24r7B            [12] 1647 	add	a,#_main_storagecountall_131072_67
      0007A1 F5 82            [12] 1648 	mov	dpl,a
      0007A3 E5*06            [12] 1649 	mov	a,(_main_sloc2_1_0 + 1)
      0007A5 34s13            [12] 1650 	addc	a,#(_main_storagecountall_131072_67 >> 8)
      0007A7 F5 83            [12] 1651 	mov	dph,a
      0007A9 E0               [24] 1652 	movx	a,@dptr
      0007AA FE               [12] 1653 	mov	r6,a
      0007AB A3               [24] 1654 	inc	dptr
      0007AC E0               [24] 1655 	movx	a,@dptr
      0007AD FF               [12] 1656 	mov	r7,a
      0007AE E5*05            [12] 1657 	mov	a,_main_sloc2_1_0
      0007B0 24r53            [12] 1658 	add	a,#_main_buffersizes_131072_67
      0007B2 F5 82            [12] 1659 	mov	dpl,a
      0007B4 E5*06            [12] 1660 	mov	a,(_main_sloc2_1_0 + 1)
      0007B6 34s13            [12] 1661 	addc	a,#(_main_buffersizes_131072_67 >> 8)
      0007B8 F5 83            [12] 1662 	mov	dph,a
      0007BA E0               [24] 1663 	movx	a,@dptr
      0007BB F5*00            [12] 1664 	mov	_main_sloc0_1_0,a
      0007BD A3               [24] 1665 	inc	dptr
      0007BE E0               [24] 1666 	movx	a,@dptr
      0007BF F5*01            [12] 1667 	mov	(_main_sloc0_1_0 + 1),a
      0007C1 E5*05            [12] 1668 	mov	a,_main_sloc2_1_0
      0007C3 24r2B            [12] 1669 	add	a,#_main_endaddr_131072_67
      0007C5 F5 82            [12] 1670 	mov	dpl,a
      0007C7 E5*06            [12] 1671 	mov	a,(_main_sloc2_1_0 + 1)
      0007C9 34s13            [12] 1672 	addc	a,#(_main_endaddr_131072_67 >> 8)
      0007CB F5 83            [12] 1673 	mov	dph,a
      0007CD E0               [24] 1674 	movx	a,@dptr
      0007CE FA               [12] 1675 	mov	r2,a
      0007CF A3               [24] 1676 	inc	dptr
      0007D0 E0               [24] 1677 	movx	a,@dptr
      0007D1 FB               [12] 1678 	mov	r3,a
      0007D2 C0 05            [24] 1679 	push	ar5
      0007D4 C0 04            [24] 1680 	push	ar4
      0007D6 C0 01            [24] 1681 	push	ar1
      0007D8 C0 00            [24] 1682 	push	ar0
      0007DA C0 04            [24] 1683 	push	ar4
      0007DC C0 05            [24] 1684 	push	ar5
      0007DE C0 06            [24] 1685 	push	ar6
      0007E0 C0 07            [24] 1686 	push	ar7
      0007E2 C0*00            [24] 1687 	push	_main_sloc0_1_0
      0007E4 C0*01            [24] 1688 	push	(_main_sloc0_1_0 + 1)
      0007E6 C0 02            [24] 1689 	push	ar2
      0007E8 C0 03            [24] 1690 	push	ar3
      0007EA C0*03            [24] 1691 	push	_main_sloc1_1_0
      0007EC C0*04            [24] 1692 	push	(_main_sloc1_1_0 + 1)
      0007EE C0*08            [24] 1693 	push	_main_sloc3_1_0
      0007F0 C0*09            [24] 1694 	push	(_main_sloc3_1_0 + 1)
      0007F2 74r94            [12] 1695 	mov	a,#___str_26
      0007F4 C0 E0            [24] 1696 	push	acc
      0007F6 74s04            [12] 1697 	mov	a,#(___str_26 >> 8)
      0007F8 C0 E0            [24] 1698 	push	acc
      0007FA 74 80            [12] 1699 	mov	a,#0x80
      0007FC C0 E0            [24] 1700 	push	acc
      0007FE 12r00r00         [24] 1701 	lcall	_printf
      000801 E5 81            [12] 1702 	mov	a,sp
      000803 24 F1            [12] 1703 	add	a,#0xf1
      000805 F5 81            [12] 1704 	mov	sp,a
      000807 D0 00            [24] 1705 	pop	ar0
      000809 D0 01            [24] 1706 	pop	ar1
      00080B D0 04            [24] 1707 	pop	ar4
      00080D D0 05            [24] 1708 	pop	ar5
                                   1709 ;	main.c:236: main();
      00080F D0 05            [24] 1710 	pop	ar5
      000811 D0 04            [24] 1711 	pop	ar4
                                   1712 ;	main.c:191: printf("\n\r%d\t0X0%x\t\t0X0%x\t\t %d\t\t%d\t%d\n\r",d,startaddr[d],endaddr[d],buffersizes[d],storagecountall[d],freespacesbuff[d]);
      000813                       1713 00155$:
                                   1714 ;	main.c:187: for (d=0; d< buffnewcount; d++)
      000813 05*08            [12] 1715 	inc	_main_sloc3_1_0
      000815 E4               [12] 1716 	clr	a
      000816 B5*08 02         [24] 1717 	cjne	a,_main_sloc3_1_0,00321$
      000819 05*09            [12] 1718 	inc	(_main_sloc3_1_0 + 1)
      00081B                       1719 00321$:
      00081B 02r07r4B         [24] 1720 	ljmp	00154$
      00081E                       1721 00133$:
                                   1722 ;	main.c:194: printf("\n \r Total no. of characters after ? sign --> %d \n \r",totalcharafterQ);
      00081E C0 05            [24] 1723 	push	ar5
      000820 C0 04            [24] 1724 	push	ar4
      000822 90r13rA3         [24] 1725 	mov	dptr,#_main_totalcharafterQ_131072_67
      000825 E0               [24] 1726 	movx	a,@dptr
      000826 C0 E0            [24] 1727 	push	acc
      000828 A3               [24] 1728 	inc	dptr
      000829 E0               [24] 1729 	movx	a,@dptr
      00082A C0 E0            [24] 1730 	push	acc
      00082C 74rB4            [12] 1731 	mov	a,#___str_27
      00082E C0 E0            [24] 1732 	push	acc
      000830 74s04            [12] 1733 	mov	a,#(___str_27 >> 8)
      000832 C0 E0            [24] 1734 	push	acc
      000834 74 80            [12] 1735 	mov	a,#0x80
      000836 C0 E0            [24] 1736 	push	acc
      000838 12r00r00         [24] 1737 	lcall	_printf
      00083B E5 81            [12] 1738 	mov	a,sp
      00083D 24 FB            [12] 1739 	add	a,#0xfb
      00083F F5 81            [12] 1740 	mov	sp,a
                                   1741 ;	main.c:195: totalcharafterQ=0;
      000841 90r13rA3         [24] 1742 	mov	dptr,#_main_totalcharafterQ_131072_67
      000844 E4               [12] 1743 	clr	a
      000845 F0               [24] 1744 	movx	@dptr,a
      000846 A3               [24] 1745 	inc	dptr
      000847 F0               [24] 1746 	movx	@dptr,a
                                   1747 ;	main.c:197: printf("\n \rData at Buffer 0: \t");
      000848 74rE8            [12] 1748 	mov	a,#___str_28
      00084A C0 E0            [24] 1749 	push	acc
      00084C 74s04            [12] 1750 	mov	a,#(___str_28 >> 8)
      00084E C0 E0            [24] 1751 	push	acc
      000850 74 80            [12] 1752 	mov	a,#0x80
      000852 C0 E0            [24] 1753 	push	acc
      000854 12r00r00         [24] 1754 	lcall	_printf
      000857 15 81            [12] 1755 	dec	sp
      000859 15 81            [12] 1756 	dec	sp
      00085B 15 81            [12] 1757 	dec	sp
      00085D D0 04            [24] 1758 	pop	ar4
      00085F D0 05            [24] 1759 	pop	ar5
                                   1760 ;	main.c:198: for(e=0; e< totalstoragecount; e++)
      000861 90r13r01         [24] 1761 	mov	dptr,#_main_totalstoragecount_131072_67
      000864 E0               [24] 1762 	movx	a,@dptr
      000865 FE               [12] 1763 	mov	r6,a
      000866 A3               [24] 1764 	inc	dptr
      000867 E0               [24] 1765 	movx	a,@dptr
      000868 FF               [12] 1766 	mov	r7,a
      000869 7A 00            [12] 1767 	mov	r2,#0x00
      00086B 7B 00            [12] 1768 	mov	r3,#0x00
      00086D                       1769 00157$:
      00086D 8A 00            [24] 1770 	mov	ar0,r2
      00086F 8B 01            [24] 1771 	mov	ar1,r3
      000871 C3               [12] 1772 	clr	c
      000872 E8               [12] 1773 	mov	a,r0
      000873 9E               [12] 1774 	subb	a,r6
      000874 E9               [12] 1775 	mov	a,r1
      000875 9F               [12] 1776 	subb	a,r7
      000876 40 03            [24] 1777 	jc	00322$
      000878 02r09r14         [24] 1778 	ljmp	00136$
      00087B                       1779 00322$:
                                   1780 ;	main.c:200: printf("%c  ",*(buffer[0]+e));
      00087B C0 04            [24] 1781 	push	ar4
      00087D C0 05            [24] 1782 	push	ar5
      00087F 90r12rC3         [24] 1783 	mov	dptr,#_main_buffer_131072_67
      000882 E0               [24] 1784 	movx	a,@dptr
      000883 F8               [12] 1785 	mov	r0,a
      000884 A3               [24] 1786 	inc	dptr
      000885 E0               [24] 1787 	movx	a,@dptr
      000886 F9               [12] 1788 	mov	r1,a
      000887 A3               [24] 1789 	inc	dptr
      000888 E0               [24] 1790 	movx	a,@dptr
      000889 FD               [12] 1791 	mov	r5,a
      00088A EA               [12] 1792 	mov	a,r2
      00088B 28               [12] 1793 	add	a,r0
      00088C F8               [12] 1794 	mov	r0,a
      00088D EB               [12] 1795 	mov	a,r3
      00088E 39               [12] 1796 	addc	a,r1
      00088F F9               [12] 1797 	mov	r1,a
      000890 88 82            [24] 1798 	mov	dpl,r0
      000892 89 83            [24] 1799 	mov	dph,r1
      000894 8D F0            [24] 1800 	mov	b,r5
      000896 12r00r00         [24] 1801 	lcall	__gptrget
      000899 F8               [12] 1802 	mov	r0,a
      00089A 7D 00            [12] 1803 	mov	r5,#0x00
      00089C C0 07            [24] 1804 	push	ar7
      00089E C0 06            [24] 1805 	push	ar6
      0008A0 C0 05            [24] 1806 	push	ar5
      0008A2 C0 04            [24] 1807 	push	ar4
      0008A4 C0 03            [24] 1808 	push	ar3
      0008A6 C0 02            [24] 1809 	push	ar2
      0008A8 C0 00            [24] 1810 	push	ar0
      0008AA C0 05            [24] 1811 	push	ar5
      0008AC 74rFF            [12] 1812 	mov	a,#___str_29
      0008AE C0 E0            [24] 1813 	push	acc
      0008B0 74s04            [12] 1814 	mov	a,#(___str_29 >> 8)
      0008B2 C0 E0            [24] 1815 	push	acc
      0008B4 74 80            [12] 1816 	mov	a,#0x80
      0008B6 C0 E0            [24] 1817 	push	acc
      0008B8 12r00r00         [24] 1818 	lcall	_printf
      0008BB E5 81            [12] 1819 	mov	a,sp
      0008BD 24 FB            [12] 1820 	add	a,#0xfb
      0008BF F5 81            [12] 1821 	mov	sp,a
      0008C1 D0 02            [24] 1822 	pop	ar2
      0008C3 D0 03            [24] 1823 	pop	ar3
      0008C5 D0 04            [24] 1824 	pop	ar4
      0008C7 D0 05            [24] 1825 	pop	ar5
      0008C9 D0 06            [24] 1826 	pop	ar6
      0008CB D0 07            [24] 1827 	pop	ar7
                                   1828 ;	main.c:201: if (e==64)
      0008CD BA 40 05         [24] 1829 	cjne	r2,#0x40,00323$
      0008D0 BB 00 02         [24] 1830 	cjne	r3,#0x00,00323$
      0008D3 80 06            [24] 1831 	sjmp	00324$
      0008D5                       1832 00323$:
      0008D5 D0 05            [24] 1833 	pop	ar5
      0008D7 D0 04            [24] 1834 	pop	ar4
      0008D9 80 31            [24] 1835 	sjmp	00158$
      0008DB                       1836 00324$:
      0008DB D0 05            [24] 1837 	pop	ar5
      0008DD D0 04            [24] 1838 	pop	ar4
                                   1839 ;	main.c:203: printf("\n");
      0008DF C0 07            [24] 1840 	push	ar7
      0008E1 C0 06            [24] 1841 	push	ar6
      0008E3 C0 05            [24] 1842 	push	ar5
      0008E5 C0 04            [24] 1843 	push	ar4
      0008E7 C0 03            [24] 1844 	push	ar3
      0008E9 C0 02            [24] 1845 	push	ar2
      0008EB 74r04            [12] 1846 	mov	a,#___str_30
      0008ED C0 E0            [24] 1847 	push	acc
      0008EF 74s05            [12] 1848 	mov	a,#(___str_30 >> 8)
      0008F1 C0 E0            [24] 1849 	push	acc
      0008F3 74 80            [12] 1850 	mov	a,#0x80
      0008F5 C0 E0            [24] 1851 	push	acc
      0008F7 12r00r00         [24] 1852 	lcall	_printf
      0008FA 15 81            [12] 1853 	dec	sp
      0008FC 15 81            [12] 1854 	dec	sp
      0008FE 15 81            [12] 1855 	dec	sp
      000900 D0 02            [24] 1856 	pop	ar2
      000902 D0 03            [24] 1857 	pop	ar3
      000904 D0 04            [24] 1858 	pop	ar4
      000906 D0 05            [24] 1859 	pop	ar5
      000908 D0 06            [24] 1860 	pop	ar6
      00090A D0 07            [24] 1861 	pop	ar7
      00090C                       1862 00158$:
                                   1863 ;	main.c:198: for(e=0; e< totalstoragecount; e++)
      00090C 0A               [12] 1864 	inc	r2
      00090D BA 00 01         [24] 1865 	cjne	r2,#0x00,00325$
      000910 0B               [12] 1866 	inc	r3
      000911                       1867 00325$:
      000911 02r08r6D         [24] 1868 	ljmp	00157$
      000914                       1869 00136$:
                                   1870 ;	main.c:206: totalstoragecount=0;
      000914 90r13r01         [24] 1871 	mov	dptr,#_main_totalstoragecount_131072_67
      000917 E4               [12] 1872 	clr	a
      000918 F0               [24] 1873 	movx	@dptr,a
      000919 A3               [24] 1874 	inc	dptr
      00091A F0               [24] 1875 	movx	@dptr,a
      00091B                       1876 00138$:
                                   1877 ;	main.c:209: if (takechar=='=')    //  Data printing of buffer 0
      00091B 74 3D            [12] 1878 	mov	a,#0x3d
      00091D B5*0C 06         [24] 1879 	cjne	a,_main_sloc5_1_0,00326$
      000920 E4               [12] 1880 	clr	a
      000921 B5*0D 02         [24] 1881 	cjne	a,(_main_sloc5_1_0 + 1),00326$
      000924 80 03            [24] 1882 	sjmp	00327$
      000926                       1883 00326$:
      000926 02r0Ar41         [24] 1884 	ljmp	00143$
      000929                       1885 00327$:
                                   1886 ;	main.c:211: DEBUGPORT(0xE5);
      000929 75 82 E5         [24] 1887 	mov	dpl,#0xe5
      00092C C0 05            [24] 1888 	push	ar5
      00092E C0 04            [24] 1889 	push	ar4
      000930 12r00r00         [24] 1890 	lcall	_dataout
                                   1891 ;	main.c:212: printf("\n \r ########## Data Inside Buffer 0 ##############");
      000933 74r06            [12] 1892 	mov	a,#___str_31
      000935 C0 E0            [24] 1893 	push	acc
      000937 74s05            [12] 1894 	mov	a,#(___str_31 >> 8)
      000939 C0 E0            [24] 1895 	push	acc
      00093B 74 80            [12] 1896 	mov	a,#0x80
      00093D C0 E0            [24] 1897 	push	acc
      00093F 12r00r00         [24] 1898 	lcall	_printf
      000942 15 81            [12] 1899 	dec	sp
      000944 15 81            [12] 1900 	dec	sp
      000946 15 81            [12] 1901 	dec	sp
      000948 D0 04            [24] 1902 	pop	ar4
      00094A D0 05            [24] 1903 	pop	ar5
                                   1904 ;	main.c:214: for(g=0; g< totalstoragecount; g++)
      00094C 90r13r01         [24] 1905 	mov	dptr,#_main_totalstoragecount_131072_67
      00094F E0               [24] 1906 	movx	a,@dptr
      000950 FE               [12] 1907 	mov	r6,a
      000951 A3               [24] 1908 	inc	dptr
      000952 E0               [24] 1909 	movx	a,@dptr
      000953 FF               [12] 1910 	mov	r7,a
      000954 7A 00            [12] 1911 	mov	r2,#0x00
      000956 7B 00            [12] 1912 	mov	r3,#0x00
      000958                       1913 00160$:
      000958 8A 00            [24] 1914 	mov	ar0,r2
      00095A 8B 01            [24] 1915 	mov	ar1,r3
      00095C C3               [12] 1916 	clr	c
      00095D E8               [12] 1917 	mov	a,r0
      00095E 9E               [12] 1918 	subb	a,r6
      00095F E9               [12] 1919 	mov	a,r1
      000960 9F               [12] 1920 	subb	a,r7
      000961 40 03            [24] 1921 	jc	00328$
      000963 02r0Ar41         [24] 1922 	ljmp	00143$
      000966                       1923 00328$:
                                   1924 ;	main.c:216: if(g%16==0)
      000966 90r00r00         [24] 1925 	mov	dptr,#__modsint_PARM_2
      000969 74 10            [12] 1926 	mov	a,#0x10
      00096B F0               [24] 1927 	movx	@dptr,a
      00096C E4               [12] 1928 	clr	a
      00096D A3               [24] 1929 	inc	dptr
      00096E F0               [24] 1930 	movx	@dptr,a
      00096F 8A 82            [24] 1931 	mov	dpl,r2
      000971 8B 83            [24] 1932 	mov	dph,r3
      000973 C0 07            [24] 1933 	push	ar7
      000975 C0 06            [24] 1934 	push	ar6
      000977 C0 05            [24] 1935 	push	ar5
      000979 C0 04            [24] 1936 	push	ar4
      00097B C0 03            [24] 1937 	push	ar3
      00097D C0 02            [24] 1938 	push	ar2
      00097F 12r00r00         [24] 1939 	lcall	__modsint
      000982 E5 82            [12] 1940 	mov	a,dpl
      000984 85 83 F0         [24] 1941 	mov	b,dph
      000987 D0 02            [24] 1942 	pop	ar2
      000989 D0 03            [24] 1943 	pop	ar3
      00098B D0 04            [24] 1944 	pop	ar4
      00098D D0 05            [24] 1945 	pop	ar5
      00098F D0 06            [24] 1946 	pop	ar6
      000991 D0 07            [24] 1947 	pop	ar7
      000993 45 F0            [12] 1948 	orl	a,b
      000995 70 4C            [24] 1949 	jnz	00140$
                                   1950 ;	main.c:218: printf("\n \r %p :",(buffer[0]+g));
      000997 C0 04            [24] 1951 	push	ar4
      000999 C0 05            [24] 1952 	push	ar5
      00099B 90r12rC3         [24] 1953 	mov	dptr,#_main_buffer_131072_67
      00099E E0               [24] 1954 	movx	a,@dptr
      00099F F8               [12] 1955 	mov	r0,a
      0009A0 A3               [24] 1956 	inc	dptr
      0009A1 E0               [24] 1957 	movx	a,@dptr
      0009A2 F9               [12] 1958 	mov	r1,a
      0009A3 A3               [24] 1959 	inc	dptr
      0009A4 E0               [24] 1960 	movx	a,@dptr
      0009A5 FD               [12] 1961 	mov	r5,a
      0009A6 EA               [12] 1962 	mov	a,r2
      0009A7 28               [12] 1963 	add	a,r0
      0009A8 F8               [12] 1964 	mov	r0,a
      0009A9 EB               [12] 1965 	mov	a,r3
      0009AA 39               [12] 1966 	addc	a,r1
      0009AB F9               [12] 1967 	mov	r1,a
      0009AC C0 07            [24] 1968 	push	ar7
      0009AE C0 06            [24] 1969 	push	ar6
      0009B0 C0 05            [24] 1970 	push	ar5
      0009B2 C0 04            [24] 1971 	push	ar4
      0009B4 C0 03            [24] 1972 	push	ar3
      0009B6 C0 02            [24] 1973 	push	ar2
      0009B8 C0 00            [24] 1974 	push	ar0
      0009BA C0 01            [24] 1975 	push	ar1
      0009BC C0 05            [24] 1976 	push	ar5
      0009BE 74r39            [12] 1977 	mov	a,#___str_32
      0009C0 C0 E0            [24] 1978 	push	acc
      0009C2 74s05            [12] 1979 	mov	a,#(___str_32 >> 8)
      0009C4 C0 E0            [24] 1980 	push	acc
      0009C6 74 80            [12] 1981 	mov	a,#0x80
      0009C8 C0 E0            [24] 1982 	push	acc
      0009CA 12r00r00         [24] 1983 	lcall	_printf
      0009CD E5 81            [12] 1984 	mov	a,sp
      0009CF 24 FA            [12] 1985 	add	a,#0xfa
      0009D1 F5 81            [12] 1986 	mov	sp,a
      0009D3 D0 02            [24] 1987 	pop	ar2
      0009D5 D0 03            [24] 1988 	pop	ar3
      0009D7 D0 04            [24] 1989 	pop	ar4
      0009D9 D0 05            [24] 1990 	pop	ar5
      0009DB D0 06            [24] 1991 	pop	ar6
      0009DD D0 07            [24] 1992 	pop	ar7
                                   1993 ;	main.c:236: main();
      0009DF D0 05            [24] 1994 	pop	ar5
      0009E1 D0 04            [24] 1995 	pop	ar4
                                   1996 ;	main.c:218: printf("\n \r %p :",(buffer[0]+g));
      0009E3                       1997 00140$:
                                   1998 ;	main.c:220: printf("%x ",*(buffer[0]+g));
      0009E3 C0 04            [24] 1999 	push	ar4
      0009E5 C0 05            [24] 2000 	push	ar5
      0009E7 90r12rC3         [24] 2001 	mov	dptr,#_main_buffer_131072_67
      0009EA E0               [24] 2002 	movx	a,@dptr
      0009EB F8               [12] 2003 	mov	r0,a
      0009EC A3               [24] 2004 	inc	dptr
      0009ED E0               [24] 2005 	movx	a,@dptr
      0009EE F9               [12] 2006 	mov	r1,a
      0009EF A3               [24] 2007 	inc	dptr
      0009F0 E0               [24] 2008 	movx	a,@dptr
      0009F1 FD               [12] 2009 	mov	r5,a
      0009F2 EA               [12] 2010 	mov	a,r2
      0009F3 28               [12] 2011 	add	a,r0
      0009F4 F8               [12] 2012 	mov	r0,a
      0009F5 EB               [12] 2013 	mov	a,r3
      0009F6 39               [12] 2014 	addc	a,r1
      0009F7 F9               [12] 2015 	mov	r1,a
      0009F8 88 82            [24] 2016 	mov	dpl,r0
      0009FA 89 83            [24] 2017 	mov	dph,r1
      0009FC 8D F0            [24] 2018 	mov	b,r5
      0009FE 12r00r00         [24] 2019 	lcall	__gptrget
      000A01 F8               [12] 2020 	mov	r0,a
      000A02 7D 00            [12] 2021 	mov	r5,#0x00
      000A04 C0 07            [24] 2022 	push	ar7
      000A06 C0 06            [24] 2023 	push	ar6
      000A08 C0 05            [24] 2024 	push	ar5
      000A0A C0 04            [24] 2025 	push	ar4
      000A0C C0 03            [24] 2026 	push	ar3
      000A0E C0 02            [24] 2027 	push	ar2
      000A10 C0 00            [24] 2028 	push	ar0
      000A12 C0 05            [24] 2029 	push	ar5
      000A14 74r42            [12] 2030 	mov	a,#___str_33
      000A16 C0 E0            [24] 2031 	push	acc
      000A18 74s05            [12] 2032 	mov	a,#(___str_33 >> 8)
      000A1A C0 E0            [24] 2033 	push	acc
      000A1C 74 80            [12] 2034 	mov	a,#0x80
      000A1E C0 E0            [24] 2035 	push	acc
      000A20 12r00r00         [24] 2036 	lcall	_printf
      000A23 E5 81            [12] 2037 	mov	a,sp
      000A25 24 FB            [12] 2038 	add	a,#0xfb
      000A27 F5 81            [12] 2039 	mov	sp,a
      000A29 D0 02            [24] 2040 	pop	ar2
      000A2B D0 03            [24] 2041 	pop	ar3
      000A2D D0 04            [24] 2042 	pop	ar4
      000A2F D0 05            [24] 2043 	pop	ar5
      000A31 D0 06            [24] 2044 	pop	ar6
      000A33 D0 07            [24] 2045 	pop	ar7
                                   2046 ;	main.c:214: for(g=0; g< totalstoragecount; g++)
      000A35 0A               [12] 2047 	inc	r2
      000A36 BA 00 01         [24] 2048 	cjne	r2,#0x00,00330$
      000A39 0B               [12] 2049 	inc	r3
      000A3A                       2050 00330$:
      000A3A D0 05            [24] 2051 	pop	ar5
      000A3C D0 04            [24] 2052 	pop	ar4
      000A3E 02r09r58         [24] 2053 	ljmp	00160$
      000A41                       2054 00143$:
                                   2055 ;	main.c:223: if (takechar=='@')     //to clear all the buffers
      000A41 74 40            [12] 2056 	mov	a,#0x40
      000A43 B5*0C 06         [24] 2057 	cjne	a,_main_sloc5_1_0,00331$
      000A46 E4               [12] 2058 	clr	a
      000A47 B5*0D 02         [24] 2059 	cjne	a,(_main_sloc5_1_0 + 1),00331$
      000A4A 80 03            [24] 2060 	sjmp	00332$
      000A4C                       2061 00331$:
      000A4C 02r02r80         [24] 2062 	ljmp	00148$
      000A4F                       2063 00332$:
                                   2064 ;	main.c:225: DEBUGPORT(0xAC);
      000A4F 75 82 AC         [24] 2065 	mov	dpl,#0xac
      000A52 C0 05            [24] 2066 	push	ar5
      000A54 C0 04            [24] 2067 	push	ar4
      000A56 12r00r00         [24] 2068 	lcall	_dataout
                                   2069 ;	main.c:229: printf("\n \r ########## All Buffers Cleared ##############");
      000A59 74r46            [12] 2070 	mov	a,#___str_34
      000A5B C0 E0            [24] 2071 	push	acc
      000A5D 74s05            [12] 2072 	mov	a,#(___str_34 >> 8)
      000A5F C0 E0            [24] 2073 	push	acc
      000A61 74 80            [12] 2074 	mov	a,#0x80
      000A63 C0 E0            [24] 2075 	push	acc
      000A65 12r00r00         [24] 2076 	lcall	_printf
      000A68 15 81            [12] 2077 	dec	sp
      000A6A 15 81            [12] 2078 	dec	sp
      000A6C 15 81            [12] 2079 	dec	sp
      000A6E D0 04            [24] 2080 	pop	ar4
      000A70 D0 05            [24] 2081 	pop	ar5
                                   2082 ;	main.c:230: for (k=0; k<buffnewcount; k++)
      000A72 AE*0A            [24] 2083 	mov	r6,_main_sloc4_1_0
      000A74 AF*0B            [24] 2084 	mov	r7,(_main_sloc4_1_0 + 1)
      000A76 7A 00            [12] 2085 	mov	r2,#0x00
      000A78 7B 00            [12] 2086 	mov	r3,#0x00
      000A7A                       2087 00163$:
      000A7A 8A 00            [24] 2088 	mov	ar0,r2
      000A7C 8B 01            [24] 2089 	mov	ar1,r3
      000A7E C3               [12] 2090 	clr	c
      000A7F E8               [12] 2091 	mov	a,r0
      000A80 9E               [12] 2092 	subb	a,r6
      000A81 E9               [12] 2093 	mov	a,r1
      000A82 9F               [12] 2094 	subb	a,r7
      000A83 40 03            [24] 2095 	jc	00333$
      000A85 02r0Br2A         [24] 2096 	ljmp	00144$
      000A88                       2097 00333$:
                                   2098 ;	main.c:232: free(buffer[k]);
      000A88 C0 04            [24] 2099 	push	ar4
      000A8A C0 05            [24] 2100 	push	ar5
      000A8C 90r00r00         [24] 2101 	mov	dptr,#__mulint_PARM_2
      000A8F EA               [12] 2102 	mov	a,r2
      000A90 F0               [24] 2103 	movx	@dptr,a
      000A91 EB               [12] 2104 	mov	a,r3
      000A92 A3               [24] 2105 	inc	dptr
      000A93 F0               [24] 2106 	movx	@dptr,a
      000A94 90 00 03         [24] 2107 	mov	dptr,#0x0003
      000A97 C0 07            [24] 2108 	push	ar7
      000A99 C0 06            [24] 2109 	push	ar6
      000A9B C0 05            [24] 2110 	push	ar5
      000A9D C0 04            [24] 2111 	push	ar4
      000A9F C0 03            [24] 2112 	push	ar3
      000AA1 C0 02            [24] 2113 	push	ar2
      000AA3 12r00r00         [24] 2114 	lcall	__mulint
      000AA6 A8 82            [24] 2115 	mov	r0,dpl
      000AA8 A9 83            [24] 2116 	mov	r1,dph
      000AAA D0 02            [24] 2117 	pop	ar2
      000AAC D0 03            [24] 2118 	pop	ar3
      000AAE D0 04            [24] 2119 	pop	ar4
      000AB0 D0 05            [24] 2120 	pop	ar5
      000AB2 E8               [12] 2121 	mov	a,r0
      000AB3 24rC3            [12] 2122 	add	a,#_main_buffer_131072_67
      000AB5 F5 82            [12] 2123 	mov	dpl,a
      000AB7 E9               [12] 2124 	mov	a,r1
      000AB8 34s12            [12] 2125 	addc	a,#(_main_buffer_131072_67 >> 8)
      000ABA F5 83            [12] 2126 	mov	dph,a
      000ABC E0               [24] 2127 	movx	a,@dptr
      000ABD F8               [12] 2128 	mov	r0,a
      000ABE A3               [24] 2129 	inc	dptr
      000ABF E0               [24] 2130 	movx	a,@dptr
      000AC0 F9               [12] 2131 	mov	r1,a
      000AC1 A3               [24] 2132 	inc	dptr
      000AC2 E0               [24] 2133 	movx	a,@dptr
      000AC3 FD               [12] 2134 	mov	r5,a
      000AC4 88 82            [24] 2135 	mov	dpl,r0
      000AC6 89 83            [24] 2136 	mov	dph,r1
      000AC8 8D F0            [24] 2137 	mov	b,r5
      000ACA C0 05            [24] 2138 	push	ar5
      000ACC C0 04            [24] 2139 	push	ar4
      000ACE C0 03            [24] 2140 	push	ar3
      000AD0 C0 02            [24] 2141 	push	ar2
      000AD2 12r00r00         [24] 2142 	lcall	_free
      000AD5 D0 02            [24] 2143 	pop	ar2
      000AD7 D0 03            [24] 2144 	pop	ar3
      000AD9 D0 04            [24] 2145 	pop	ar4
      000ADB D0 05            [24] 2146 	pop	ar5
                                   2147 ;	main.c:233: startaddr[k]=0;
      000ADD EA               [12] 2148 	mov	a,r2
      000ADE 2A               [12] 2149 	add	a,r2
      000ADF FC               [12] 2150 	mov	r4,a
      000AE0 EB               [12] 2151 	mov	a,r3
      000AE1 33               [12] 2152 	rlc	a
      000AE2 FD               [12] 2153 	mov	r5,a
      000AE3 EC               [12] 2154 	mov	a,r4
      000AE4 24r03            [12] 2155 	add	a,#_main_startaddr_131072_67
      000AE6 F5 82            [12] 2156 	mov	dpl,a
      000AE8 ED               [12] 2157 	mov	a,r5
      000AE9 34s13            [12] 2158 	addc	a,#(_main_startaddr_131072_67 >> 8)
      000AEB F5 83            [12] 2159 	mov	dph,a
      000AED E4               [12] 2160 	clr	a
      000AEE F0               [24] 2161 	movx	@dptr,a
      000AEF A3               [24] 2162 	inc	dptr
      000AF0 F0               [24] 2163 	movx	@dptr,a
                                   2164 ;	main.c:234: printf("\n \r Buffer %d Cleared \n",k);
      000AF1 C0 05            [24] 2165 	push	ar5
      000AF3 C0 04            [24] 2166 	push	ar4
      000AF5 C0 03            [24] 2167 	push	ar3
      000AF7 C0 02            [24] 2168 	push	ar2
      000AF9 C0 02            [24] 2169 	push	ar2
      000AFB C0 03            [24] 2170 	push	ar3
      000AFD 74r78            [12] 2171 	mov	a,#___str_35
      000AFF C0 E0            [24] 2172 	push	acc
      000B01 74s05            [12] 2173 	mov	a,#(___str_35 >> 8)
      000B03 C0 E0            [24] 2174 	push	acc
      000B05 74 80            [12] 2175 	mov	a,#0x80
      000B07 C0 E0            [24] 2176 	push	acc
      000B09 12r00r00         [24] 2177 	lcall	_printf
      000B0C E5 81            [12] 2178 	mov	a,sp
      000B0E 24 FB            [12] 2179 	add	a,#0xfb
      000B10 F5 81            [12] 2180 	mov	sp,a
      000B12 D0 02            [24] 2181 	pop	ar2
      000B14 D0 03            [24] 2182 	pop	ar3
      000B16 D0 04            [24] 2183 	pop	ar4
      000B18 D0 05            [24] 2184 	pop	ar5
      000B1A D0 06            [24] 2185 	pop	ar6
      000B1C D0 07            [24] 2186 	pop	ar7
                                   2187 ;	main.c:230: for (k=0; k<buffnewcount; k++)
      000B1E 0A               [12] 2188 	inc	r2
      000B1F BA 00 01         [24] 2189 	cjne	r2,#0x00,00334$
      000B22 0B               [12] 2190 	inc	r3
      000B23                       2191 00334$:
      000B23 D0 05            [24] 2192 	pop	ar5
      000B25 D0 04            [24] 2193 	pop	ar4
      000B27 02r0Ar7A         [24] 2194 	ljmp	00163$
      000B2A                       2195 00144$:
                                   2196 ;	main.c:236: main();
      000B2A C0 05            [24] 2197 	push	ar5
      000B2C C0 04            [24] 2198 	push	ar4
      000B2E 12r00r12         [24] 2199 	lcall	_main
      000B31 D0 04            [24] 2200 	pop	ar4
      000B33 D0 05            [24] 2201 	pop	ar5
                                   2202 ;	main.c:243: }
      000B35 02r02r80         [24] 2203 	ljmp	00148$
                                   2204 ;------------------------------------------------------------
                                   2205 ;Allocation info for local variables in function 'takeinput'
                                   2206 ;------------------------------------------------------------
                                   2207 ;no                        Allocated with name '_takeinput_no_65537_103'
                                   2208 ;number                    Allocated with name '_takeinput_number_65537_103'
                                   2209 ;i                         Allocated with name '_takeinput_i_65537_103'
                                   2210 ;------------------------------------------------------------
                                   2211 ;	main.c:247: int takeinput()  // to take input from a user
                                   2212 ;	-----------------------------------------
                                   2213 ;	 function takeinput
                                   2214 ;	-----------------------------------------
      000B38                       2215 _takeinput:
                                   2216 ;	main.c:249: printf_tiny("\n \r Enter a number in valid range as mentioned \n \r");
      000B38 74r90            [12] 2217 	mov	a,#___str_36
      000B3A C0 E0            [24] 2218 	push	acc
      000B3C 74s05            [12] 2219 	mov	a,#(___str_36 >> 8)
      000B3E C0 E0            [24] 2220 	push	acc
      000B40 12r00r00         [24] 2221 	lcall	_printf_tiny
      000B43 15 81            [12] 2222 	dec	sp
      000B45 15 81            [12] 2223 	dec	sp
                                   2224 ;	main.c:252: uint16_t number = 0;
      000B47 90r13rCD         [24] 2225 	mov	dptr,#_takeinput_number_65537_103
      000B4A E4               [12] 2226 	clr	a
      000B4B F0               [24] 2227 	movx	@dptr,a
      000B4C A3               [24] 2228 	inc	dptr
      000B4D F0               [24] 2229 	movx	@dptr,a
                                   2230 ;	main.c:254: do
      000B4E 7E 01            [12] 2231 	mov	r6,#0x01
      000B50 7F 00            [12] 2232 	mov	r7,#0x00
      000B52                       2233 00105$:
                                   2234 ;	main.c:256: no= getchar();
      000B52 C0 07            [24] 2235 	push	ar7
      000B54 C0 06            [24] 2236 	push	ar6
      000B56 12r0BrF9         [24] 2237 	lcall	_getchar
      000B59 AC 82            [24] 2238 	mov	r4,dpl
      000B5B AD 83            [24] 2239 	mov	r5,dph
      000B5D D0 06            [24] 2240 	pop	ar6
      000B5F D0 07            [24] 2241 	pop	ar7
                                   2242 ;	main.c:257: if (no>47 && no<58){
      000B61 8C 02            [24] 2243 	mov	ar2,r4
      000B63 8D 03            [24] 2244 	mov	ar3,r5
      000B65 C3               [12] 2245 	clr	c
      000B66 74 2F            [12] 2246 	mov	a,#0x2f
      000B68 9A               [12] 2247 	subb	a,r2
      000B69 E4               [12] 2248 	clr	a
      000B6A 9B               [12] 2249 	subb	a,r3
      000B6B 50 5E            [24] 2250 	jnc	00107$
      000B6D 8C 02            [24] 2251 	mov	ar2,r4
      000B6F 8D 03            [24] 2252 	mov	ar3,r5
      000B71 C3               [12] 2253 	clr	c
      000B72 EA               [12] 2254 	mov	a,r2
      000B73 94 3A            [12] 2255 	subb	a,#0x3a
      000B75 EB               [12] 2256 	mov	a,r3
      000B76 94 00            [12] 2257 	subb	a,#0x00
      000B78 50 51            [24] 2258 	jnc	00107$
                                   2259 ;	main.c:258: number = (number*10) + (no - '0');
      000B7A 90r13rCD         [24] 2260 	mov	dptr,#_takeinput_number_65537_103
      000B7D E0               [24] 2261 	movx	a,@dptr
      000B7E FA               [12] 2262 	mov	r2,a
      000B7F A3               [24] 2263 	inc	dptr
      000B80 E0               [24] 2264 	movx	a,@dptr
      000B81 FB               [12] 2265 	mov	r3,a
      000B82 90r00r00         [24] 2266 	mov	dptr,#__mulint_PARM_2
      000B85 EA               [12] 2267 	mov	a,r2
      000B86 F0               [24] 2268 	movx	@dptr,a
      000B87 EB               [12] 2269 	mov	a,r3
      000B88 A3               [24] 2270 	inc	dptr
      000B89 F0               [24] 2271 	movx	@dptr,a
      000B8A 90 00 0A         [24] 2272 	mov	dptr,#0x000a
      000B8D C0 07            [24] 2273 	push	ar7
      000B8F C0 06            [24] 2274 	push	ar6
      000B91 C0 05            [24] 2275 	push	ar5
      000B93 C0 04            [24] 2276 	push	ar4
      000B95 12r00r00         [24] 2277 	lcall	__mulint
      000B98 AA 82            [24] 2278 	mov	r2,dpl
      000B9A AB 83            [24] 2279 	mov	r3,dph
      000B9C D0 04            [24] 2280 	pop	ar4
      000B9E D0 05            [24] 2281 	pop	ar5
      000BA0 EC               [12] 2282 	mov	a,r4
      000BA1 24 D0            [12] 2283 	add	a,#0xd0
      000BA3 F8               [12] 2284 	mov	r0,a
      000BA4 ED               [12] 2285 	mov	a,r5
      000BA5 34 FF            [12] 2286 	addc	a,#0xff
      000BA7 F9               [12] 2287 	mov	r1,a
      000BA8 90r13rCD         [24] 2288 	mov	dptr,#_takeinput_number_65537_103
      000BAB E8               [12] 2289 	mov	a,r0
      000BAC 2A               [12] 2290 	add	a,r2
      000BAD F0               [24] 2291 	movx	@dptr,a
      000BAE E9               [12] 2292 	mov	a,r1
      000BAF 3B               [12] 2293 	addc	a,r3
      000BB0 A3               [24] 2294 	inc	dptr
      000BB1 F0               [24] 2295 	movx	@dptr,a
                                   2296 ;	main.c:263: putchar(no);
      000BB2 8C 82            [24] 2297 	mov	dpl,r4
      000BB4 8D 83            [24] 2298 	mov	dph,r5
      000BB6 12r0Cr07         [24] 2299 	lcall	_putchar
      000BB9 D0 06            [24] 2300 	pop	ar6
      000BBB D0 07            [24] 2301 	pop	ar7
                                   2302 ;	main.c:264: i++;
      000BBD 0E               [12] 2303 	inc	r6
      000BBE BE 00 01         [24] 2304 	cjne	r6,#0x00,00125$
      000BC1 0F               [12] 2305 	inc	r7
      000BC2                       2306 00125$:
                                   2307 ;	main.c:265: } while (i < 5);
      000BC2 C3               [12] 2308 	clr	c
      000BC3 EE               [12] 2309 	mov	a,r6
      000BC4 94 05            [12] 2310 	subb	a,#0x05
      000BC6 EF               [12] 2311 	mov	a,r7
      000BC7 94 00            [12] 2312 	subb	a,#0x00
      000BC9 40 87            [24] 2313 	jc	00105$
      000BCB                       2314 00107$:
                                   2315 ;	main.c:266: printf("\n Size Number = %d \n",number);
      000BCB 90r13rCD         [24] 2316 	mov	dptr,#_takeinput_number_65537_103
      000BCE E0               [24] 2317 	movx	a,@dptr
      000BCF FE               [12] 2318 	mov	r6,a
      000BD0 A3               [24] 2319 	inc	dptr
      000BD1 E0               [24] 2320 	movx	a,@dptr
      000BD2 FF               [12] 2321 	mov	r7,a
      000BD3 C0 07            [24] 2322 	push	ar7
      000BD5 C0 06            [24] 2323 	push	ar6
      000BD7 C0 06            [24] 2324 	push	ar6
      000BD9 C0 07            [24] 2325 	push	ar7
      000BDB 74rC3            [12] 2326 	mov	a,#___str_37
      000BDD C0 E0            [24] 2327 	push	acc
      000BDF 74s05            [12] 2328 	mov	a,#(___str_37 >> 8)
      000BE1 C0 E0            [24] 2329 	push	acc
      000BE3 74 80            [12] 2330 	mov	a,#0x80
      000BE5 C0 E0            [24] 2331 	push	acc
      000BE7 12r00r00         [24] 2332 	lcall	_printf
      000BEA E5 81            [12] 2333 	mov	a,sp
      000BEC 24 FB            [12] 2334 	add	a,#0xfb
      000BEE F5 81            [12] 2335 	mov	sp,a
      000BF0 D0 06            [24] 2336 	pop	ar6
      000BF2 D0 07            [24] 2337 	pop	ar7
                                   2338 ;	main.c:267: return number;
      000BF4 8E 82            [24] 2339 	mov	dpl,r6
      000BF6 8F 83            [24] 2340 	mov	dph,r7
                                   2341 ;	main.c:271: }
      000BF8 22               [24] 2342 	ret
                                   2343 ;------------------------------------------------------------
                                   2344 ;Allocation info for local variables in function 'getchar'
                                   2345 ;------------------------------------------------------------
                                   2346 ;x                         Allocated with name '_getchar_x_65536_107'
                                   2347 ;------------------------------------------------------------
                                   2348 ;	main.c:272: int getchar()
                                   2349 ;	-----------------------------------------
                                   2350 ;	 function getchar
                                   2351 ;	-----------------------------------------
      000BF9                       2352 _getchar:
                                   2353 ;	main.c:275: while(!RI)
      000BF9                       2354 00101$:
                                   2355 ;	main.c:279: RI =0;
                                   2356 ;	assignBit
      000BF9 10 98 02         [24] 2357 	jbc	_RI,00114$
      000BFC 80 FB            [24] 2358 	sjmp	00101$
      000BFE                       2359 00114$:
                                   2360 ;	main.c:280: x = SBUF;
      000BFE AE 99            [24] 2361 	mov	r6,_SBUF
      000C00 7F 00            [12] 2362 	mov	r7,#0x00
                                   2363 ;	main.c:281: return x;
      000C02 8E 82            [24] 2364 	mov	dpl,r6
      000C04 8F 83            [24] 2365 	mov	dph,r7
                                   2366 ;	main.c:282: }
      000C06 22               [24] 2367 	ret
                                   2368 ;------------------------------------------------------------
                                   2369 ;Allocation info for local variables in function 'putchar'
                                   2370 ;------------------------------------------------------------
                                   2371 ;b                         Allocated with name '_putchar_b_65536_109'
                                   2372 ;------------------------------------------------------------
                                   2373 ;	main.c:285: int putchar(int b)
                                   2374 ;	-----------------------------------------
                                   2375 ;	 function putchar
                                   2376 ;	-----------------------------------------
      000C07                       2377 _putchar:
      000C07 AF 83            [24] 2378 	mov	r7,dph
      000C09 E5 82            [12] 2379 	mov	a,dpl
      000C0B 90r13rCF         [24] 2380 	mov	dptr,#_putchar_b_65536_109
      000C0E F0               [24] 2381 	movx	@dptr,a
      000C0F EF               [12] 2382 	mov	a,r7
      000C10 A3               [24] 2383 	inc	dptr
      000C11 F0               [24] 2384 	movx	@dptr,a
                                   2385 ;	main.c:287: while(!TI){
      000C12                       2386 00101$:
                                   2387 ;	main.c:290: TI =0;
                                   2388 ;	assignBit
      000C12 10 99 02         [24] 2389 	jbc	_TI,00114$
      000C15 80 FB            [24] 2390 	sjmp	00101$
      000C17                       2391 00114$:
                                   2392 ;	main.c:291: SBUF = b;
      000C17 90r13rCF         [24] 2393 	mov	dptr,#_putchar_b_65536_109
      000C1A E0               [24] 2394 	movx	a,@dptr
      000C1B FE               [12] 2395 	mov	r6,a
      000C1C A3               [24] 2396 	inc	dptr
      000C1D E0               [24] 2397 	movx	a,@dptr
      000C1E 8E 99            [24] 2398 	mov	_SBUF,r6
                                   2399 ;	main.c:292: return 0;
      000C20 90 00 00         [24] 2400 	mov	dptr,#0x0000
                                   2401 ;	main.c:293: }
      000C23 22               [24] 2402 	ret
                                   2403 	.area CSEG    (CODE)
                                   2404 	.area CONST   (CODE)
      000000                       2405 ___sdcc_heap_size:
      000000 C0 12                 2406 	.byte #0xc0, #0x12	; 4800
                                   2407 	.area CONST   (CODE)
      000002                       2408 ___str_0:
      000002 23 23 23 20 45 6E 74  2409 	.ascii "### Enter a valid buffer size for buffer 0 and 1 ###"
             65 72 20 61 20 76 61
             6C 69 64 20 62 75 66
             66 65 72 20 73 69 7A
             65 20 66 6F 72 20 62
             75 66 66 65 72 20 30
             20 61 6E 64 20 31 20
             23 23 23
      000036 00                    2410 	.db 0x00
                                   2411 	.area CSEG    (CODE)
                                   2412 	.area CONST   (CODE)
      000037                       2413 ___str_1:
      000037 0A                    2414 	.db 0x0a
      000038 20                    2415 	.ascii " "
      000039 0D                    2416 	.db 0x0d
      00003A 4D 61 6C 6C 6F 63 20  2417 	.ascii "Malloc buffer0 failed"
             62 75 66 66 65 72 30
             20 66 61 69 6C 65 64
      00004F 0A                    2418 	.db 0x0a
      000050 0D                    2419 	.db 0x0d
      000051 00                    2420 	.db 0x00
                                   2421 	.area CSEG    (CODE)
                                   2422 	.area CONST   (CODE)
      000052                       2423 ___str_2:
      000052 0A                    2424 	.db 0x0a
      000053 20                    2425 	.ascii " "
      000054 0D                    2426 	.db 0x0d
      000055 4D 61 6C 6C 6F 63 20  2427 	.ascii "Malloc buffer0 passed"
             62 75 66 66 65 72 30
             20 70 61 73 73 65 64
      00006A 0A                    2428 	.db 0x0a
      00006B 0D                    2429 	.db 0x0d
      00006C 00                    2430 	.db 0x00
                                   2431 	.area CSEG    (CODE)
                                   2432 	.area CONST   (CODE)
      00006D                       2433 ___str_3:
      00006D 0A                    2434 	.db 0x0a
      00006E 20                    2435 	.ascii " "
      00006F 0D                    2436 	.db 0x0d
      000070 42 75 66 66 65 72 20  2437 	.ascii "Buffer 0 created at :0X0%x "
             30 20 63 72 65 61 74
             65 64 20 61 74 20 3A
             30 58 30 25 78 20
      00008B 0A                    2438 	.db 0x0a
      00008C 20                    2439 	.ascii " "
      00008D 0D                    2440 	.db 0x0d
      00008E 00                    2441 	.db 0x00
                                   2442 	.area CSEG    (CODE)
                                   2443 	.area CONST   (CODE)
      00008F                       2444 ___str_4:
      00008F 0A                    2445 	.db 0x0a
      000090 20                    2446 	.ascii " "
      000091 0D                    2447 	.db 0x0d
      000092 4D 61 6C 6C 6F 63 20  2448 	.ascii "Malloc buffer1 passed "
             62 75 66 66 65 72 31
             20 70 61 73 73 65 64
             20
      0000A8 0A                    2449 	.db 0x0a
      0000A9 20                    2450 	.ascii " "
      0000AA 0D                    2451 	.db 0x0d
      0000AB 00                    2452 	.db 0x00
                                   2453 	.area CSEG    (CODE)
                                   2454 	.area CONST   (CODE)
      0000AC                       2455 ___str_5:
      0000AC 0A                    2456 	.db 0x0a
      0000AD 20                    2457 	.ascii " "
      0000AE 0D                    2458 	.db 0x0d
      0000AF 42 75 66 66 65 72 20  2459 	.ascii "Buffer 1 created at : :0X0%x "
             31 20 63 72 65 61 74
             65 64 20 61 74 20 3A
             20 3A 30 58 30 25 78
             20
      0000CC 0A                    2460 	.db 0x0a
      0000CD 20                    2461 	.ascii " "
      0000CE 0D                    2462 	.db 0x0d
      0000CF 00                    2463 	.db 0x00
                                   2464 	.area CSEG    (CODE)
                                   2465 	.area CONST   (CODE)
      0000D0                       2466 ___str_6:
      0000D0 0A                    2467 	.db 0x0a
      0000D1 20                    2468 	.ascii " "
      0000D2 0D                    2469 	.db 0x0d
      0000D3 4D 61 6C 6C 6F 63 20  2470 	.ascii "Malloc buffer1 failed so reenter value"
             62 75 66 66 65 72 31
             20 66 61 69 6C 65 64
             20 73 6F 20 72 65 65
             6E 74 65 72 20 76 61
             6C 75 65
      0000F9 0A                    2471 	.db 0x0a
      0000FA 0D                    2472 	.db 0x0d
      0000FB 00                    2473 	.db 0x00
                                   2474 	.area CSEG    (CODE)
                                   2475 	.area CONST   (CODE)
      0000FC                       2476 ___str_7:
      0000FC 0A                    2477 	.db 0x0a
      0000FD 0D                    2478 	.db 0x0d
      0000FE 20 23 23 23 23 23 23  2479 	.ascii " ####### Select from the command options below ##########"
             23 20 53 65 6C 65 63
             74 20 66 72 6F 6D 20
             74 68 65 20 63 6F 6D
             6D 61 6E 64 20 6F 70
             74 69 6F 6E 73 20 62
             65 6C 6F 77 20 23 23
             23 23 23 23 23 23 23
             23
      000137 00                    2480 	.db 0x00
                                   2481 	.area CSEG    (CODE)
                                   2482 	.area CONST   (CODE)
      000138                       2483 ___str_8:
      000138 0A                    2484 	.db 0x0a
      000139 20                    2485 	.ascii " "
      00013A 0D                    2486 	.db 0x0d
      00013B 20 31 2E 20 27 2B 27  2487 	.ascii " 1. '+' Sign --> Add a New Buffer"
             20 53 69 67 6E 20 2D
             2D 3E 20 41 64 64 20
             61 20 4E 65 77 20 42
             75 66 66 65 72
      00015C 00                    2488 	.db 0x00
                                   2489 	.area CSEG    (CODE)
                                   2490 	.area CONST   (CODE)
      00015D                       2491 ___str_9:
      00015D 0A                    2492 	.db 0x0a
      00015E 20                    2493 	.ascii " "
      00015F 0D                    2494 	.db 0x0d
      000160 20 32 2E 20 27 2D 27  2495 	.ascii " 2. '-' Sign --> Clean a Buffer"
             20 53 69 67 6E 20 2D
             2D 3E 20 43 6C 65 61
             6E 20 61 20 42 75 66
             66 65 72
      00017F 00                    2496 	.db 0x00
                                   2497 	.area CSEG    (CODE)
                                   2498 	.area CONST   (CODE)
      000180                       2499 ___str_10:
      000180 0A                    2500 	.db 0x0a
      000181 20                    2501 	.ascii " "
      000182 0D                    2502 	.db 0x0d
      000183 20 33 2E 20 27 3F 27  2503 	.ascii " 3. '?' Sign --> Display a Detailed Heap Report"
             20 53 69 67 6E 20 2D
             2D 3E 20 44 69 73 70
             6C 61 79 20 61 20 44
             65 74 61 69 6C 65 64
             20 48 65 61 70 20 52
             65 70 6F 72 74
      0001B2 00                    2504 	.db 0x00
                                   2505 	.area CSEG    (CODE)
                                   2506 	.area CONST   (CODE)
      0001B3                       2507 ___str_11:
      0001B3 0A                    2508 	.db 0x0a
      0001B4 20                    2509 	.ascii " "
      0001B5 0D                    2510 	.db 0x0d
      0001B6 20 34 2E 20 27 40 27  2511 	.ascii " 4. '@' Sign --> Clear all Buffers Data and Start Again"
             20 53 69 67 6E 20 2D
             2D 3E 20 43 6C 65 61
             72 20 61 6C 6C 20 42
             75 66 66 65 72 73 20
             44 61 74 61 20 61 6E
             64 20 53 74 61 72 74
             20 41 67 61 69 6E
      0001ED 00                    2512 	.db 0x00
                                   2513 	.area CSEG    (CODE)
                                   2514 	.area CONST   (CODE)
      0001EE                       2515 ___str_12:
      0001EE 0A                    2516 	.db 0x0a
      0001EF 20                    2517 	.ascii " "
      0001F0 0D                    2518 	.db 0x0d
      0001F1 20 35 2E 20 27 61 27  2519 	.ascii " 5. 'a'-'z'  --> Store these Characters in Buffer 0"
             2D 27 7A 27 20 20 2D
             2D 3E 20 53 74 6F 72
             65 20 74 68 65 73 65
             20 43 68 61 72 61 63
             74 65 72 73 20 69 6E
             20 42 75 66 66 65 72
             20 30
      000224 00                    2520 	.db 0x00
                                   2521 	.area CSEG    (CODE)
                                   2522 	.area CONST   (CODE)
      000225                       2523 ___str_13:
      000225 23 23 23 23 23 23 23  2524 	.ascii "############################################################"
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23
      000261 23 23                 2525 	.ascii "##"
      000263 00                    2526 	.db 0x00
                                   2527 	.area CSEG    (CODE)
                                   2528 	.area CONST   (CODE)
      000264                       2529 ___str_14:
      000264 0A                    2530 	.db 0x0a
      000265 20                    2531 	.ascii " "
      000266 0D                    2532 	.db 0x0d
      000267 45 6E 74 65 72 20 63  2533 	.ascii "Enter character "
             68 61 72 61 63 74 65
             72 20
      000277 0A                    2534 	.db 0x0a
      000278 20                    2535 	.ascii " "
      000279 0D                    2536 	.db 0x0d
      00027A 00                    2537 	.db 0x00
                                   2538 	.area CSEG    (CODE)
                                   2539 	.area CONST   (CODE)
      00027B                       2540 ___str_15:
      00027B 0A                    2541 	.db 0x0a
      00027C 20                    2542 	.ascii " "
      00027D 0D                    2543 	.db 0x0d
      00027E 54 6F 74 61 6C 20 6E  2544 	.ascii "Total number of characters =%d "
             75 6D 62 65 72 20 6F
             66 20 63 68 61 72 61
             63 74 65 72 73 20 3D
             25 64 20
      00029D 0A                    2545 	.db 0x0a
      00029E 20                    2546 	.ascii " "
      00029F 0D                    2547 	.db 0x0d
      0002A0 00                    2548 	.db 0x00
                                   2549 	.area CSEG    (CODE)
                                   2550 	.area CONST   (CODE)
      0002A1                       2551 ___str_16:
      0002A1 20 2D 2D 3E 20 54 68  2552 	.ascii " --> This character is stored at %p "
             69 73 20 63 68 61 72
             61 63 74 65 72 20 69
             73 20 73 74 6F 72 65
             64 20 61 74 20 25 70
             20
      0002C5 0A                    2553 	.db 0x0a
      0002C6 00                    2554 	.db 0x00
                                   2555 	.area CSEG    (CODE)
                                   2556 	.area CONST   (CODE)
      0002C7                       2557 ___str_17:
      0002C7 0A                    2558 	.db 0x0a
      0002C8 20                    2559 	.ascii " "
      0002C9 0D                    2560 	.db 0x0d
      0002CA 20 54 6F 74 61 6C 20  2561 	.ascii " Total number of storage characters =%d "
             6E 75 6D 62 65 72 20
             6F 66 20 73 74 6F 72
             61 67 65 20 63 68 61
             72 61 63 74 65 72 73
             20 3D 25 64 20
      0002F2 0A                    2562 	.db 0x0a
      0002F3 00                    2563 	.db 0x00
                                   2564 	.area CSEG    (CODE)
                                   2565 	.area CONST   (CODE)
      0002F4                       2566 ___str_18:
      0002F4 0A                    2567 	.db 0x0a
      0002F5 20                    2568 	.ascii " "
      0002F6 0D                    2569 	.db 0x0d
      0002F7 20 59 6F 75 20 6E 65  2570 	.ascii " You need to enter a number between 30 to 300 bytes to creat"
             65 64 20 74 6F 20 65
             6E 74 65 72 20 61 20
             6E 75 6D 62 65 72 20
             62 65 74 77 65 65 6E
             20 33 30 20 74 6F 20
             33 30 30 20 62 79 74
             65 73 20 74 6F 20 63
             72 65 61 74
      000333 65 20 61 20 6E 65 77  2571 	.ascii "e a new buffer "
             20 62 75 66 66 65 72
             20
      000342 0A                    2572 	.db 0x0a
      000343 00                    2573 	.db 0x00
                                   2574 	.area CSEG    (CODE)
                                   2575 	.area CONST   (CODE)
      000344                       2576 ___str_19:
      000344 0A                    2577 	.db 0x0a
      000345 20                    2578 	.ascii " "
      000346 0D                    2579 	.db 0x0d
      000347 20 4E 65 77 20 4D 61  2580 	.ascii " New Malloc buffer %d passed"
             6C 6C 6F 63 20 62 75
             66 66 65 72 20 25 64
             20 70 61 73 73 65 64
      000363 0A                    2581 	.db 0x0a
      000364 0D                    2582 	.db 0x0d
      000365 00                    2583 	.db 0x00
                                   2584 	.area CSEG    (CODE)
                                   2585 	.area CONST   (CODE)
      000366                       2586 ___str_20:
      000366 0A                    2587 	.db 0x0a
      000367 20                    2588 	.ascii " "
      000368 0D                    2589 	.db 0x0d
      000369 20 41 64 64 72 65 73  2590 	.ascii " Address of buffer no %d: %p "
             73 20 6F 66 20 62 75
             66 66 65 72 20 6E 6F
             20 25 64 3A 20 25 70
             20
      000386 0A                    2591 	.db 0x0a
      000387 20                    2592 	.ascii " "
      000388 0D                    2593 	.db 0x0d
      000389 00                    2594 	.db 0x00
                                   2595 	.area CSEG    (CODE)
                                   2596 	.area CONST   (CODE)
      00038A                       2597 ___str_21:
      00038A 0A                    2598 	.db 0x0a
      00038B 20                    2599 	.ascii " "
      00038C 0D                    2600 	.db 0x0d
      00038D 20 59 6F 75 20 6E 65  2601 	.ascii " You need to enter a valid buffer number to clear it "
             65 64 20 74 6F 20 65
             6E 74 65 72 20 61 20
             76 61 6C 69 64 20 62
             75 66 66 65 72 20 6E
             75 6D 62 65 72 20 74
             6F 20 63 6C 65 61 72
             20 69 74 20
      0003C2 0A                    2602 	.db 0x0a
      0003C3 00                    2603 	.db 0x00
                                   2604 	.area CSEG    (CODE)
                                   2605 	.area CONST   (CODE)
      0003C4                       2606 ___str_22:
      0003C4 0A                    2607 	.db 0x0a
      0003C5 20                    2608 	.ascii " "
      0003C6 0D                    2609 	.db 0x0d
      0003C7 20 42 75 66 66 65 72  2610 	.ascii " Buffer %d Cleared "
             20 25 64 20 43 6C 65
             61 72 65 64 20
      0003DA 0A                    2611 	.db 0x0a
      0003DB 20                    2612 	.ascii " "
      0003DC 0D                    2613 	.db 0x0d
      0003DD 00                    2614 	.db 0x00
                                   2615 	.area CSEG    (CODE)
                                   2616 	.area CONST   (CODE)
      0003DE                       2617 ___str_23:
      0003DE 0A                    2618 	.db 0x0a
      0003DF 20                    2619 	.ascii " "
      0003E0 0D                    2620 	.db 0x0d
      0003E1 20 59 6F 75 20 65 6E  2621 	.ascii " You entered a wrong Buffer number "
             74 65 72 65 64 20 61
             20 77 72 6F 6E 67 20
             42 75 66 66 65 72 20
             6E 75 6D 62 65 72 20
      000404 0A                    2622 	.db 0x0a
      000405 20                    2623 	.ascii " "
      000406 0D                    2624 	.db 0x0d
      000407 00                    2625 	.db 0x00
                                   2626 	.area CSEG    (CODE)
                                   2627 	.area CONST   (CODE)
      000408                       2628 ___str_24:
      000408 0A                    2629 	.db 0x0a
      000409 20                    2630 	.ascii " "
      00040A 0D                    2631 	.db 0x0d
      00040B 20 23 23 23 23 23 23  2632 	.ascii " ########################## Heap Report ####################"
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 20
             48 65 61 70 20 52 65
             70 6F 72 74 20 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23
      000447 23 23 23 23 23 23 23  2633 	.ascii "####### "
             20
      00044F 0A                    2634 	.db 0x0a
      000450 00                    2635 	.db 0x00
                                   2636 	.area CSEG    (CODE)
                                   2637 	.area CONST   (CODE)
      000451                       2638 ___str_25:
      000451 0A                    2639 	.db 0x0a
      000452 0D                    2640 	.db 0x0d
      000453 42 75 66 66 65 72     2641 	.ascii "Buffer"
      000459 09                    2642 	.db 0x09
      00045A 53 74 61 72 74 69 6E  2643 	.ascii "Starting Addr"
             67 20 41 64 64 72
      000467 09                    2644 	.db 0x09
      000468 45 73 6E 64 69 6E 67  2645 	.ascii "Esnding Addr"
             20 41 64 64 72
      000474 09                    2646 	.db 0x09
      000475 53 69 7A 65           2647 	.ascii "Size"
      000479 09                    2648 	.db 0x09
      00047A 53 74 6F 72 61 67 65  2649 	.ascii "StorageChar"
             43 68 61 72
      000485 09                    2650 	.db 0x09
      000486 20 46 72 65 65 20 53  2651 	.ascii " Free Space "
             70 61 63 65 20
      000492 0A                    2652 	.db 0x0a
      000493 00                    2653 	.db 0x00
                                   2654 	.area CSEG    (CODE)
                                   2655 	.area CONST   (CODE)
      000494                       2656 ___str_26:
      000494 0A                    2657 	.db 0x0a
      000495 0D                    2658 	.db 0x0d
      000496 25 64                 2659 	.ascii "%d"
      000498 09                    2660 	.db 0x09
      000499 30 58 30 25 78        2661 	.ascii "0X0%x"
      00049E 09                    2662 	.db 0x09
      00049F 09                    2663 	.db 0x09
      0004A0 30 58 30 25 78        2664 	.ascii "0X0%x"
      0004A5 09                    2665 	.db 0x09
      0004A6 09                    2666 	.db 0x09
      0004A7 20 25 64              2667 	.ascii " %d"
      0004AA 09                    2668 	.db 0x09
      0004AB 09                    2669 	.db 0x09
      0004AC 25 64                 2670 	.ascii "%d"
      0004AE 09                    2671 	.db 0x09
      0004AF 25 64                 2672 	.ascii "%d"
      0004B1 0A                    2673 	.db 0x0a
      0004B2 0D                    2674 	.db 0x0d
      0004B3 00                    2675 	.db 0x00
                                   2676 	.area CSEG    (CODE)
                                   2677 	.area CONST   (CODE)
      0004B4                       2678 ___str_27:
      0004B4 0A                    2679 	.db 0x0a
      0004B5 20                    2680 	.ascii " "
      0004B6 0D                    2681 	.db 0x0d
      0004B7 20 54 6F 74 61 6C 20  2682 	.ascii " Total no. of characters after ? sign --> %d "
             6E 6F 2E 20 6F 66 20
             63 68 61 72 61 63 74
             65 72 73 20 61 66 74
             65 72 20 3F 20 73 69
             67 6E 20 2D 2D 3E 20
             25 64 20
      0004E4 0A                    2683 	.db 0x0a
      0004E5 20                    2684 	.ascii " "
      0004E6 0D                    2685 	.db 0x0d
      0004E7 00                    2686 	.db 0x00
                                   2687 	.area CSEG    (CODE)
                                   2688 	.area CONST   (CODE)
      0004E8                       2689 ___str_28:
      0004E8 0A                    2690 	.db 0x0a
      0004E9 20                    2691 	.ascii " "
      0004EA 0D                    2692 	.db 0x0d
      0004EB 44 61 74 61 20 61 74  2693 	.ascii "Data at Buffer 0: "
             20 42 75 66 66 65 72
             20 30 3A 20
      0004FD 09                    2694 	.db 0x09
      0004FE 00                    2695 	.db 0x00
                                   2696 	.area CSEG    (CODE)
                                   2697 	.area CONST   (CODE)
      0004FF                       2698 ___str_29:
      0004FF 25 63 20 20           2699 	.ascii "%c  "
      000503 00                    2700 	.db 0x00
                                   2701 	.area CSEG    (CODE)
                                   2702 	.area CONST   (CODE)
      000504                       2703 ___str_30:
      000504 0A                    2704 	.db 0x0a
      000505 00                    2705 	.db 0x00
                                   2706 	.area CSEG    (CODE)
                                   2707 	.area CONST   (CODE)
      000506                       2708 ___str_31:
      000506 0A                    2709 	.db 0x0a
      000507 20                    2710 	.ascii " "
      000508 0D                    2711 	.db 0x0d
      000509 20 23 23 23 23 23 23  2712 	.ascii " ########## Data Inside Buffer 0 ##############"
             23 23 23 23 20 44 61
             74 61 20 49 6E 73 69
             64 65 20 42 75 66 66
             65 72 20 30 20 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23
      000538 00                    2713 	.db 0x00
                                   2714 	.area CSEG    (CODE)
                                   2715 	.area CONST   (CODE)
      000539                       2716 ___str_32:
      000539 0A                    2717 	.db 0x0a
      00053A 20                    2718 	.ascii " "
      00053B 0D                    2719 	.db 0x0d
      00053C 20 25 70 20 3A        2720 	.ascii " %p :"
      000541 00                    2721 	.db 0x00
                                   2722 	.area CSEG    (CODE)
                                   2723 	.area CONST   (CODE)
      000542                       2724 ___str_33:
      000542 25 78 20              2725 	.ascii "%x "
      000545 00                    2726 	.db 0x00
                                   2727 	.area CSEG    (CODE)
                                   2728 	.area CONST   (CODE)
      000546                       2729 ___str_34:
      000546 0A                    2730 	.db 0x0a
      000547 20                    2731 	.ascii " "
      000548 0D                    2732 	.db 0x0d
      000549 20 23 23 23 23 23 23  2733 	.ascii " ########## All Buffers Cleared ##############"
             23 23 23 23 20 41 6C
             6C 20 42 75 66 66 65
             72 73 20 43 6C 65 61
             72 65 64 20 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23
      000577 00                    2734 	.db 0x00
                                   2735 	.area CSEG    (CODE)
                                   2736 	.area CONST   (CODE)
      000578                       2737 ___str_35:
      000578 0A                    2738 	.db 0x0a
      000579 20                    2739 	.ascii " "
      00057A 0D                    2740 	.db 0x0d
      00057B 20 42 75 66 66 65 72  2741 	.ascii " Buffer %d Cleared "
             20 25 64 20 43 6C 65
             61 72 65 64 20
      00058E 0A                    2742 	.db 0x0a
      00058F 00                    2743 	.db 0x00
                                   2744 	.area CSEG    (CODE)
                                   2745 	.area CONST   (CODE)
      000590                       2746 ___str_36:
      000590 0A                    2747 	.db 0x0a
      000591 20                    2748 	.ascii " "
      000592 0D                    2749 	.db 0x0d
      000593 20 45 6E 74 65 72 20  2750 	.ascii " Enter a number in valid range as mentioned "
             61 20 6E 75 6D 62 65
             72 20 69 6E 20 76 61
             6C 69 64 20 72 61 6E
             67 65 20 61 73 20 6D
             65 6E 74 69 6F 6E 65
             64 20
      0005BF 0A                    2751 	.db 0x0a
      0005C0 20                    2752 	.ascii " "
      0005C1 0D                    2753 	.db 0x0d
      0005C2 00                    2754 	.db 0x00
                                   2755 	.area CSEG    (CODE)
                                   2756 	.area CONST   (CODE)
      0005C3                       2757 ___str_37:
      0005C3 0A                    2758 	.db 0x0a
      0005C4 20 53 69 7A 65 20 4E  2759 	.ascii " Size Number = %d "
             75 6D 62 65 72 20 3D
             20 25 64 20
      0005D6 0A                    2760 	.db 0x0a
      0005D7 00                    2761 	.db 0x00
                                   2762 	.area CSEG    (CODE)
                                   2763 	.area XINIT   (CODE)
      000000                       2764 __xinit__ptr:
      000000 00 00                 2765 	.byte #0x00,#0x00
                                   2766 	.area CABS    (ABS,CODE)
