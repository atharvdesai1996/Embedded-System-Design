                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module menu
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _getchar
                                     12 	.globl _putchar
                                     13 	.globl _printf_tiny
                                     14 	.globl _printf
                                     15 	.globl _I2CRead
                                     16 	.globl _DataSendI2C
                                     17 	.globl _SendNACK
                                     18 	.globl _RestartI2C
                                     19 	.globl _StopI2C
                                     20 	.globl _StartI2C
                                     21 	.globl _TF1
                                     22 	.globl _TR1
                                     23 	.globl _TF0
                                     24 	.globl _TR0
                                     25 	.globl _IE1
                                     26 	.globl _IT1
                                     27 	.globl _IE0
                                     28 	.globl _IT0
                                     29 	.globl _SM0
                                     30 	.globl _SM1
                                     31 	.globl _SM2
                                     32 	.globl _REN
                                     33 	.globl _TB8
                                     34 	.globl _RB8
                                     35 	.globl _TI
                                     36 	.globl _RI
                                     37 	.globl _CY
                                     38 	.globl _AC
                                     39 	.globl _F0
                                     40 	.globl _RS1
                                     41 	.globl _RS0
                                     42 	.globl _OV
                                     43 	.globl _F1
                                     44 	.globl _P
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD0
                                     52 	.globl _TXD
                                     53 	.globl _RXD0
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _P2_7
                                     64 	.globl _P2_6
                                     65 	.globl _P2_5
                                     66 	.globl _P2_4
                                     67 	.globl _P2_3
                                     68 	.globl _P2_2
                                     69 	.globl _P2_1
                                     70 	.globl _P2_0
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _PS
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _EA
                                     93 	.globl _ES
                                     94 	.globl _ET1
                                     95 	.globl _EX1
                                     96 	.globl _ET0
                                     97 	.globl _EX0
                                     98 	.globl _BREG_F7
                                     99 	.globl _BREG_F6
                                    100 	.globl _BREG_F5
                                    101 	.globl _BREG_F4
                                    102 	.globl _BREG_F3
                                    103 	.globl _BREG_F2
                                    104 	.globl _BREG_F1
                                    105 	.globl _BREG_F0
                                    106 	.globl _P5_7
                                    107 	.globl _P5_6
                                    108 	.globl _P5_5
                                    109 	.globl _P5_4
                                    110 	.globl _P5_3
                                    111 	.globl _P5_2
                                    112 	.globl _P5_1
                                    113 	.globl _P5_0
                                    114 	.globl _P4_7
                                    115 	.globl _P4_6
                                    116 	.globl _P4_5
                                    117 	.globl _P4_4
                                    118 	.globl _P4_3
                                    119 	.globl _P4_2
                                    120 	.globl _P4_1
                                    121 	.globl _P4_0
                                    122 	.globl _PX0L
                                    123 	.globl _PT0L
                                    124 	.globl _PX1L
                                    125 	.globl _PT1L
                                    126 	.globl _PSL
                                    127 	.globl _PT2L
                                    128 	.globl _PPCL
                                    129 	.globl _EC
                                    130 	.globl _CCF0
                                    131 	.globl _CCF1
                                    132 	.globl _CCF2
                                    133 	.globl _CCF3
                                    134 	.globl _CCF4
                                    135 	.globl _CR
                                    136 	.globl _CF
                                    137 	.globl _TF2
                                    138 	.globl _EXF2
                                    139 	.globl _RCLK
                                    140 	.globl _TCLK
                                    141 	.globl _EXEN2
                                    142 	.globl _TR2
                                    143 	.globl _C_T2
                                    144 	.globl _CP_RL2
                                    145 	.globl _T2CON_7
                                    146 	.globl _T2CON_6
                                    147 	.globl _T2CON_5
                                    148 	.globl _T2CON_4
                                    149 	.globl _T2CON_3
                                    150 	.globl _T2CON_2
                                    151 	.globl _T2CON_1
                                    152 	.globl _T2CON_0
                                    153 	.globl _PT2
                                    154 	.globl _ET2
                                    155 	.globl _TMOD
                                    156 	.globl _TL1
                                    157 	.globl _TL0
                                    158 	.globl _TH1
                                    159 	.globl _TH0
                                    160 	.globl _TCON
                                    161 	.globl _SP
                                    162 	.globl _SCON
                                    163 	.globl _SBUF0
                                    164 	.globl _SBUF
                                    165 	.globl _PSW
                                    166 	.globl _PCON
                                    167 	.globl _P3
                                    168 	.globl _P2
                                    169 	.globl _P1
                                    170 	.globl _P0
                                    171 	.globl _IP
                                    172 	.globl _IE
                                    173 	.globl _DP0L
                                    174 	.globl _DPL
                                    175 	.globl _DP0H
                                    176 	.globl _DPH
                                    177 	.globl _B
                                    178 	.globl _ACC
                                    179 	.globl _EECON
                                    180 	.globl _KBF
                                    181 	.globl _KBE
                                    182 	.globl _KBLS
                                    183 	.globl _BRL
                                    184 	.globl _BDRCON
                                    185 	.globl _T2MOD
                                    186 	.globl _SPDAT
                                    187 	.globl _SPSTA
                                    188 	.globl _SPCON
                                    189 	.globl _SADEN
                                    190 	.globl _SADDR
                                    191 	.globl _WDTPRG
                                    192 	.globl _WDTRST
                                    193 	.globl _P5
                                    194 	.globl _P4
                                    195 	.globl _IPH1
                                    196 	.globl _IPL1
                                    197 	.globl _IPH0
                                    198 	.globl _IPL0
                                    199 	.globl _IEN1
                                    200 	.globl _IEN0
                                    201 	.globl _CMOD
                                    202 	.globl _CL
                                    203 	.globl _CH
                                    204 	.globl _CCON
                                    205 	.globl _CCAPM4
                                    206 	.globl _CCAPM3
                                    207 	.globl _CCAPM2
                                    208 	.globl _CCAPM1
                                    209 	.globl _CCAPM0
                                    210 	.globl _CCAP4L
                                    211 	.globl _CCAP3L
                                    212 	.globl _CCAP2L
                                    213 	.globl _CCAP1L
                                    214 	.globl _CCAP0L
                                    215 	.globl _CCAP4H
                                    216 	.globl _CCAP3H
                                    217 	.globl _CCAP2H
                                    218 	.globl _CCAP1H
                                    219 	.globl _CCAP0H
                                    220 	.globl _CKCON1
                                    221 	.globl _CKCON0
                                    222 	.globl _CKRL
                                    223 	.globl _AUXR1
                                    224 	.globl _AUXR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T2CON
                                    230 	.globl _ack
                                    231 	.globl _MenuOptions
                                    232 	.globl _Write_Byte
                                    233 	.globl _Read_Byte
                                    234 	.globl _Hex_Dump
                                    235 	.globl _eereset
                                    236 	.globl _Convert_Char_to_dec_val
                                    237 ;--------------------------------------------------------
                                    238 ; special function registers
                                    239 ;--------------------------------------------------------
                                    240 	.area RSEG    (ABS,DATA)
      000000                        241 	.org 0x0000
                           0000C8   242 _T2CON	=	0x00c8
                           0000CA   243 _RCAP2L	=	0x00ca
                           0000CB   244 _RCAP2H	=	0x00cb
                           0000CC   245 _TL2	=	0x00cc
                           0000CD   246 _TH2	=	0x00cd
                           00008E   247 _AUXR	=	0x008e
                           0000A2   248 _AUXR1	=	0x00a2
                           000097   249 _CKRL	=	0x0097
                           00008F   250 _CKCON0	=	0x008f
                           0000AF   251 _CKCON1	=	0x00af
                           0000FA   252 _CCAP0H	=	0x00fa
                           0000FB   253 _CCAP1H	=	0x00fb
                           0000FC   254 _CCAP2H	=	0x00fc
                           0000FD   255 _CCAP3H	=	0x00fd
                           0000FE   256 _CCAP4H	=	0x00fe
                           0000EA   257 _CCAP0L	=	0x00ea
                           0000EB   258 _CCAP1L	=	0x00eb
                           0000EC   259 _CCAP2L	=	0x00ec
                           0000ED   260 _CCAP3L	=	0x00ed
                           0000EE   261 _CCAP4L	=	0x00ee
                           0000DA   262 _CCAPM0	=	0x00da
                           0000DB   263 _CCAPM1	=	0x00db
                           0000DC   264 _CCAPM2	=	0x00dc
                           0000DD   265 _CCAPM3	=	0x00dd
                           0000DE   266 _CCAPM4	=	0x00de
                           0000D8   267 _CCON	=	0x00d8
                           0000F9   268 _CH	=	0x00f9
                           0000E9   269 _CL	=	0x00e9
                           0000D9   270 _CMOD	=	0x00d9
                           0000A8   271 _IEN0	=	0x00a8
                           0000B1   272 _IEN1	=	0x00b1
                           0000B8   273 _IPL0	=	0x00b8
                           0000B7   274 _IPH0	=	0x00b7
                           0000B2   275 _IPL1	=	0x00b2
                           0000B3   276 _IPH1	=	0x00b3
                           0000C0   277 _P4	=	0x00c0
                           0000E8   278 _P5	=	0x00e8
                           0000A6   279 _WDTRST	=	0x00a6
                           0000A7   280 _WDTPRG	=	0x00a7
                           0000A9   281 _SADDR	=	0x00a9
                           0000B9   282 _SADEN	=	0x00b9
                           0000C3   283 _SPCON	=	0x00c3
                           0000C4   284 _SPSTA	=	0x00c4
                           0000C5   285 _SPDAT	=	0x00c5
                           0000C9   286 _T2MOD	=	0x00c9
                           00009B   287 _BDRCON	=	0x009b
                           00009A   288 _BRL	=	0x009a
                           00009C   289 _KBLS	=	0x009c
                           00009D   290 _KBE	=	0x009d
                           00009E   291 _KBF	=	0x009e
                           0000D2   292 _EECON	=	0x00d2
                           0000E0   293 _ACC	=	0x00e0
                           0000F0   294 _B	=	0x00f0
                           000083   295 _DPH	=	0x0083
                           000083   296 _DP0H	=	0x0083
                           000082   297 _DPL	=	0x0082
                           000082   298 _DP0L	=	0x0082
                           0000A8   299 _IE	=	0x00a8
                           0000B8   300 _IP	=	0x00b8
                           000080   301 _P0	=	0x0080
                           000090   302 _P1	=	0x0090
                           0000A0   303 _P2	=	0x00a0
                           0000B0   304 _P3	=	0x00b0
                           000087   305 _PCON	=	0x0087
                           0000D0   306 _PSW	=	0x00d0
                           000099   307 _SBUF	=	0x0099
                           000099   308 _SBUF0	=	0x0099
                           000098   309 _SCON	=	0x0098
                           000081   310 _SP	=	0x0081
                           000088   311 _TCON	=	0x0088
                           00008C   312 _TH0	=	0x008c
                           00008D   313 _TH1	=	0x008d
                           00008A   314 _TL0	=	0x008a
                           00008B   315 _TL1	=	0x008b
                           000089   316 _TMOD	=	0x0089
                                    317 ;--------------------------------------------------------
                                    318 ; special function bits
                                    319 ;--------------------------------------------------------
                                    320 	.area RSEG    (ABS,DATA)
      000000                        321 	.org 0x0000
                           0000AD   322 _ET2	=	0x00ad
                           0000BD   323 _PT2	=	0x00bd
                           0000C8   324 _T2CON_0	=	0x00c8
                           0000C9   325 _T2CON_1	=	0x00c9
                           0000CA   326 _T2CON_2	=	0x00ca
                           0000CB   327 _T2CON_3	=	0x00cb
                           0000CC   328 _T2CON_4	=	0x00cc
                           0000CD   329 _T2CON_5	=	0x00cd
                           0000CE   330 _T2CON_6	=	0x00ce
                           0000CF   331 _T2CON_7	=	0x00cf
                           0000C8   332 _CP_RL2	=	0x00c8
                           0000C9   333 _C_T2	=	0x00c9
                           0000CA   334 _TR2	=	0x00ca
                           0000CB   335 _EXEN2	=	0x00cb
                           0000CC   336 _TCLK	=	0x00cc
                           0000CD   337 _RCLK	=	0x00cd
                           0000CE   338 _EXF2	=	0x00ce
                           0000CF   339 _TF2	=	0x00cf
                           0000DF   340 _CF	=	0x00df
                           0000DE   341 _CR	=	0x00de
                           0000DC   342 _CCF4	=	0x00dc
                           0000DB   343 _CCF3	=	0x00db
                           0000DA   344 _CCF2	=	0x00da
                           0000D9   345 _CCF1	=	0x00d9
                           0000D8   346 _CCF0	=	0x00d8
                           0000AE   347 _EC	=	0x00ae
                           0000BE   348 _PPCL	=	0x00be
                           0000BD   349 _PT2L	=	0x00bd
                           0000BC   350 _PSL	=	0x00bc
                           0000BB   351 _PT1L	=	0x00bb
                           0000BA   352 _PX1L	=	0x00ba
                           0000B9   353 _PT0L	=	0x00b9
                           0000B8   354 _PX0L	=	0x00b8
                           0000C0   355 _P4_0	=	0x00c0
                           0000C1   356 _P4_1	=	0x00c1
                           0000C2   357 _P4_2	=	0x00c2
                           0000C3   358 _P4_3	=	0x00c3
                           0000C4   359 _P4_4	=	0x00c4
                           0000C5   360 _P4_5	=	0x00c5
                           0000C6   361 _P4_6	=	0x00c6
                           0000C7   362 _P4_7	=	0x00c7
                           0000E8   363 _P5_0	=	0x00e8
                           0000E9   364 _P5_1	=	0x00e9
                           0000EA   365 _P5_2	=	0x00ea
                           0000EB   366 _P5_3	=	0x00eb
                           0000EC   367 _P5_4	=	0x00ec
                           0000ED   368 _P5_5	=	0x00ed
                           0000EE   369 _P5_6	=	0x00ee
                           0000EF   370 _P5_7	=	0x00ef
                           0000F0   371 _BREG_F0	=	0x00f0
                           0000F1   372 _BREG_F1	=	0x00f1
                           0000F2   373 _BREG_F2	=	0x00f2
                           0000F3   374 _BREG_F3	=	0x00f3
                           0000F4   375 _BREG_F4	=	0x00f4
                           0000F5   376 _BREG_F5	=	0x00f5
                           0000F6   377 _BREG_F6	=	0x00f6
                           0000F7   378 _BREG_F7	=	0x00f7
                           0000A8   379 _EX0	=	0x00a8
                           0000A9   380 _ET0	=	0x00a9
                           0000AA   381 _EX1	=	0x00aa
                           0000AB   382 _ET1	=	0x00ab
                           0000AC   383 _ES	=	0x00ac
                           0000AF   384 _EA	=	0x00af
                           0000B8   385 _PX0	=	0x00b8
                           0000B9   386 _PT0	=	0x00b9
                           0000BA   387 _PX1	=	0x00ba
                           0000BB   388 _PT1	=	0x00bb
                           0000BC   389 _PS	=	0x00bc
                           000080   390 _P0_0	=	0x0080
                           000081   391 _P0_1	=	0x0081
                           000082   392 _P0_2	=	0x0082
                           000083   393 _P0_3	=	0x0083
                           000084   394 _P0_4	=	0x0084
                           000085   395 _P0_5	=	0x0085
                           000086   396 _P0_6	=	0x0086
                           000087   397 _P0_7	=	0x0087
                           000090   398 _P1_0	=	0x0090
                           000091   399 _P1_1	=	0x0091
                           000092   400 _P1_2	=	0x0092
                           000093   401 _P1_3	=	0x0093
                           000094   402 _P1_4	=	0x0094
                           000095   403 _P1_5	=	0x0095
                           000096   404 _P1_6	=	0x0096
                           000097   405 _P1_7	=	0x0097
                           0000A0   406 _P2_0	=	0x00a0
                           0000A1   407 _P2_1	=	0x00a1
                           0000A2   408 _P2_2	=	0x00a2
                           0000A3   409 _P2_3	=	0x00a3
                           0000A4   410 _P2_4	=	0x00a4
                           0000A5   411 _P2_5	=	0x00a5
                           0000A6   412 _P2_6	=	0x00a6
                           0000A7   413 _P2_7	=	0x00a7
                           0000B0   414 _P3_0	=	0x00b0
                           0000B1   415 _P3_1	=	0x00b1
                           0000B2   416 _P3_2	=	0x00b2
                           0000B3   417 _P3_3	=	0x00b3
                           0000B4   418 _P3_4	=	0x00b4
                           0000B5   419 _P3_5	=	0x00b5
                           0000B6   420 _P3_6	=	0x00b6
                           0000B7   421 _P3_7	=	0x00b7
                           0000B0   422 _RXD	=	0x00b0
                           0000B0   423 _RXD0	=	0x00b0
                           0000B1   424 _TXD	=	0x00b1
                           0000B1   425 _TXD0	=	0x00b1
                           0000B2   426 _INT0	=	0x00b2
                           0000B3   427 _INT1	=	0x00b3
                           0000B4   428 _T0	=	0x00b4
                           0000B5   429 _T1	=	0x00b5
                           0000B6   430 _WR	=	0x00b6
                           0000B7   431 _RD	=	0x00b7
                           0000D0   432 _P	=	0x00d0
                           0000D1   433 _F1	=	0x00d1
                           0000D2   434 _OV	=	0x00d2
                           0000D3   435 _RS0	=	0x00d3
                           0000D4   436 _RS1	=	0x00d4
                           0000D5   437 _F0	=	0x00d5
                           0000D6   438 _AC	=	0x00d6
                           0000D7   439 _CY	=	0x00d7
                           000098   440 _RI	=	0x0098
                           000099   441 _TI	=	0x0099
                           00009A   442 _RB8	=	0x009a
                           00009B   443 _TB8	=	0x009b
                           00009C   444 _REN	=	0x009c
                           00009D   445 _SM2	=	0x009d
                           00009E   446 _SM1	=	0x009e
                           00009F   447 _SM0	=	0x009f
                           000088   448 _IT0	=	0x0088
                           000089   449 _IE0	=	0x0089
                           00008A   450 _IT1	=	0x008a
                           00008B   451 _IE1	=	0x008b
                           00008C   452 _TR0	=	0x008c
                           00008D   453 _TF0	=	0x008d
                           00008E   454 _TR1	=	0x008e
                           00008F   455 _TF1	=	0x008f
                                    456 ;--------------------------------------------------------
                                    457 ; overlayable register banks
                                    458 ;--------------------------------------------------------
                                    459 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        460 	.ds 8
                                    461 ;--------------------------------------------------------
                                    462 ; internal ram data
                                    463 ;--------------------------------------------------------
                                    464 	.area DSEG    (DATA)
      000000                        465 _Hex_Dump_sloc0_1_0:
      000000                        466 	.ds 1
      000001                        467 _Hex_Dump_sloc1_1_0:
      000001                        468 	.ds 1
      000002                        469 _Hex_Dump_sloc2_1_0:
      000002                        470 	.ds 1
      000003                        471 _Hex_Dump_sloc3_1_0:
      000003                        472 	.ds 2
      000005                        473 _Hex_Dump_sloc4_1_0:
      000005                        474 	.ds 2
      000007                        475 _Hex_Dump_sloc5_1_0:
      000007                        476 	.ds 2
      000009                        477 _Hex_Dump_sloc6_1_0:
      000009                        478 	.ds 1
      00000A                        479 _Hex_Dump_sloc7_1_0:
      00000A                        480 	.ds 1
      00000B                        481 _Hex_Dump_sloc8_1_0:
      00000B                        482 	.ds 2
      00000D                        483 _Hex_Dump_sloc9_1_0:
      00000D                        484 	.ds 1
                                    485 ;--------------------------------------------------------
                                    486 ; overlayable items in internal ram 
                                    487 ;--------------------------------------------------------
                                    488 ;--------------------------------------------------------
                                    489 ; indirectly addressable internal ram data
                                    490 ;--------------------------------------------------------
                                    491 	.area ISEG    (DATA)
                                    492 ;--------------------------------------------------------
                                    493 ; absolute internal ram data
                                    494 ;--------------------------------------------------------
                                    495 	.area IABS    (ABS,DATA)
                                    496 	.area IABS    (ABS,DATA)
                                    497 ;--------------------------------------------------------
                                    498 ; bit data
                                    499 ;--------------------------------------------------------
                                    500 	.area BSEG    (BIT)
                                    501 ;--------------------------------------------------------
                                    502 ; paged external ram data
                                    503 ;--------------------------------------------------------
                                    504 	.area PSEG    (PAG,XDATA)
                                    505 ;--------------------------------------------------------
                                    506 ; external ram data
                                    507 ;--------------------------------------------------------
                                    508 	.area XSEG    (XDATA)
      000000                        509 _ack::
      000000                        510 	.ds 1
      000001                        511 _Write_Byte_blocknumber_65536_57:
      000001                        512 	.ds 1
      000002                        513 _Write_Byte_wordaddress_65536_57:
      000002                        514 	.ds 1
      000003                        515 _Write_Byte_databyte_65536_57:
      000003                        516 	.ds 1
      000004                        517 _Read_Byte_blocknumber_65536_71:
      000004                        518 	.ds 1
      000005                        519 _Read_Byte_blocknumberread_65536_71:
      000005                        520 	.ds 1
      000006                        521 _Read_Byte_wordaddress_65536_71:
      000006                        522 	.ds 1
      000007                        523 _Hex_Dump_blocknumber_65536_85:
      000007                        524 	.ds 1
      000008                        525 _Hex_Dump_blocknumberread_65536_85:
      000008                        526 	.ds 1
      000009                        527 _Hex_Dump_blocknumberend_65536_85:
      000009                        528 	.ds 1
      00000A                        529 _Hex_Dump_blocknumberreadend_65536_85:
      00000A                        530 	.ds 1
      00000B                        531 _Hex_Dump_startaddress_65536_85:
      00000B                        532 	.ds 1
      00000C                        533 _Hex_Dump_endaddress_65536_85:
      00000C                        534 	.ds 1
      00000D                        535 _Hex_Dump_count_65536_85:
      00000D                        536 	.ds 1
      00000E                        537 _Convert_Char_to_dec_val_finaldecimal_65536_138:
      00000E                        538 	.ds 1
      00000F                        539 _Convert_Char_to_dec_val_temp_65536_138:
      00000F                        540 	.ds 1
      000010                        541 _Convert_Char_to_dec_val_charstring_65536_138:
      000010                        542 	.ds 3
                                    543 ;--------------------------------------------------------
                                    544 ; absolute external ram data
                                    545 ;--------------------------------------------------------
                                    546 	.area XABS    (ABS,XDATA)
                                    547 ;--------------------------------------------------------
                                    548 ; external initialized ram data
                                    549 ;--------------------------------------------------------
                                    550 	.area XISEG   (XDATA)
                                    551 	.area HOME    (CODE)
                                    552 	.area GSINIT0 (CODE)
                                    553 	.area GSINIT1 (CODE)
                                    554 	.area GSINIT2 (CODE)
                                    555 	.area GSINIT3 (CODE)
                                    556 	.area GSINIT4 (CODE)
                                    557 	.area GSINIT5 (CODE)
                                    558 	.area GSINIT  (CODE)
                                    559 	.area GSFINAL (CODE)
                                    560 	.area CSEG    (CODE)
                                    561 ;--------------------------------------------------------
                                    562 ; global & static initialisations
                                    563 ;--------------------------------------------------------
                                    564 	.area HOME    (CODE)
                                    565 	.area GSINIT  (CODE)
                                    566 	.area GSFINAL (CODE)
                                    567 	.area GSINIT  (CODE)
                                    568 ;--------------------------------------------------------
                                    569 ; Home
                                    570 ;--------------------------------------------------------
                                    571 	.area HOME    (CODE)
                                    572 	.area HOME    (CODE)
                                    573 ;--------------------------------------------------------
                                    574 ; code
                                    575 ;--------------------------------------------------------
                                    576 	.area CSEG    (CODE)
                                    577 ;------------------------------------------------------------
                                    578 ;Allocation info for local variables in function 'MenuOptions'
                                    579 ;------------------------------------------------------------
                                    580 ;takechar                  Allocated with name '_MenuOptions_takechar_65537_51'
                                    581 ;------------------------------------------------------------
                                    582 ;	menu.c:6: void MenuOptions()
                                    583 ;	-----------------------------------------
                                    584 ;	 function MenuOptions
                                    585 ;	-----------------------------------------
      000000                        586 _MenuOptions:
                           000007   587 	ar7 = 0x07
                           000006   588 	ar6 = 0x06
                           000005   589 	ar5 = 0x05
                           000004   590 	ar4 = 0x04
                           000003   591 	ar3 = 0x03
                           000002   592 	ar2 = 0x02
                           000001   593 	ar1 = 0x01
                           000000   594 	ar0 = 0x00
                                    595 ;	menu.c:10: printf("\n\n \r ########################### Menu ############################################");
      000000 74r00            [12]  596 	mov	a,#___str_0
      000002 C0 E0            [24]  597 	push	acc
      000004 74s00            [12]  598 	mov	a,#(___str_0 >> 8)
      000006 C0 E0            [24]  599 	push	acc
      000008 74 80            [12]  600 	mov	a,#0x80
      00000A C0 E0            [24]  601 	push	acc
      00000C 12r00r00         [24]  602 	lcall	_printf
      00000F 15 81            [12]  603 	dec	sp
      000011 15 81            [12]  604 	dec	sp
      000013 15 81            [12]  605 	dec	sp
                                    606 ;	menu.c:11: printf("\n \r # 1. 'w' Sign --> Write EEPROM address and a byte data value in hex         #");
      000015 74r53            [12]  607 	mov	a,#___str_1
      000017 C0 E0            [24]  608 	push	acc
      000019 74s00            [12]  609 	mov	a,#(___str_1 >> 8)
      00001B C0 E0            [24]  610 	push	acc
      00001D 74 80            [12]  611 	mov	a,#0x80
      00001F C0 E0            [24]  612 	push	acc
      000021 12r00r00         [24]  613 	lcall	_printf
      000024 15 81            [12]  614 	dec	sp
      000026 15 81            [12]  615 	dec	sp
      000028 15 81            [12]  616 	dec	sp
                                    617 ;	menu.c:12: printf("\n \r # 2. 'r' Sign --> Read Data from particular EEPROM address                  #");
      00002A 74rA5            [12]  618 	mov	a,#___str_2
      00002C C0 E0            [24]  619 	push	acc
      00002E 74s00            [12]  620 	mov	a,#(___str_2 >> 8)
      000030 C0 E0            [24]  621 	push	acc
      000032 74 80            [12]  622 	mov	a,#0x80
      000034 C0 E0            [24]  623 	push	acc
      000036 12r00r00         [24]  624 	lcall	_printf
      000039 15 81            [12]  625 	dec	sp
      00003B 15 81            [12]  626 	dec	sp
      00003D 15 81            [12]  627 	dec	sp
                                    628 ;	menu.c:13: printf("\n \r # 3. 'h' Sign --> Display Data contents from provided start to end address  #");
      00003F 74rF7            [12]  629 	mov	a,#___str_3
      000041 C0 E0            [24]  630 	push	acc
      000043 74s00            [12]  631 	mov	a,#(___str_3 >> 8)
      000045 C0 E0            [24]  632 	push	acc
      000047 74 80            [12]  633 	mov	a,#0x80
      000049 C0 E0            [24]  634 	push	acc
      00004B 12r00r00         [24]  635 	lcall	_printf
      00004E 15 81            [12]  636 	dec	sp
      000050 15 81            [12]  637 	dec	sp
      000052 15 81            [12]  638 	dec	sp
                                    639 ;	menu.c:14: printf("\n \r # 4. 't' Sign --> Reset the EEPROM                                          #");
      000054 74r49            [12]  640 	mov	a,#___str_4
      000056 C0 E0            [24]  641 	push	acc
      000058 74s01            [12]  642 	mov	a,#(___str_4 >> 8)
      00005A C0 E0            [24]  643 	push	acc
      00005C 74 80            [12]  644 	mov	a,#0x80
      00005E C0 E0            [24]  645 	push	acc
      000060 12r00r00         [24]  646 	lcall	_printf
      000063 15 81            [12]  647 	dec	sp
      000065 15 81            [12]  648 	dec	sp
      000067 15 81            [12]  649 	dec	sp
                                    650 ;	menu.c:15: printf("\n \r #############################################################################");
      000069 74r9B            [12]  651 	mov	a,#___str_5
      00006B C0 E0            [24]  652 	push	acc
      00006D 74s01            [12]  653 	mov	a,#(___str_5 >> 8)
      00006F C0 E0            [24]  654 	push	acc
      000071 74 80            [12]  655 	mov	a,#0x80
      000073 C0 E0            [24]  656 	push	acc
      000075 12r00r00         [24]  657 	lcall	_printf
      000078 15 81            [12]  658 	dec	sp
      00007A 15 81            [12]  659 	dec	sp
      00007C 15 81            [12]  660 	dec	sp
                                    661 ;	menu.c:17: printf_tiny("\n \rEnter character \n \r"); // Character entered from menu
      00007E 74rED            [12]  662 	mov	a,#___str_6
      000080 C0 E0            [24]  663 	push	acc
      000082 74s01            [12]  664 	mov	a,#(___str_6 >> 8)
      000084 C0 E0            [24]  665 	push	acc
      000086 12r00r00         [24]  666 	lcall	_printf_tiny
      000089 15 81            [12]  667 	dec	sp
      00008B 15 81            [12]  668 	dec	sp
                                    669 ;	menu.c:18: uint16_t takechar = getchar();
      00008D 12r00r00         [24]  670 	lcall	_getchar
                                    671 ;	menu.c:19: putchar(takechar);
      000090 AE 82            [24]  672 	mov	r6,dpl
      000092 AF 83            [24]  673 	mov  r7,dph
      000094 C0 07            [24]  674 	push	ar7
      000096 C0 06            [24]  675 	push	ar6
      000098 12r00r00         [24]  676 	lcall	_putchar
      00009B D0 06            [24]  677 	pop	ar6
      00009D D0 07            [24]  678 	pop	ar7
                                    679 ;	menu.c:20: if (takechar=='w' || takechar=='W')
      00009F BE 77 05         [24]  680 	cjne	r6,#0x77,00135$
      0000A2 BF 00 02         [24]  681 	cjne	r7,#0x00,00135$
      0000A5 80 06            [24]  682 	sjmp	00113$
      0000A7                        683 00135$:
      0000A7 BE 57 06         [24]  684 	cjne	r6,#0x57,00114$
      0000AA BF 00 03         [24]  685 	cjne	r7,#0x00,00114$
      0000AD                        686 00113$:
                                    687 ;	menu.c:22: Write_Byte();
      0000AD 02r00rF9         [24]  688 	ljmp	_Write_Byte
      0000B0                        689 00114$:
                                    690 ;	menu.c:24: else if (takechar=='r' || takechar=='R')
      0000B0 BE 72 05         [24]  691 	cjne	r6,#0x72,00138$
      0000B3 BF 00 02         [24]  692 	cjne	r7,#0x00,00138$
      0000B6 80 06            [24]  693 	sjmp	00109$
      0000B8                        694 00138$:
      0000B8 BE 52 06         [24]  695 	cjne	r6,#0x52,00110$
      0000BB BF 00 03         [24]  696 	cjne	r7,#0x00,00110$
      0000BE                        697 00109$:
                                    698 ;	menu.c:26: Read_Byte();
      0000BE 02r02rC3         [24]  699 	ljmp	_Read_Byte
      0000C1                        700 00110$:
                                    701 ;	menu.c:28: else if (takechar=='h' || takechar=='H')
      0000C1 BE 68 05         [24]  702 	cjne	r6,#0x68,00141$
      0000C4 BF 00 02         [24]  703 	cjne	r7,#0x00,00141$
      0000C7 80 06            [24]  704 	sjmp	00105$
      0000C9                        705 00141$:
      0000C9 BE 48 06         [24]  706 	cjne	r6,#0x48,00106$
      0000CC BF 00 03         [24]  707 	cjne	r7,#0x00,00106$
      0000CF                        708 00105$:
                                    709 ;	menu.c:30: Hex_Dump();
      0000CF 02r04r8E         [24]  710 	ljmp	_Hex_Dump
      0000D2                        711 00106$:
                                    712 ;	menu.c:32: else if (takechar=='t' || takechar=='T')
      0000D2 BE 74 05         [24]  713 	cjne	r6,#0x74,00144$
      0000D5 BF 00 02         [24]  714 	cjne	r7,#0x00,00144$
      0000D8 80 06            [24]  715 	sjmp	00101$
      0000DA                        716 00144$:
      0000DA BE 54 06         [24]  717 	cjne	r6,#0x54,00102$
      0000DD BF 00 03         [24]  718 	cjne	r7,#0x00,00102$
      0000E0                        719 00101$:
                                    720 ;	menu.c:34: eereset();
      0000E0 02r0Cr4B         [24]  721 	ljmp	_eereset
      0000E3                        722 00102$:
                                    723 ;	menu.c:37: printf("\n \r Select Correct option From Menu");
      0000E3 74r04            [12]  724 	mov	a,#___str_7
      0000E5 C0 E0            [24]  725 	push	acc
      0000E7 74s02            [12]  726 	mov	a,#(___str_7 >> 8)
      0000E9 C0 E0            [24]  727 	push	acc
      0000EB 74 80            [12]  728 	mov	a,#0x80
      0000ED C0 E0            [24]  729 	push	acc
      0000EF 12r00r00         [24]  730 	lcall	_printf
      0000F2 15 81            [12]  731 	dec	sp
      0000F4 15 81            [12]  732 	dec	sp
      0000F6 15 81            [12]  733 	dec	sp
                                    734 ;	menu.c:40: }
      0000F8 22               [24]  735 	ret
                                    736 ;------------------------------------------------------------
                                    737 ;Allocation info for local variables in function 'Write_Byte'
                                    738 ;------------------------------------------------------------
                                    739 ;blocknumber               Allocated with name '_Write_Byte_blocknumber_65536_57'
                                    740 ;wordaddress               Allocated with name '_Write_Byte_wordaddress_65536_57'
                                    741 ;databyte                  Allocated with name '_Write_Byte_databyte_65536_57'
                                    742 ;takechar                  Allocated with name '_Write_Byte_takechar_65536_57'
                                    743 ;------------------------------------------------------------
                                    744 ;	menu.c:47: void Write_Byte()
                                    745 ;	-----------------------------------------
                                    746 ;	 function Write_Byte
                                    747 ;	-----------------------------------------
      0000F9                        748 _Write_Byte:
                                    749 ;	menu.c:50: uint8_t wordaddress=0;
      0000F9 90r00r02         [24]  750 	mov	dptr,#_Write_Byte_wordaddress_65536_57
      0000FC E4               [12]  751 	clr	a
      0000FD F0               [24]  752 	movx	@dptr,a
                                    753 ;	menu.c:51: uint8_t databyte=0;
      0000FE 90r00r03         [24]  754 	mov	dptr,#_Write_Byte_databyte_65536_57
      000101 F0               [24]  755 	movx	@dptr,a
                                    756 ;	menu.c:53: do{
      000102                        757 00102$:
                                    758 ;	menu.c:54: printf_tiny("\n \rEnter a valid starting address block from 0 to 7 \n \r");
      000102 74r28            [12]  759 	mov	a,#___str_8
      000104 C0 E0            [24]  760 	push	acc
      000106 74s02            [12]  761 	mov	a,#(___str_8 >> 8)
      000108 C0 E0            [24]  762 	push	acc
      00010A 12r00r00         [24]  763 	lcall	_printf_tiny
      00010D 15 81            [12]  764 	dec	sp
      00010F 15 81            [12]  765 	dec	sp
                                    766 ;	menu.c:55: takechar = getchar();
      000111 12r00r00         [24]  767 	lcall	_getchar
                                    768 ;	menu.c:56: putchar(takechar);
      000114 AE 82            [24]  769 	mov	r6,dpl
      000116 AF 83            [24]  770 	mov  r7,dph
      000118 C0 07            [24]  771 	push	ar7
      00011A C0 06            [24]  772 	push	ar6
      00011C 12r00r00         [24]  773 	lcall	_putchar
      00011F D0 06            [24]  774 	pop	ar6
      000121 D0 07            [24]  775 	pop	ar7
                                    776 ;	menu.c:57: printf("\n \r You Entered block number: %d ",takechar-48);
      000123 EE               [12]  777 	mov	a,r6
      000124 24 D0            [12]  778 	add	a,#0xd0
      000126 FC               [12]  779 	mov	r4,a
      000127 EF               [12]  780 	mov	a,r7
      000128 34 FF            [12]  781 	addc	a,#0xff
      00012A FD               [12]  782 	mov	r5,a
      00012B C0 07            [24]  783 	push	ar7
      00012D C0 06            [24]  784 	push	ar6
      00012F C0 04            [24]  785 	push	ar4
      000131 C0 05            [24]  786 	push	ar5
      000133 74r60            [12]  787 	mov	a,#___str_9
      000135 C0 E0            [24]  788 	push	acc
      000137 74s02            [12]  789 	mov	a,#(___str_9 >> 8)
      000139 C0 E0            [24]  790 	push	acc
      00013B 74 80            [12]  791 	mov	a,#0x80
      00013D C0 E0            [24]  792 	push	acc
      00013F 12r00r00         [24]  793 	lcall	_printf
      000142 E5 81            [12]  794 	mov	a,sp
      000144 24 FB            [12]  795 	add	a,#0xfb
      000146 F5 81            [12]  796 	mov	sp,a
      000148 D0 06            [24]  797 	pop	ar6
      00014A D0 07            [24]  798 	pop	ar7
                                    799 ;	menu.c:58: }while (takechar< 48 || takechar >57 );         // To handle error of putting incorrect block number values
      00014C 8E 04            [24]  800 	mov	ar4,r6
      00014E 8F 05            [24]  801 	mov	ar5,r7
      000150 C3               [12]  802 	clr	c
      000151 EC               [12]  803 	mov	a,r4
      000152 94 30            [12]  804 	subb	a,#0x30
      000154 ED               [12]  805 	mov	a,r5
      000155 94 00            [12]  806 	subb	a,#0x00
      000157 40 A9            [24]  807 	jc	00102$
      000159 8E 04            [24]  808 	mov	ar4,r6
      00015B 8F 05            [24]  809 	mov	ar5,r7
      00015D C3               [12]  810 	clr	c
      00015E 74 39            [12]  811 	mov	a,#0x39
      000160 9C               [12]  812 	subb	a,r4
      000161 E4               [12]  813 	clr	a
      000162 9D               [12]  814 	subb	a,r5
      000163 40 9D            [24]  815 	jc	00102$
                                    816 ;	menu.c:61: switch (takechar)
      000165 8E 04            [24]  817 	mov	ar4,r6
      000167 8F 05            [24]  818 	mov	ar5,r7
      000169 C3               [12]  819 	clr	c
      00016A EC               [12]  820 	mov	a,r4
      00016B 94 30            [12]  821 	subb	a,#0x30
      00016D ED               [12]  822 	mov	a,r5
      00016E 94 00            [12]  823 	subb	a,#0x00
      000170 50 03            [24]  824 	jnc	00161$
      000172 02r01rE1         [24]  825 	ljmp	00113$
      000175                        826 00161$:
      000175 C3               [12]  827 	clr	c
      000176 74 37            [12]  828 	mov	a,#0x37
      000178 9C               [12]  829 	subb	a,r4
      000179 E4               [12]  830 	clr	a
      00017A 9D               [12]  831 	subb	a,r5
      00017B 50 03            [24]  832 	jnc	00162$
      00017D 02r01rE1         [24]  833 	ljmp	00113$
      000180                        834 00162$:
      000180 EE               [12]  835 	mov	a,r6
      000181 24 D0            [12]  836 	add	a,#0xd0
      000183 FE               [12]  837 	mov	r6,a
      000184 24 0A            [12]  838 	add	a,#(00163$-3-.)
      000186 83               [24]  839 	movc	a,@a+pc
      000187 F5 82            [12]  840 	mov	dpl,a
      000189 EE               [12]  841 	mov	a,r6
      00018A 24 0C            [12]  842 	add	a,#(00164$-3-.)
      00018C 83               [24]  843 	movc	a,@a+pc
      00018D F5 83            [12]  844 	mov	dph,a
      00018F E4               [12]  845 	clr	a
      000190 73               [24]  846 	jmp	@a+dptr
      000191                        847 00163$:
      000191rA1                     848 	.db	00105$
      000192rA9                     849 	.db	00106$
      000193rB1                     850 	.db	00107$
      000194rB9                     851 	.db	00108$
      000195rC1                     852 	.db	00109$
      000196rC9                     853 	.db	00110$
      000197rD1                     854 	.db	00111$
      000198rD9                     855 	.db	00112$
      000199                        856 00164$:
      000199s01                     857 	.db	00105$>>8
      00019As01                     858 	.db	00106$>>8
      00019Bs01                     859 	.db	00107$>>8
      00019Cs01                     860 	.db	00108$>>8
      00019Ds01                     861 	.db	00109$>>8
      00019Es01                     862 	.db	00110$>>8
      00019Fs01                     863 	.db	00111$>>8
      0001A0s01                     864 	.db	00112$>>8
                                    865 ;	menu.c:63: case '0': {
      0001A1                        866 00105$:
                                    867 ;	menu.c:64: blocknumber = 0xA0;
      0001A1 90r00r01         [24]  868 	mov	dptr,#_Write_Byte_blocknumber_65536_57
      0001A4 74 A0            [12]  869 	mov	a,#0xa0
      0001A6 F0               [24]  870 	movx	@dptr,a
                                    871 ;	menu.c:65: break;
                                    872 ;	menu.c:67: case '1': {
      0001A7 80 4D            [24]  873 	sjmp	00114$
      0001A9                        874 00106$:
                                    875 ;	menu.c:68: blocknumber = 0xA2;
      0001A9 90r00r01         [24]  876 	mov	dptr,#_Write_Byte_blocknumber_65536_57
      0001AC 74 A2            [12]  877 	mov	a,#0xa2
      0001AE F0               [24]  878 	movx	@dptr,a
                                    879 ;	menu.c:69: break;
                                    880 ;	menu.c:71: case '2': {
      0001AF 80 45            [24]  881 	sjmp	00114$
      0001B1                        882 00107$:
                                    883 ;	menu.c:72: blocknumber = 0xA4;
      0001B1 90r00r01         [24]  884 	mov	dptr,#_Write_Byte_blocknumber_65536_57
      0001B4 74 A4            [12]  885 	mov	a,#0xa4
      0001B6 F0               [24]  886 	movx	@dptr,a
                                    887 ;	menu.c:73: break;
                                    888 ;	menu.c:75: case '3': {
      0001B7 80 3D            [24]  889 	sjmp	00114$
      0001B9                        890 00108$:
                                    891 ;	menu.c:76: blocknumber = 0xA6;
      0001B9 90r00r01         [24]  892 	mov	dptr,#_Write_Byte_blocknumber_65536_57
      0001BC 74 A6            [12]  893 	mov	a,#0xa6
      0001BE F0               [24]  894 	movx	@dptr,a
                                    895 ;	menu.c:77: break;
                                    896 ;	menu.c:79: case '4': {
      0001BF 80 35            [24]  897 	sjmp	00114$
      0001C1                        898 00109$:
                                    899 ;	menu.c:80: blocknumber = 0xA8;
      0001C1 90r00r01         [24]  900 	mov	dptr,#_Write_Byte_blocknumber_65536_57
      0001C4 74 A8            [12]  901 	mov	a,#0xa8
      0001C6 F0               [24]  902 	movx	@dptr,a
                                    903 ;	menu.c:81: break;
                                    904 ;	menu.c:83: case '5': {
      0001C7 80 2D            [24]  905 	sjmp	00114$
      0001C9                        906 00110$:
                                    907 ;	menu.c:84: blocknumber = 0xAA;
      0001C9 90r00r01         [24]  908 	mov	dptr,#_Write_Byte_blocknumber_65536_57
      0001CC 74 AA            [12]  909 	mov	a,#0xaa
      0001CE F0               [24]  910 	movx	@dptr,a
                                    911 ;	menu.c:85: break;
                                    912 ;	menu.c:87: case '6': {
      0001CF 80 25            [24]  913 	sjmp	00114$
      0001D1                        914 00111$:
                                    915 ;	menu.c:88: blocknumber = 0xAC;
      0001D1 90r00r01         [24]  916 	mov	dptr,#_Write_Byte_blocknumber_65536_57
      0001D4 74 AC            [12]  917 	mov	a,#0xac
      0001D6 F0               [24]  918 	movx	@dptr,a
                                    919 ;	menu.c:89: break;
                                    920 ;	menu.c:91: case '7': {
      0001D7 80 1D            [24]  921 	sjmp	00114$
      0001D9                        922 00112$:
                                    923 ;	menu.c:92: blocknumber = 0xAE;
      0001D9 90r00r01         [24]  924 	mov	dptr,#_Write_Byte_blocknumber_65536_57
      0001DC 74 AE            [12]  925 	mov	a,#0xae
      0001DE F0               [24]  926 	movx	@dptr,a
                                    927 ;	menu.c:93: break;
                                    928 ;	menu.c:95: default: {
      0001DF 80 15            [24]  929 	sjmp	00114$
      0001E1                        930 00113$:
                                    931 ;	menu.c:96: printf("\n \r Enter correct block number between 0 to 7\ n");
      0001E1 74r82            [12]  932 	mov	a,#___str_10
      0001E3 C0 E0            [24]  933 	push	acc
      0001E5 74s02            [12]  934 	mov	a,#(___str_10 >> 8)
      0001E7 C0 E0            [24]  935 	push	acc
      0001E9 74 80            [12]  936 	mov	a,#0x80
      0001EB C0 E0            [24]  937 	push	acc
      0001ED 12r00r00         [24]  938 	lcall	_printf
      0001F0 15 81            [12]  939 	dec	sp
      0001F2 15 81            [12]  940 	dec	sp
      0001F4 15 81            [12]  941 	dec	sp
                                    942 ;	menu.c:100: }
      0001F6                        943 00114$:
                                    944 ;	menu.c:101: printf("\n \r Control Byte for the block number is : %X",blocknumber);
      0001F6 90r00r01         [24]  945 	mov	dptr,#_Write_Byte_blocknumber_65536_57
      0001F9 E0               [24]  946 	movx	a,@dptr
      0001FA FF               [12]  947 	mov	r7,a
      0001FB FD               [12]  948 	mov	r5,a
      0001FC 7E 00            [12]  949 	mov	r6,#0x00
      0001FE C0 07            [24]  950 	push	ar7
      000200 C0 05            [24]  951 	push	ar5
      000202 C0 06            [24]  952 	push	ar6
      000204 74rB2            [12]  953 	mov	a,#___str_11
      000206 C0 E0            [24]  954 	push	acc
      000208 74s02            [12]  955 	mov	a,#(___str_11 >> 8)
      00020A C0 E0            [24]  956 	push	acc
      00020C 74 80            [12]  957 	mov	a,#0x80
      00020E C0 E0            [24]  958 	push	acc
      000210 12r00r00         [24]  959 	lcall	_printf
      000213 E5 81            [12]  960 	mov	a,sp
      000215 24 FB            [12]  961 	add	a,#0xfb
      000217 F5 81            [12]  962 	mov	sp,a
      000219 D0 07            [24]  963 	pop	ar7
                                    964 ;	menu.c:104: while(wordaddress==0)
      00021B                        965 00115$:
      00021B 90r00r02         [24]  966 	mov	dptr,#_Write_Byte_wordaddress_65536_57
      00021E E0               [24]  967 	movx	a,@dptr
      00021F 70 24            [24]  968 	jnz	00131$
                                    969 ;	menu.c:106: printf("\n \r Enter a Word Address between 00 to FF:  ");
      000221 C0 07            [24]  970 	push	ar7
      000223 74rE0            [12]  971 	mov	a,#___str_12
      000225 C0 E0            [24]  972 	push	acc
      000227 74s02            [12]  973 	mov	a,#(___str_12 >> 8)
      000229 C0 E0            [24]  974 	push	acc
      00022B 74 80            [12]  975 	mov	a,#0x80
      00022D C0 E0            [24]  976 	push	acc
      00022F 12r00r00         [24]  977 	lcall	_printf
      000232 15 81            [12]  978 	dec	sp
      000234 15 81            [12]  979 	dec	sp
      000236 15 81            [12]  980 	dec	sp
                                    981 ;	menu.c:107: wordaddress = Convert_Char_to_dec_val();      // Getting word address in decimal
      000238 12r0Cr66         [24]  982 	lcall	_Convert_Char_to_dec_val
      00023B E5 82            [12]  983 	mov	a,dpl
      00023D D0 07            [24]  984 	pop	ar7
      00023F 90r00r02         [24]  985 	mov	dptr,#_Write_Byte_wordaddress_65536_57
      000242 F0               [24]  986 	movx	@dptr,a
                                    987 ;	menu.c:112: while(databyte==0)
      000243 80 D6            [24]  988 	sjmp	00115$
      000245                        989 00131$:
      000245                        990 00118$:
      000245 90r00r03         [24]  991 	mov	dptr,#_Write_Byte_databyte_65536_57
      000248 E0               [24]  992 	movx	a,@dptr
      000249 FE               [12]  993 	mov	r6,a
      00024A 70 24            [24]  994 	jnz	00120$
                                    995 ;	menu.c:114: printf("\n \r Enter Databyte between 00 to FF:  ");
      00024C C0 07            [24]  996 	push	ar7
      00024E 74r0D            [12]  997 	mov	a,#___str_13
      000250 C0 E0            [24]  998 	push	acc
      000252 74s03            [12]  999 	mov	a,#(___str_13 >> 8)
      000254 C0 E0            [24] 1000 	push	acc
      000256 74 80            [12] 1001 	mov	a,#0x80
      000258 C0 E0            [24] 1002 	push	acc
      00025A 12r00r00         [24] 1003 	lcall	_printf
      00025D 15 81            [12] 1004 	dec	sp
      00025F 15 81            [12] 1005 	dec	sp
      000261 15 81            [12] 1006 	dec	sp
                                   1007 ;	menu.c:115: databyte = Convert_Char_to_dec_val();         // Getting data byte in decimal
      000263 12r0Cr66         [24] 1008 	lcall	_Convert_Char_to_dec_val
      000266 E5 82            [12] 1009 	mov	a,dpl
      000268 D0 07            [24] 1010 	pop	ar7
      00026A 90r00r03         [24] 1011 	mov	dptr,#_Write_Byte_databyte_65536_57
      00026D F0               [24] 1012 	movx	@dptr,a
      00026E 80 D5            [24] 1013 	sjmp	00118$
      000270                       1014 00120$:
                                   1015 ;	menu.c:122: StartI2C();
      000270 C0 07            [24] 1016 	push	ar7
      000272 C0 06            [24] 1017 	push	ar6
      000274 12r00r00         [24] 1018 	lcall	_StartI2C
      000277 D0 06            [24] 1019 	pop	ar6
      000279 D0 07            [24] 1020 	pop	ar7
                                   1021 ;	menu.c:123: ack = DataSendI2C(blocknumber);
      00027B 8F 82            [24] 1022 	mov	dpl,r7
      00027D C0 06            [24] 1023 	push	ar6
      00027F 12r00r00         [24] 1024 	lcall	_DataSendI2C
      000282 E5 82            [12] 1025 	mov	a,dpl
      000284 90r00r00         [24] 1026 	mov	dptr,#_ack
      000287 F0               [24] 1027 	movx	@dptr,a
                                   1028 ;	menu.c:124: ack = DataSendI2C(wordaddress);
      000288 90r00r02         [24] 1029 	mov	dptr,#_Write_Byte_wordaddress_65536_57
      00028B E0               [24] 1030 	movx	a,@dptr
      00028C F5 82            [12] 1031 	mov	dpl,a
      00028E 12r00r00         [24] 1032 	lcall	_DataSendI2C
      000291 E5 82            [12] 1033 	mov	a,dpl
      000293 D0 06            [24] 1034 	pop	ar6
      000295 90r00r00         [24] 1035 	mov	dptr,#_ack
      000298 F0               [24] 1036 	movx	@dptr,a
                                   1037 ;	menu.c:125: ack = DataSendI2C(databyte);
      000299 8E 82            [24] 1038 	mov	dpl,r6
      00029B C0 06            [24] 1039 	push	ar6
      00029D 12r00r00         [24] 1040 	lcall	_DataSendI2C
      0002A0 E5 82            [12] 1041 	mov	a,dpl
      0002A2 90r00r00         [24] 1042 	mov	dptr,#_ack
      0002A5 F0               [24] 1043 	movx	@dptr,a
                                   1044 ;	menu.c:126: StopI2C();
      0002A6 12r00r00         [24] 1045 	lcall	_StopI2C
                                   1046 ;	menu.c:127: printf("\n \r Data Entered at given Memory Location --> %x",databyte);
      0002A9 7F 00            [12] 1047 	mov	r7,#0x00
      0002AB C0 07            [24] 1048 	push	ar7
      0002AD 74r34            [12] 1049 	mov	a,#___str_14
      0002AF C0 E0            [24] 1050 	push	acc
      0002B1 74s03            [12] 1051 	mov	a,#(___str_14 >> 8)
      0002B3 C0 E0            [24] 1052 	push	acc
      0002B5 74 80            [12] 1053 	mov	a,#0x80
      0002B7 C0 E0            [24] 1054 	push	acc
      0002B9 12r00r00         [24] 1055 	lcall	_printf
      0002BC E5 81            [12] 1056 	mov	a,sp
      0002BE 24 FB            [12] 1057 	add	a,#0xfb
      0002C0 F5 81            [12] 1058 	mov	sp,a
                                   1059 ;	menu.c:131: }
      0002C2 22               [24] 1060 	ret
                                   1061 ;------------------------------------------------------------
                                   1062 ;Allocation info for local variables in function 'Read_Byte'
                                   1063 ;------------------------------------------------------------
                                   1064 ;blocknumber               Allocated with name '_Read_Byte_blocknumber_65536_71'
                                   1065 ;blocknumberread           Allocated with name '_Read_Byte_blocknumberread_65536_71'
                                   1066 ;wordaddress               Allocated with name '_Read_Byte_wordaddress_65536_71'
                                   1067 ;readdataprint             Allocated with name '_Read_Byte_readdataprint_65536_71'
                                   1068 ;takechar                  Allocated with name '_Read_Byte_takechar_65536_71'
                                   1069 ;myread                    Allocated with name '_Read_Byte_myread_65537_84'
                                   1070 ;------------------------------------------------------------
                                   1071 ;	menu.c:140: void Read_Byte()
                                   1072 ;	-----------------------------------------
                                   1073 ;	 function Read_Byte
                                   1074 ;	-----------------------------------------
      0002C3                       1075 _Read_Byte:
                                   1076 ;	menu.c:144: uint8_t wordaddress=0;
      0002C3 90r00r06         [24] 1077 	mov	dptr,#_Read_Byte_wordaddress_65536_71
      0002C6 E4               [12] 1078 	clr	a
      0002C7 F0               [24] 1079 	movx	@dptr,a
                                   1080 ;	menu.c:148: do{
      0002C8                       1081 00102$:
                                   1082 ;	menu.c:149: printf_tiny("\n \rEnter a valid starting address block from 0 to 7 \n \r");
      0002C8 74r28            [12] 1083 	mov	a,#___str_8
      0002CA C0 E0            [24] 1084 	push	acc
      0002CC 74s02            [12] 1085 	mov	a,#(___str_8 >> 8)
      0002CE C0 E0            [24] 1086 	push	acc
      0002D0 12r00r00         [24] 1087 	lcall	_printf_tiny
      0002D3 15 81            [12] 1088 	dec	sp
      0002D5 15 81            [12] 1089 	dec	sp
                                   1090 ;	menu.c:150: takechar = getchar();
      0002D7 12r00r00         [24] 1091 	lcall	_getchar
                                   1092 ;	menu.c:151: putchar(takechar);
      0002DA AE 82            [24] 1093 	mov	r6,dpl
      0002DC AF 83            [24] 1094 	mov  r7,dph
      0002DE C0 07            [24] 1095 	push	ar7
      0002E0 C0 06            [24] 1096 	push	ar6
      0002E2 12r00r00         [24] 1097 	lcall	_putchar
      0002E5 D0 06            [24] 1098 	pop	ar6
      0002E7 D0 07            [24] 1099 	pop	ar7
                                   1100 ;	menu.c:152: printf("\n \r You Entered block number: %d ",takechar-48);
      0002E9 EE               [12] 1101 	mov	a,r6
      0002EA 24 D0            [12] 1102 	add	a,#0xd0
      0002EC FC               [12] 1103 	mov	r4,a
      0002ED EF               [12] 1104 	mov	a,r7
      0002EE 34 FF            [12] 1105 	addc	a,#0xff
      0002F0 FD               [12] 1106 	mov	r5,a
      0002F1 C0 07            [24] 1107 	push	ar7
      0002F3 C0 06            [24] 1108 	push	ar6
      0002F5 C0 04            [24] 1109 	push	ar4
      0002F7 C0 05            [24] 1110 	push	ar5
      0002F9 74r60            [12] 1111 	mov	a,#___str_9
      0002FB C0 E0            [24] 1112 	push	acc
      0002FD 74s02            [12] 1113 	mov	a,#(___str_9 >> 8)
      0002FF C0 E0            [24] 1114 	push	acc
      000301 74 80            [12] 1115 	mov	a,#0x80
      000303 C0 E0            [24] 1116 	push	acc
      000305 12r00r00         [24] 1117 	lcall	_printf
      000308 E5 81            [12] 1118 	mov	a,sp
      00030A 24 FB            [12] 1119 	add	a,#0xfb
      00030C F5 81            [12] 1120 	mov	sp,a
      00030E D0 06            [24] 1121 	pop	ar6
      000310 D0 07            [24] 1122 	pop	ar7
                                   1123 ;	menu.c:153: }while (takechar< 48 || takechar >57 );
      000312 8E 04            [24] 1124 	mov	ar4,r6
      000314 8F 05            [24] 1125 	mov	ar5,r7
      000316 C3               [12] 1126 	clr	c
      000317 EC               [12] 1127 	mov	a,r4
      000318 94 30            [12] 1128 	subb	a,#0x30
      00031A ED               [12] 1129 	mov	a,r5
      00031B 94 00            [12] 1130 	subb	a,#0x00
      00031D 40 A9            [24] 1131 	jc	00102$
      00031F 8E 04            [24] 1132 	mov	ar4,r6
      000321 8F 05            [24] 1133 	mov	ar5,r7
      000323 C3               [12] 1134 	clr	c
      000324 74 39            [12] 1135 	mov	a,#0x39
      000326 9C               [12] 1136 	subb	a,r4
      000327 E4               [12] 1137 	clr	a
      000328 9D               [12] 1138 	subb	a,r5
      000329 40 9D            [24] 1139 	jc	00102$
                                   1140 ;	menu.c:156: switch (takechar)
      00032B 8E 04            [24] 1141 	mov	ar4,r6
      00032D 8F 05            [24] 1142 	mov	ar5,r7
      00032F C3               [12] 1143 	clr	c
      000330 EC               [12] 1144 	mov	a,r4
      000331 94 30            [12] 1145 	subb	a,#0x30
      000333 ED               [12] 1146 	mov	a,r5
      000334 94 00            [12] 1147 	subb	a,#0x00
      000336 50 03            [24] 1148 	jnc	00150$
      000338 02r03rCF         [24] 1149 	ljmp	00113$
      00033B                       1150 00150$:
      00033B C3               [12] 1151 	clr	c
      00033C 74 37            [12] 1152 	mov	a,#0x37
      00033E 9C               [12] 1153 	subb	a,r4
      00033F E4               [12] 1154 	clr	a
      000340 9D               [12] 1155 	subb	a,r5
      000341 50 03            [24] 1156 	jnc	00151$
      000343 02r03rCF         [24] 1157 	ljmp	00113$
      000346                       1158 00151$:
      000346 EE               [12] 1159 	mov	a,r6
      000347 24 D0            [12] 1160 	add	a,#0xd0
      000349 FE               [12] 1161 	mov	r6,a
      00034A 24 0A            [12] 1162 	add	a,#(00152$-3-.)
      00034C 83               [24] 1163 	movc	a,@a+pc
      00034D F5 82            [12] 1164 	mov	dpl,a
      00034F EE               [12] 1165 	mov	a,r6
      000350 24 0C            [12] 1166 	add	a,#(00153$-3-.)
      000352 83               [24] 1167 	movc	a,@a+pc
      000353 F5 83            [12] 1168 	mov	dph,a
      000355 E4               [12] 1169 	clr	a
      000356 73               [24] 1170 	jmp	@a+dptr
      000357                       1171 00152$:
      000357r67                    1172 	.db	00105$
      000358r74                    1173 	.db	00106$
      000359r81                    1174 	.db	00107$
      00035Ar8E                    1175 	.db	00108$
      00035Br9B                    1176 	.db	00109$
      00035CrA8                    1177 	.db	00110$
      00035DrB5                    1178 	.db	00111$
      00035ErC2                    1179 	.db	00112$
      00035F                       1180 00153$:
      00035Fs03                    1181 	.db	00105$>>8
      000360s03                    1182 	.db	00106$>>8
      000361s03                    1183 	.db	00107$>>8
      000362s03                    1184 	.db	00108$>>8
      000363s03                    1185 	.db	00109$>>8
      000364s03                    1186 	.db	00110$>>8
      000365s03                    1187 	.db	00111$>>8
      000366s03                    1188 	.db	00112$>>8
                                   1189 ;	menu.c:158: case '0': {
      000367                       1190 00105$:
                                   1191 ;	menu.c:159: blocknumber = 0xA0;
      000367 90r00r04         [24] 1192 	mov	dptr,#_Read_Byte_blocknumber_65536_71
      00036A 74 A0            [12] 1193 	mov	a,#0xa0
      00036C F0               [24] 1194 	movx	@dptr,a
                                   1195 ;	menu.c:160: blocknumberread = 0xA1;
      00036D 90r00r05         [24] 1196 	mov	dptr,#_Read_Byte_blocknumberread_65536_71
      000370 04               [12] 1197 	inc	a
      000371 F0               [24] 1198 	movx	@dptr,a
                                   1199 ;	menu.c:161: break;
                                   1200 ;	menu.c:163: case '1': {
      000372 80 70            [24] 1201 	sjmp	00114$
      000374                       1202 00106$:
                                   1203 ;	menu.c:164: blocknumber = 0xA2;
      000374 90r00r04         [24] 1204 	mov	dptr,#_Read_Byte_blocknumber_65536_71
      000377 74 A2            [12] 1205 	mov	a,#0xa2
      000379 F0               [24] 1206 	movx	@dptr,a
                                   1207 ;	menu.c:165: blocknumberread = 0xA3;
      00037A 90r00r05         [24] 1208 	mov	dptr,#_Read_Byte_blocknumberread_65536_71
      00037D 04               [12] 1209 	inc	a
      00037E F0               [24] 1210 	movx	@dptr,a
                                   1211 ;	menu.c:166: break;
                                   1212 ;	menu.c:168: case '2': {
      00037F 80 63            [24] 1213 	sjmp	00114$
      000381                       1214 00107$:
                                   1215 ;	menu.c:169: blocknumber = 0xA4;
      000381 90r00r04         [24] 1216 	mov	dptr,#_Read_Byte_blocknumber_65536_71
      000384 74 A4            [12] 1217 	mov	a,#0xa4
      000386 F0               [24] 1218 	movx	@dptr,a
                                   1219 ;	menu.c:170: blocknumberread = 0xA5;
      000387 90r00r05         [24] 1220 	mov	dptr,#_Read_Byte_blocknumberread_65536_71
      00038A 04               [12] 1221 	inc	a
      00038B F0               [24] 1222 	movx	@dptr,a
                                   1223 ;	menu.c:171: break;
                                   1224 ;	menu.c:173: case '3': {
      00038C 80 56            [24] 1225 	sjmp	00114$
      00038E                       1226 00108$:
                                   1227 ;	menu.c:174: blocknumber = 0xA6;
      00038E 90r00r04         [24] 1228 	mov	dptr,#_Read_Byte_blocknumber_65536_71
      000391 74 A6            [12] 1229 	mov	a,#0xa6
      000393 F0               [24] 1230 	movx	@dptr,a
                                   1231 ;	menu.c:175: blocknumberread = 0xA7;
      000394 90r00r05         [24] 1232 	mov	dptr,#_Read_Byte_blocknumberread_65536_71
      000397 04               [12] 1233 	inc	a
      000398 F0               [24] 1234 	movx	@dptr,a
                                   1235 ;	menu.c:176: break;
                                   1236 ;	menu.c:178: case '4': {
      000399 80 49            [24] 1237 	sjmp	00114$
      00039B                       1238 00109$:
                                   1239 ;	menu.c:179: blocknumber = 0xA8;
      00039B 90r00r04         [24] 1240 	mov	dptr,#_Read_Byte_blocknumber_65536_71
      00039E 74 A8            [12] 1241 	mov	a,#0xa8
      0003A0 F0               [24] 1242 	movx	@dptr,a
                                   1243 ;	menu.c:180: blocknumberread = 0xA9;
      0003A1 90r00r05         [24] 1244 	mov	dptr,#_Read_Byte_blocknumberread_65536_71
      0003A4 04               [12] 1245 	inc	a
      0003A5 F0               [24] 1246 	movx	@dptr,a
                                   1247 ;	menu.c:181: break;
                                   1248 ;	menu.c:183: case '5': {
      0003A6 80 3C            [24] 1249 	sjmp	00114$
      0003A8                       1250 00110$:
                                   1251 ;	menu.c:184: blocknumber = 0xAA;
      0003A8 90r00r04         [24] 1252 	mov	dptr,#_Read_Byte_blocknumber_65536_71
      0003AB 74 AA            [12] 1253 	mov	a,#0xaa
      0003AD F0               [24] 1254 	movx	@dptr,a
                                   1255 ;	menu.c:185: blocknumberread = 0xAB;
      0003AE 90r00r05         [24] 1256 	mov	dptr,#_Read_Byte_blocknumberread_65536_71
      0003B1 04               [12] 1257 	inc	a
      0003B2 F0               [24] 1258 	movx	@dptr,a
                                   1259 ;	menu.c:186: break;
                                   1260 ;	menu.c:188: case '6': {
      0003B3 80 2F            [24] 1261 	sjmp	00114$
      0003B5                       1262 00111$:
                                   1263 ;	menu.c:189: blocknumber = 0xAC;
      0003B5 90r00r04         [24] 1264 	mov	dptr,#_Read_Byte_blocknumber_65536_71
      0003B8 74 AC            [12] 1265 	mov	a,#0xac
      0003BA F0               [24] 1266 	movx	@dptr,a
                                   1267 ;	menu.c:190: blocknumberread = 0xAD;
      0003BB 90r00r05         [24] 1268 	mov	dptr,#_Read_Byte_blocknumberread_65536_71
      0003BE 04               [12] 1269 	inc	a
      0003BF F0               [24] 1270 	movx	@dptr,a
                                   1271 ;	menu.c:191: break;
                                   1272 ;	menu.c:193: case '7': {
      0003C0 80 22            [24] 1273 	sjmp	00114$
      0003C2                       1274 00112$:
                                   1275 ;	menu.c:194: blocknumber = 0xAE;
      0003C2 90r00r04         [24] 1276 	mov	dptr,#_Read_Byte_blocknumber_65536_71
      0003C5 74 AE            [12] 1277 	mov	a,#0xae
      0003C7 F0               [24] 1278 	movx	@dptr,a
                                   1279 ;	menu.c:195: blocknumberread = 0xAF;
      0003C8 90r00r05         [24] 1280 	mov	dptr,#_Read_Byte_blocknumberread_65536_71
      0003CB 04               [12] 1281 	inc	a
      0003CC F0               [24] 1282 	movx	@dptr,a
                                   1283 ;	menu.c:196: break;
                                   1284 ;	menu.c:198: default: {
      0003CD 80 15            [24] 1285 	sjmp	00114$
      0003CF                       1286 00113$:
                                   1287 ;	menu.c:199: printf("\n \r Enter correct block number between 0 to 7\ n");
      0003CF 74r82            [12] 1288 	mov	a,#___str_10
      0003D1 C0 E0            [24] 1289 	push	acc
      0003D3 74s02            [12] 1290 	mov	a,#(___str_10 >> 8)
      0003D5 C0 E0            [24] 1291 	push	acc
      0003D7 74 80            [12] 1292 	mov	a,#0x80
      0003D9 C0 E0            [24] 1293 	push	acc
      0003DB 12r00r00         [24] 1294 	lcall	_printf
      0003DE 15 81            [12] 1295 	dec	sp
      0003E0 15 81            [12] 1296 	dec	sp
      0003E2 15 81            [12] 1297 	dec	sp
                                   1298 ;	menu.c:203: }
      0003E4                       1299 00114$:
                                   1300 ;	menu.c:204: printf("\n \r Control Byte for the block number is : %X",blocknumberread);
      0003E4 90r00r05         [24] 1301 	mov	dptr,#_Read_Byte_blocknumberread_65536_71
      0003E7 E0               [24] 1302 	movx	a,@dptr
      0003E8 FF               [12] 1303 	mov	r7,a
      0003E9 FD               [12] 1304 	mov	r5,a
      0003EA 7E 00            [12] 1305 	mov	r6,#0x00
      0003EC C0 07            [24] 1306 	push	ar7
      0003EE C0 05            [24] 1307 	push	ar5
      0003F0 C0 06            [24] 1308 	push	ar6
      0003F2 74rB2            [12] 1309 	mov	a,#___str_11
      0003F4 C0 E0            [24] 1310 	push	acc
      0003F6 74s02            [12] 1311 	mov	a,#(___str_11 >> 8)
      0003F8 C0 E0            [24] 1312 	push	acc
      0003FA 74 80            [12] 1313 	mov	a,#0x80
      0003FC C0 E0            [24] 1314 	push	acc
      0003FE 12r00r00         [24] 1315 	lcall	_printf
      000401 E5 81            [12] 1316 	mov	a,sp
      000403 24 FB            [12] 1317 	add	a,#0xfb
      000405 F5 81            [12] 1318 	mov	sp,a
      000407 D0 07            [24] 1319 	pop	ar7
                                   1320 ;	menu.c:207: while(wordaddress==0)
      000409                       1321 00115$:
      000409 90r00r06         [24] 1322 	mov	dptr,#_Read_Byte_wordaddress_65536_71
      00040C E0               [24] 1323 	movx	a,@dptr
      00040D FE               [12] 1324 	mov	r6,a
      00040E 70 24            [24] 1325 	jnz	00117$
                                   1326 ;	menu.c:209: printf("\n \r Enter a Word Address between 00 to FF:  ");
      000410 C0 07            [24] 1327 	push	ar7
      000412 74rE0            [12] 1328 	mov	a,#___str_12
      000414 C0 E0            [24] 1329 	push	acc
      000416 74s02            [12] 1330 	mov	a,#(___str_12 >> 8)
      000418 C0 E0            [24] 1331 	push	acc
      00041A 74 80            [12] 1332 	mov	a,#0x80
      00041C C0 E0            [24] 1333 	push	acc
      00041E 12r00r00         [24] 1334 	lcall	_printf
      000421 15 81            [12] 1335 	dec	sp
      000423 15 81            [12] 1336 	dec	sp
      000425 15 81            [12] 1337 	dec	sp
                                   1338 ;	menu.c:210: wordaddress = Convert_Char_to_dec_val();
      000427 12r0Cr66         [24] 1339 	lcall	_Convert_Char_to_dec_val
      00042A E5 82            [12] 1340 	mov	a,dpl
      00042C D0 07            [24] 1341 	pop	ar7
      00042E 90r00r06         [24] 1342 	mov	dptr,#_Read_Byte_wordaddress_65536_71
      000431 F0               [24] 1343 	movx	@dptr,a
      000432 80 D5            [24] 1344 	sjmp	00115$
      000434                       1345 00117$:
                                   1346 ;	menu.c:214: StartI2C();
      000434 C0 07            [24] 1347 	push	ar7
      000436 C0 06            [24] 1348 	push	ar6
      000438 12r00r00         [24] 1349 	lcall	_StartI2C
                                   1350 ;	menu.c:216: myread= DataSendI2C(blocknumber);
      00043B 90r00r04         [24] 1351 	mov	dptr,#_Read_Byte_blocknumber_65536_71
      00043E E0               [24] 1352 	movx	a,@dptr
      00043F F5 82            [12] 1353 	mov	dpl,a
      000441 12r00r00         [24] 1354 	lcall	_DataSendI2C
      000444 D0 06            [24] 1355 	pop	ar6
                                   1356 ;	menu.c:218: myread = DataSendI2C(wordaddress);
      000446 8E 82            [24] 1357 	mov	dpl,r6
      000448 C0 06            [24] 1358 	push	ar6
      00044A 12r00r00         [24] 1359 	lcall	_DataSendI2C
                                   1360 ;	menu.c:220: RestartI2C();
      00044D 12r00r00         [24] 1361 	lcall	_RestartI2C
      000450 D0 06            [24] 1362 	pop	ar6
      000452 D0 07            [24] 1363 	pop	ar7
                                   1364 ;	menu.c:221: myread= DataSendI2C(blocknumberread);
      000454 8F 82            [24] 1365 	mov	dpl,r7
      000456 C0 06            [24] 1366 	push	ar6
      000458 12r00r00         [24] 1367 	lcall	_DataSendI2C
                                   1368 ;	menu.c:222: readdataprint = I2CRead();
      00045B 12r00r00         [24] 1369 	lcall	_I2CRead
      00045E AF 82            [24] 1370 	mov	r7,dpl
      000460 D0 06            [24] 1371 	pop	ar6
                                   1372 ;	menu.c:223: SendNACK();
      000462 C0 07            [24] 1373 	push	ar7
      000464 C0 06            [24] 1374 	push	ar6
      000466 12r00r00         [24] 1375 	lcall	_SendNACK
                                   1376 ;	menu.c:224: StopI2C();
      000469 12r00r00         [24] 1377 	lcall	_StopI2C
      00046C D0 06            [24] 1378 	pop	ar6
                                   1379 ;	menu.c:225: printf("\n \r Address 0x%x --> %x",wordaddress,readdataprint);
      00046E 7D 00            [12] 1380 	mov	r5,#0x00
      000470 7C 00            [12] 1381 	mov	r4,#0x00
      000472 C0 05            [24] 1382 	push	ar5
      000474 C0 06            [24] 1383 	push	ar6
      000476 C0 04            [24] 1384 	push	ar4
      000478 74r65            [12] 1385 	mov	a,#___str_15
      00047A C0 E0            [24] 1386 	push	acc
      00047C 74s03            [12] 1387 	mov	a,#(___str_15 >> 8)
      00047E C0 E0            [24] 1388 	push	acc
      000480 74 80            [12] 1389 	mov	a,#0x80
      000482 C0 E0            [24] 1390 	push	acc
      000484 12r00r00         [24] 1391 	lcall	_printf
      000487 E5 81            [12] 1392 	mov	a,sp
      000489 24 F9            [12] 1393 	add	a,#0xf9
      00048B F5 81            [12] 1394 	mov	sp,a
                                   1395 ;	menu.c:228: }
      00048D 22               [24] 1396 	ret
                                   1397 ;------------------------------------------------------------
                                   1398 ;Allocation info for local variables in function 'Hex_Dump'
                                   1399 ;------------------------------------------------------------
                                   1400 ;sloc0                     Allocated with name '_Hex_Dump_sloc0_1_0'
                                   1401 ;sloc1                     Allocated with name '_Hex_Dump_sloc1_1_0'
                                   1402 ;sloc2                     Allocated with name '_Hex_Dump_sloc2_1_0'
                                   1403 ;sloc3                     Allocated with name '_Hex_Dump_sloc3_1_0'
                                   1404 ;sloc4                     Allocated with name '_Hex_Dump_sloc4_1_0'
                                   1405 ;sloc5                     Allocated with name '_Hex_Dump_sloc5_1_0'
                                   1406 ;sloc6                     Allocated with name '_Hex_Dump_sloc6_1_0'
                                   1407 ;sloc7                     Allocated with name '_Hex_Dump_sloc7_1_0'
                                   1408 ;sloc8                     Allocated with name '_Hex_Dump_sloc8_1_0'
                                   1409 ;sloc9                     Allocated with name '_Hex_Dump_sloc9_1_0'
                                   1410 ;blocknumber               Allocated with name '_Hex_Dump_blocknumber_65536_85'
                                   1411 ;blocknumberread           Allocated with name '_Hex_Dump_blocknumberread_65536_85'
                                   1412 ;blocknumberend            Allocated with name '_Hex_Dump_blocknumberend_65536_85'
                                   1413 ;blocknumberreadend        Allocated with name '_Hex_Dump_blocknumberreadend_65536_85'
                                   1414 ;startaddress              Allocated with name '_Hex_Dump_startaddress_65536_85'
                                   1415 ;endaddress                Allocated with name '_Hex_Dump_endaddress_65536_85'
                                   1416 ;no_of_data                Allocated with name '_Hex_Dump_no_of_data_65536_85'
                                   1417 ;count                     Allocated with name '_Hex_Dump_count_65536_85'
                                   1418 ;i                         Allocated with name '_Hex_Dump_i_65536_85'
                                   1419 ;readdataprint             Allocated with name '_Hex_Dump_readdataprint_65536_85'
                                   1420 ;takechar                  Allocated with name '_Hex_Dump_takechar_65536_85'
                                   1421 ;takechar1                 Allocated with name '_Hex_Dump_takechar1_65537_98'
                                   1422 ;myread                    Allocated with name '_Hex_Dump_myread_262146_114'
                                   1423 ;j                         Allocated with name '_Hex_Dump_j_393217_120'
                                   1424 ;myread                    Allocated with name '_Hex_Dump_myread_458754_122'
                                   1425 ;j                         Allocated with name '_Hex_Dump_j_393217_125'
                                   1426 ;myread                    Allocated with name '_Hex_Dump_myread_458754_127'
                                   1427 ;j                         Allocated with name '_Hex_Dump_j_393217_130'
                                   1428 ;myread                    Allocated with name '_Hex_Dump_myread_458754_132'
                                   1429 ;------------------------------------------------------------
                                   1430 ;	menu.c:237: void Hex_Dump()
                                   1431 ;	-----------------------------------------
                                   1432 ;	 function Hex_Dump
                                   1433 ;	-----------------------------------------
      00048E                       1434 _Hex_Dump:
                                   1435 ;	menu.c:243: uint8_t startaddress=0;
      00048E 90r00r0B         [24] 1436 	mov	dptr,#_Hex_Dump_startaddress_65536_85
      000491 E4               [12] 1437 	clr	a
      000492 F0               [24] 1438 	movx	@dptr,a
                                   1439 ;	menu.c:244: uint8_t endaddress=0;
      000493 90r00r0C         [24] 1440 	mov	dptr,#_Hex_Dump_endaddress_65536_85
      000496 F0               [24] 1441 	movx	@dptr,a
                                   1442 ;	menu.c:246: uint8_t count =0;
      000497 90r00r0D         [24] 1443 	mov	dptr,#_Hex_Dump_count_65536_85
      00049A F0               [24] 1444 	movx	@dptr,a
                                   1445 ;	menu.c:253: do{
      00049B                       1446 00102$:
                                   1447 ;	menu.c:254: printf_tiny("\n \rEnter a valid starting address block from 0 to 7 \n \r");
      00049B 74r28            [12] 1448 	mov	a,#___str_8
      00049D C0 E0            [24] 1449 	push	acc
      00049F 74s02            [12] 1450 	mov	a,#(___str_8 >> 8)
      0004A1 C0 E0            [24] 1451 	push	acc
      0004A3 12r00r00         [24] 1452 	lcall	_printf_tiny
      0004A6 15 81            [12] 1453 	dec	sp
      0004A8 15 81            [12] 1454 	dec	sp
                                   1455 ;	menu.c:255: takechar = getchar();
      0004AA 12r00r00         [24] 1456 	lcall	_getchar
                                   1457 ;	menu.c:256: putchar(takechar);
      0004AD AE 82            [24] 1458 	mov	r6,dpl
      0004AF AF 83            [24] 1459 	mov  r7,dph
      0004B1 C0 07            [24] 1460 	push	ar7
      0004B3 C0 06            [24] 1461 	push	ar6
      0004B5 12r00r00         [24] 1462 	lcall	_putchar
      0004B8 D0 06            [24] 1463 	pop	ar6
      0004BA D0 07            [24] 1464 	pop	ar7
                                   1465 ;	menu.c:257: printf("\n \r You Entered block number: %d ",takechar-48);
      0004BC EE               [12] 1466 	mov	a,r6
      0004BD 24 D0            [12] 1467 	add	a,#0xd0
      0004BF FC               [12] 1468 	mov	r4,a
      0004C0 EF               [12] 1469 	mov	a,r7
      0004C1 34 FF            [12] 1470 	addc	a,#0xff
      0004C3 FD               [12] 1471 	mov	r5,a
      0004C4 C0 07            [24] 1472 	push	ar7
      0004C6 C0 06            [24] 1473 	push	ar6
      0004C8 C0 04            [24] 1474 	push	ar4
      0004CA C0 05            [24] 1475 	push	ar5
      0004CC 74r60            [12] 1476 	mov	a,#___str_9
      0004CE C0 E0            [24] 1477 	push	acc
      0004D0 74s02            [12] 1478 	mov	a,#(___str_9 >> 8)
      0004D2 C0 E0            [24] 1479 	push	acc
      0004D4 74 80            [12] 1480 	mov	a,#0x80
      0004D6 C0 E0            [24] 1481 	push	acc
      0004D8 12r00r00         [24] 1482 	lcall	_printf
      0004DB E5 81            [12] 1483 	mov	a,sp
      0004DD 24 FB            [12] 1484 	add	a,#0xfb
      0004DF F5 81            [12] 1485 	mov	sp,a
      0004E1 D0 06            [24] 1486 	pop	ar6
      0004E3 D0 07            [24] 1487 	pop	ar7
                                   1488 ;	menu.c:258: }while (takechar< 48 || takechar >57 );
      0004E5 8E 04            [24] 1489 	mov	ar4,r6
      0004E7 8F 05            [24] 1490 	mov	ar5,r7
      0004E9 C3               [12] 1491 	clr	c
      0004EA EC               [12] 1492 	mov	a,r4
      0004EB 94 30            [12] 1493 	subb	a,#0x30
      0004ED ED               [12] 1494 	mov	a,r5
      0004EE 94 00            [12] 1495 	subb	a,#0x00
      0004F0 40 A9            [24] 1496 	jc	00102$
      0004F2 8E 04            [24] 1497 	mov	ar4,r6
      0004F4 8F 05            [24] 1498 	mov	ar5,r7
      0004F6 C3               [12] 1499 	clr	c
      0004F7 74 39            [12] 1500 	mov	a,#0x39
      0004F9 9C               [12] 1501 	subb	a,r4
      0004FA E4               [12] 1502 	clr	a
      0004FB 9D               [12] 1503 	subb	a,r5
      0004FC 40 9D            [24] 1504 	jc	00102$
                                   1505 ;	menu.c:260: switch (takechar)    // switch case for entering block number
      0004FE 8E 04            [24] 1506 	mov	ar4,r6
      000500 8F 05            [24] 1507 	mov	ar5,r7
      000502 C3               [12] 1508 	clr	c
      000503 EC               [12] 1509 	mov	a,r4
      000504 94 30            [12] 1510 	subb	a,#0x30
      000506 ED               [12] 1511 	mov	a,r5
      000507 94 00            [12] 1512 	subb	a,#0x00
      000509 50 03            [24] 1513 	jnc	00320$
      00050B 02r05rA2         [24] 1514 	ljmp	00113$
      00050E                       1515 00320$:
      00050E C3               [12] 1516 	clr	c
      00050F 74 37            [12] 1517 	mov	a,#0x37
      000511 9C               [12] 1518 	subb	a,r4
      000512 E4               [12] 1519 	clr	a
      000513 9D               [12] 1520 	subb	a,r5
      000514 50 03            [24] 1521 	jnc	00321$
      000516 02r05rA2         [24] 1522 	ljmp	00113$
      000519                       1523 00321$:
      000519 EE               [12] 1524 	mov	a,r6
      00051A 24 D0            [12] 1525 	add	a,#0xd0
      00051C FD               [12] 1526 	mov	r5,a
      00051D 24 0A            [12] 1527 	add	a,#(00322$-3-.)
      00051F 83               [24] 1528 	movc	a,@a+pc
      000520 F5 82            [12] 1529 	mov	dpl,a
      000522 ED               [12] 1530 	mov	a,r5
      000523 24 0C            [12] 1531 	add	a,#(00323$-3-.)
      000525 83               [24] 1532 	movc	a,@a+pc
      000526 F5 83            [12] 1533 	mov	dph,a
      000528 E4               [12] 1534 	clr	a
      000529 73               [24] 1535 	jmp	@a+dptr
      00052A                       1536 00322$:
      00052Ar3A                    1537 	.db	00105$
      00052Br47                    1538 	.db	00106$
      00052Cr54                    1539 	.db	00107$
      00052Dr61                    1540 	.db	00108$
      00052Er6E                    1541 	.db	00109$
      00052Fr7B                    1542 	.db	00110$
      000530r88                    1543 	.db	00111$
      000531r95                    1544 	.db	00112$
      000532                       1545 00323$:
      000532s05                    1546 	.db	00105$>>8
      000533s05                    1547 	.db	00106$>>8
      000534s05                    1548 	.db	00107$>>8
      000535s05                    1549 	.db	00108$>>8
      000536s05                    1550 	.db	00109$>>8
      000537s05                    1551 	.db	00110$>>8
      000538s05                    1552 	.db	00111$>>8
      000539s05                    1553 	.db	00112$>>8
                                   1554 ;	menu.c:262: case '0': {
      00053A                       1555 00105$:
                                   1556 ;	menu.c:263: blocknumber = 0xA0;
      00053A 90r00r07         [24] 1557 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      00053D 74 A0            [12] 1558 	mov	a,#0xa0
      00053F F0               [24] 1559 	movx	@dptr,a
                                   1560 ;	menu.c:264: blocknumberread = 0xA1;
      000540 90r00r08         [24] 1561 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      000543 04               [12] 1562 	inc	a
      000544 F0               [24] 1563 	movx	@dptr,a
                                   1564 ;	menu.c:265: break;
                                   1565 ;	menu.c:267: case '1': {
      000545 80 78            [24] 1566 	sjmp	00114$
      000547                       1567 00106$:
                                   1568 ;	menu.c:268: blocknumber = 0xA2;
      000547 90r00r07         [24] 1569 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      00054A 74 A2            [12] 1570 	mov	a,#0xa2
      00054C F0               [24] 1571 	movx	@dptr,a
                                   1572 ;	menu.c:269: blocknumberread = 0xA3;
      00054D 90r00r08         [24] 1573 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      000550 04               [12] 1574 	inc	a
      000551 F0               [24] 1575 	movx	@dptr,a
                                   1576 ;	menu.c:270: break;
                                   1577 ;	menu.c:272: case '2': {
      000552 80 6B            [24] 1578 	sjmp	00114$
      000554                       1579 00107$:
                                   1580 ;	menu.c:273: blocknumber = 0xA4;
      000554 90r00r07         [24] 1581 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      000557 74 A4            [12] 1582 	mov	a,#0xa4
      000559 F0               [24] 1583 	movx	@dptr,a
                                   1584 ;	menu.c:274: blocknumberread = 0xA5;
      00055A 90r00r08         [24] 1585 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      00055D 04               [12] 1586 	inc	a
      00055E F0               [24] 1587 	movx	@dptr,a
                                   1588 ;	menu.c:275: break;
                                   1589 ;	menu.c:277: case '3': {
      00055F 80 5E            [24] 1590 	sjmp	00114$
      000561                       1591 00108$:
                                   1592 ;	menu.c:278: blocknumber = 0xA6;
      000561 90r00r07         [24] 1593 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      000564 74 A6            [12] 1594 	mov	a,#0xa6
      000566 F0               [24] 1595 	movx	@dptr,a
                                   1596 ;	menu.c:279: blocknumberread = 0xA7;
      000567 90r00r08         [24] 1597 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      00056A 04               [12] 1598 	inc	a
      00056B F0               [24] 1599 	movx	@dptr,a
                                   1600 ;	menu.c:280: break;
                                   1601 ;	menu.c:282: case '4': {
      00056C 80 51            [24] 1602 	sjmp	00114$
      00056E                       1603 00109$:
                                   1604 ;	menu.c:283: blocknumber = 0xA8;
      00056E 90r00r07         [24] 1605 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      000571 74 A8            [12] 1606 	mov	a,#0xa8
      000573 F0               [24] 1607 	movx	@dptr,a
                                   1608 ;	menu.c:284: blocknumberread = 0xA9;
      000574 90r00r08         [24] 1609 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      000577 04               [12] 1610 	inc	a
      000578 F0               [24] 1611 	movx	@dptr,a
                                   1612 ;	menu.c:285: break;
                                   1613 ;	menu.c:287: case '5': {
      000579 80 44            [24] 1614 	sjmp	00114$
      00057B                       1615 00110$:
                                   1616 ;	menu.c:288: blocknumber = 0xAA;
      00057B 90r00r07         [24] 1617 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      00057E 74 AA            [12] 1618 	mov	a,#0xaa
      000580 F0               [24] 1619 	movx	@dptr,a
                                   1620 ;	menu.c:289: blocknumberread = 0xAB;
      000581 90r00r08         [24] 1621 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      000584 04               [12] 1622 	inc	a
      000585 F0               [24] 1623 	movx	@dptr,a
                                   1624 ;	menu.c:290: break;
                                   1625 ;	menu.c:292: case '6': {
      000586 80 37            [24] 1626 	sjmp	00114$
      000588                       1627 00111$:
                                   1628 ;	menu.c:293: blocknumber = 0xAC;
      000588 90r00r07         [24] 1629 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      00058B 74 AC            [12] 1630 	mov	a,#0xac
      00058D F0               [24] 1631 	movx	@dptr,a
                                   1632 ;	menu.c:294: blocknumberread = 0xAD;
      00058E 90r00r08         [24] 1633 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      000591 04               [12] 1634 	inc	a
      000592 F0               [24] 1635 	movx	@dptr,a
                                   1636 ;	menu.c:295: break;
                                   1637 ;	menu.c:297: case '7': {
      000593 80 2A            [24] 1638 	sjmp	00114$
      000595                       1639 00112$:
                                   1640 ;	menu.c:298: blocknumber = 0xAE;
      000595 90r00r07         [24] 1641 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      000598 74 AE            [12] 1642 	mov	a,#0xae
      00059A F0               [24] 1643 	movx	@dptr,a
                                   1644 ;	menu.c:299: blocknumberread = 0xAF;
      00059B 90r00r08         [24] 1645 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      00059E 04               [12] 1646 	inc	a
      00059F F0               [24] 1647 	movx	@dptr,a
                                   1648 ;	menu.c:300: break;
                                   1649 ;	menu.c:302: default: {
      0005A0 80 1D            [24] 1650 	sjmp	00114$
      0005A2                       1651 00113$:
                                   1652 ;	menu.c:303: printf("\n \r Enter correct block number between 0 to 7\ n");
      0005A2 C0 07            [24] 1653 	push	ar7
      0005A4 C0 06            [24] 1654 	push	ar6
      0005A6 74r82            [12] 1655 	mov	a,#___str_10
      0005A8 C0 E0            [24] 1656 	push	acc
      0005AA 74s02            [12] 1657 	mov	a,#(___str_10 >> 8)
      0005AC C0 E0            [24] 1658 	push	acc
      0005AE 74 80            [12] 1659 	mov	a,#0x80
      0005B0 C0 E0            [24] 1660 	push	acc
      0005B2 12r00r00         [24] 1661 	lcall	_printf
      0005B5 15 81            [12] 1662 	dec	sp
      0005B7 15 81            [12] 1663 	dec	sp
      0005B9 15 81            [12] 1664 	dec	sp
      0005BB D0 06            [24] 1665 	pop	ar6
      0005BD D0 07            [24] 1666 	pop	ar7
                                   1667 ;	menu.c:307: }
      0005BF                       1668 00114$:
                                   1669 ;	menu.c:308: printf("\n \r Control Byte for the block number is : %X",blocknumberread);
      0005BF 90r00r08         [24] 1670 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      0005C2 E0               [24] 1671 	movx	a,@dptr
      0005C3 FD               [12] 1672 	mov	r5,a
      0005C4 7C 00            [12] 1673 	mov	r4,#0x00
      0005C6 C0 07            [24] 1674 	push	ar7
      0005C8 C0 06            [24] 1675 	push	ar6
      0005CA C0 05            [24] 1676 	push	ar5
      0005CC C0 04            [24] 1677 	push	ar4
      0005CE 74rB2            [12] 1678 	mov	a,#___str_11
      0005D0 C0 E0            [24] 1679 	push	acc
      0005D2 74s02            [12] 1680 	mov	a,#(___str_11 >> 8)
      0005D4 C0 E0            [24] 1681 	push	acc
      0005D6 74 80            [12] 1682 	mov	a,#0x80
      0005D8 C0 E0            [24] 1683 	push	acc
      0005DA 12r00r00         [24] 1684 	lcall	_printf
      0005DD E5 81            [12] 1685 	mov	a,sp
      0005DF 24 FB            [12] 1686 	add	a,#0xfb
      0005E1 F5 81            [12] 1687 	mov	sp,a
      0005E3 D0 06            [24] 1688 	pop	ar6
      0005E5 D0 07            [24] 1689 	pop	ar7
                                   1690 ;	menu.c:312: while(startaddress==0)
      0005E7                       1691 00115$:
      0005E7 90r00r0B         [24] 1692 	mov	dptr,#_Hex_Dump_startaddress_65536_85
      0005EA E0               [24] 1693 	movx	a,@dptr
      0005EB 70 28            [24] 1694 	jnz	00184$
                                   1695 ;	menu.c:314: printf("\n \r Enter a Start Address between 00 to FF:  ");
      0005ED C0 07            [24] 1696 	push	ar7
      0005EF C0 06            [24] 1697 	push	ar6
      0005F1 74r7D            [12] 1698 	mov	a,#___str_16
      0005F3 C0 E0            [24] 1699 	push	acc
      0005F5 74s03            [12] 1700 	mov	a,#(___str_16 >> 8)
      0005F7 C0 E0            [24] 1701 	push	acc
      0005F9 74 80            [12] 1702 	mov	a,#0x80
      0005FB C0 E0            [24] 1703 	push	acc
      0005FD 12r00r00         [24] 1704 	lcall	_printf
      000600 15 81            [12] 1705 	dec	sp
      000602 15 81            [12] 1706 	dec	sp
      000604 15 81            [12] 1707 	dec	sp
                                   1708 ;	menu.c:315: startaddress = Convert_Char_to_dec_val();
      000606 12r0Cr66         [24] 1709 	lcall	_Convert_Char_to_dec_val
      000609 E5 82            [12] 1710 	mov	a,dpl
      00060B D0 06            [24] 1711 	pop	ar6
      00060D D0 07            [24] 1712 	pop	ar7
      00060F 90r00r0B         [24] 1713 	mov	dptr,#_Hex_Dump_startaddress_65536_85
      000612 F0               [24] 1714 	movx	@dptr,a
                                   1715 ;	menu.c:321: do{
      000613 80 D2            [24] 1716 	sjmp	00115$
      000615                       1717 00184$:
      000615                       1718 00119$:
                                   1719 ;	menu.c:322: printf_tiny("\n \rEnter a valid ending address block from 0 to 7 \n \r");
      000615 C0 07            [24] 1720 	push	ar7
      000617 C0 06            [24] 1721 	push	ar6
      000619 74rAB            [12] 1722 	mov	a,#___str_17
      00061B C0 E0            [24] 1723 	push	acc
      00061D 74s03            [12] 1724 	mov	a,#(___str_17 >> 8)
      00061F C0 E0            [24] 1725 	push	acc
      000621 12r00r00         [24] 1726 	lcall	_printf_tiny
      000624 15 81            [12] 1727 	dec	sp
      000626 15 81            [12] 1728 	dec	sp
                                   1729 ;	menu.c:323: takechar1 = getchar();
      000628 12r00r00         [24] 1730 	lcall	_getchar
                                   1731 ;	menu.c:324: putchar(takechar1);
      00062B AC 82            [24] 1732 	mov	r4,dpl
      00062D AD 83            [24] 1733 	mov  r5,dph
      00062F C0 05            [24] 1734 	push	ar5
      000631 C0 04            [24] 1735 	push	ar4
      000633 12r00r00         [24] 1736 	lcall	_putchar
      000636 D0 04            [24] 1737 	pop	ar4
      000638 D0 05            [24] 1738 	pop	ar5
                                   1739 ;	menu.c:325: printf("\n \r You Entered block number: %d ",takechar1-48);
      00063A EC               [12] 1740 	mov	a,r4
      00063B 24 D0            [12] 1741 	add	a,#0xd0
      00063D FA               [12] 1742 	mov	r2,a
      00063E ED               [12] 1743 	mov	a,r5
      00063F 34 FF            [12] 1744 	addc	a,#0xff
      000641 FB               [12] 1745 	mov	r3,a
      000642 C0 05            [24] 1746 	push	ar5
      000644 C0 04            [24] 1747 	push	ar4
      000646 C0 02            [24] 1748 	push	ar2
      000648 C0 03            [24] 1749 	push	ar3
      00064A 74r60            [12] 1750 	mov	a,#___str_9
      00064C C0 E0            [24] 1751 	push	acc
      00064E 74s02            [12] 1752 	mov	a,#(___str_9 >> 8)
      000650 C0 E0            [24] 1753 	push	acc
      000652 74 80            [12] 1754 	mov	a,#0x80
      000654 C0 E0            [24] 1755 	push	acc
      000656 12r00r00         [24] 1756 	lcall	_printf
      000659 E5 81            [12] 1757 	mov	a,sp
      00065B 24 FB            [12] 1758 	add	a,#0xfb
      00065D F5 81            [12] 1759 	mov	sp,a
      00065F D0 04            [24] 1760 	pop	ar4
      000661 D0 05            [24] 1761 	pop	ar5
      000663 D0 06            [24] 1762 	pop	ar6
      000665 D0 07            [24] 1763 	pop	ar7
                                   1764 ;	menu.c:326: }while (takechar1< 48 || takechar1 >57 );
      000667 8C 02            [24] 1765 	mov	ar2,r4
      000669 8D 03            [24] 1766 	mov	ar3,r5
      00066B C3               [12] 1767 	clr	c
      00066C EA               [12] 1768 	mov	a,r2
      00066D 94 30            [12] 1769 	subb	a,#0x30
      00066F EB               [12] 1770 	mov	a,r3
      000670 94 00            [12] 1771 	subb	a,#0x00
      000672 40 A1            [24] 1772 	jc	00119$
      000674 8C 02            [24] 1773 	mov	ar2,r4
      000676 8D 03            [24] 1774 	mov	ar3,r5
      000678 C3               [12] 1775 	clr	c
      000679 74 39            [12] 1776 	mov	a,#0x39
      00067B 9A               [12] 1777 	subb	a,r2
      00067C E4               [12] 1778 	clr	a
      00067D 9B               [12] 1779 	subb	a,r3
      00067E 40 95            [24] 1780 	jc	00119$
                                   1781 ;	menu.c:327: switch (takechar1)    // switch case for entering block number
      000680 8C 02            [24] 1782 	mov	ar2,r4
      000682 8D 03            [24] 1783 	mov	ar3,r5
      000684 C3               [12] 1784 	clr	c
      000685 EA               [12] 1785 	mov	a,r2
      000686 94 30            [12] 1786 	subb	a,#0x30
      000688 EB               [12] 1787 	mov	a,r3
      000689 94 00            [12] 1788 	subb	a,#0x00
      00068B 50 03            [24] 1789 	jnc	00327$
      00068D 02r07r25         [24] 1790 	ljmp	00130$
      000690                       1791 00327$:
      000690 C3               [12] 1792 	clr	c
      000691 74 37            [12] 1793 	mov	a,#0x37
      000693 9A               [12] 1794 	subb	a,r2
      000694 E4               [12] 1795 	clr	a
      000695 9B               [12] 1796 	subb	a,r3
      000696 50 03            [24] 1797 	jnc	00328$
      000698 02r07r25         [24] 1798 	ljmp	00130$
      00069B                       1799 00328$:
      00069B EC               [12] 1800 	mov	a,r4
      00069C 24 D0            [12] 1801 	add	a,#0xd0
      00069E FB               [12] 1802 	mov	r3,a
      00069F 24 0A            [12] 1803 	add	a,#(00329$-3-.)
      0006A1 83               [24] 1804 	movc	a,@a+pc
      0006A2 F5 82            [12] 1805 	mov	dpl,a
      0006A4 EB               [12] 1806 	mov	a,r3
      0006A5 24 0C            [12] 1807 	add	a,#(00330$-3-.)
      0006A7 83               [24] 1808 	movc	a,@a+pc
      0006A8 F5 83            [12] 1809 	mov	dph,a
      0006AA E4               [12] 1810 	clr	a
      0006AB 73               [24] 1811 	jmp	@a+dptr
      0006AC                       1812 00329$:
      0006ACrBC                    1813 	.db	00122$
      0006ADrCA                    1814 	.db	00123$
      0006AErD7                    1815 	.db	00124$
      0006AFrE4                    1816 	.db	00125$
      0006B0rF1                    1817 	.db	00126$
      0006B1rFE                    1818 	.db	00127$
      0006B2r0B                    1819 	.db	00128$
      0006B3r18                    1820 	.db	00129$
      0006B4                       1821 00330$:
      0006B4s06                    1822 	.db	00122$>>8
      0006B5s06                    1823 	.db	00123$>>8
      0006B6s06                    1824 	.db	00124$>>8
      0006B7s06                    1825 	.db	00125$>>8
      0006B8s06                    1826 	.db	00126$>>8
      0006B9s06                    1827 	.db	00127$>>8
      0006BAs07                    1828 	.db	00128$>>8
      0006BBs07                    1829 	.db	00129$>>8
                                   1830 ;	menu.c:329: case '0': {
      0006BC                       1831 00122$:
                                   1832 ;	menu.c:330: blocknumberend = 0xA0;
      0006BC 90r00r09         [24] 1833 	mov	dptr,#_Hex_Dump_blocknumberend_65536_85
      0006BF 74 A0            [12] 1834 	mov	a,#0xa0
      0006C1 F0               [24] 1835 	movx	@dptr,a
                                   1836 ;	menu.c:331: blocknumberreadend = 0xA1;
      0006C2 90r00r0A         [24] 1837 	mov	dptr,#_Hex_Dump_blocknumberreadend_65536_85
      0006C5 04               [12] 1838 	inc	a
      0006C6 F0               [24] 1839 	movx	@dptr,a
                                   1840 ;	menu.c:332: break;
      0006C7 02r07r4A         [24] 1841 	ljmp	00131$
                                   1842 ;	menu.c:334: case '1': {
      0006CA                       1843 00123$:
                                   1844 ;	menu.c:335: blocknumberend = 0xA2;
      0006CA 90r00r09         [24] 1845 	mov	dptr,#_Hex_Dump_blocknumberend_65536_85
      0006CD 74 A2            [12] 1846 	mov	a,#0xa2
      0006CF F0               [24] 1847 	movx	@dptr,a
                                   1848 ;	menu.c:336: blocknumberreadend = 0xA3;
      0006D0 90r00r0A         [24] 1849 	mov	dptr,#_Hex_Dump_blocknumberreadend_65536_85
      0006D3 04               [12] 1850 	inc	a
      0006D4 F0               [24] 1851 	movx	@dptr,a
                                   1852 ;	menu.c:337: break;
                                   1853 ;	menu.c:339: case '2': {
      0006D5 80 73            [24] 1854 	sjmp	00131$
      0006D7                       1855 00124$:
                                   1856 ;	menu.c:340: blocknumberend = 0xA4;
      0006D7 90r00r09         [24] 1857 	mov	dptr,#_Hex_Dump_blocknumberend_65536_85
      0006DA 74 A4            [12] 1858 	mov	a,#0xa4
      0006DC F0               [24] 1859 	movx	@dptr,a
                                   1860 ;	menu.c:341: blocknumberreadend = 0xA5;
      0006DD 90r00r0A         [24] 1861 	mov	dptr,#_Hex_Dump_blocknumberreadend_65536_85
      0006E0 04               [12] 1862 	inc	a
      0006E1 F0               [24] 1863 	movx	@dptr,a
                                   1864 ;	menu.c:342: break;
                                   1865 ;	menu.c:344: case '3': {
      0006E2 80 66            [24] 1866 	sjmp	00131$
      0006E4                       1867 00125$:
                                   1868 ;	menu.c:345: blocknumberend = 0xA6;
      0006E4 90r00r09         [24] 1869 	mov	dptr,#_Hex_Dump_blocknumberend_65536_85
      0006E7 74 A6            [12] 1870 	mov	a,#0xa6
      0006E9 F0               [24] 1871 	movx	@dptr,a
                                   1872 ;	menu.c:346: blocknumberreadend = 0xA7;
      0006EA 90r00r0A         [24] 1873 	mov	dptr,#_Hex_Dump_blocknumberreadend_65536_85
      0006ED 04               [12] 1874 	inc	a
      0006EE F0               [24] 1875 	movx	@dptr,a
                                   1876 ;	menu.c:347: break;
                                   1877 ;	menu.c:349: case '4': {
      0006EF 80 59            [24] 1878 	sjmp	00131$
      0006F1                       1879 00126$:
                                   1880 ;	menu.c:350: blocknumberend = 0xA8;
      0006F1 90r00r09         [24] 1881 	mov	dptr,#_Hex_Dump_blocknumberend_65536_85
      0006F4 74 A8            [12] 1882 	mov	a,#0xa8
      0006F6 F0               [24] 1883 	movx	@dptr,a
                                   1884 ;	menu.c:351: blocknumberreadend = 0xA9;
      0006F7 90r00r0A         [24] 1885 	mov	dptr,#_Hex_Dump_blocknumberreadend_65536_85
      0006FA 04               [12] 1886 	inc	a
      0006FB F0               [24] 1887 	movx	@dptr,a
                                   1888 ;	menu.c:352: break;
                                   1889 ;	menu.c:354: case '5': {
      0006FC 80 4C            [24] 1890 	sjmp	00131$
      0006FE                       1891 00127$:
                                   1892 ;	menu.c:355: blocknumberend = 0xAA;
      0006FE 90r00r09         [24] 1893 	mov	dptr,#_Hex_Dump_blocknumberend_65536_85
      000701 74 AA            [12] 1894 	mov	a,#0xaa
      000703 F0               [24] 1895 	movx	@dptr,a
                                   1896 ;	menu.c:356: blocknumberreadend = 0xAB;
      000704 90r00r0A         [24] 1897 	mov	dptr,#_Hex_Dump_blocknumberreadend_65536_85
      000707 04               [12] 1898 	inc	a
      000708 F0               [24] 1899 	movx	@dptr,a
                                   1900 ;	menu.c:357: break;
                                   1901 ;	menu.c:359: case '6': {
      000709 80 3F            [24] 1902 	sjmp	00131$
      00070B                       1903 00128$:
                                   1904 ;	menu.c:360: blocknumberend = 0xAC;
      00070B 90r00r09         [24] 1905 	mov	dptr,#_Hex_Dump_blocknumberend_65536_85
      00070E 74 AC            [12] 1906 	mov	a,#0xac
      000710 F0               [24] 1907 	movx	@dptr,a
                                   1908 ;	menu.c:361: blocknumberreadend = 0xAD;
      000711 90r00r0A         [24] 1909 	mov	dptr,#_Hex_Dump_blocknumberreadend_65536_85
      000714 04               [12] 1910 	inc	a
      000715 F0               [24] 1911 	movx	@dptr,a
                                   1912 ;	menu.c:362: break;
                                   1913 ;	menu.c:364: case '7': {
      000716 80 32            [24] 1914 	sjmp	00131$
      000718                       1915 00129$:
                                   1916 ;	menu.c:365: blocknumberend = 0xAE;
      000718 90r00r09         [24] 1917 	mov	dptr,#_Hex_Dump_blocknumberend_65536_85
      00071B 74 AE            [12] 1918 	mov	a,#0xae
      00071D F0               [24] 1919 	movx	@dptr,a
                                   1920 ;	menu.c:366: blocknumberreadend = 0xAF;
      00071E 90r00r0A         [24] 1921 	mov	dptr,#_Hex_Dump_blocknumberreadend_65536_85
      000721 04               [12] 1922 	inc	a
      000722 F0               [24] 1923 	movx	@dptr,a
                                   1924 ;	menu.c:367: break;
                                   1925 ;	menu.c:369: default: {
      000723 80 25            [24] 1926 	sjmp	00131$
      000725                       1927 00130$:
                                   1928 ;	menu.c:370: printf("\n \r Enter correct block number between 0 to 7\ n");
      000725 C0 07            [24] 1929 	push	ar7
      000727 C0 06            [24] 1930 	push	ar6
      000729 C0 05            [24] 1931 	push	ar5
      00072B C0 04            [24] 1932 	push	ar4
      00072D 74r82            [12] 1933 	mov	a,#___str_10
      00072F C0 E0            [24] 1934 	push	acc
      000731 74s02            [12] 1935 	mov	a,#(___str_10 >> 8)
      000733 C0 E0            [24] 1936 	push	acc
      000735 74 80            [12] 1937 	mov	a,#0x80
      000737 C0 E0            [24] 1938 	push	acc
      000739 12r00r00         [24] 1939 	lcall	_printf
      00073C 15 81            [12] 1940 	dec	sp
      00073E 15 81            [12] 1941 	dec	sp
      000740 15 81            [12] 1942 	dec	sp
      000742 D0 04            [24] 1943 	pop	ar4
      000744 D0 05            [24] 1944 	pop	ar5
      000746 D0 06            [24] 1945 	pop	ar6
      000748 D0 07            [24] 1946 	pop	ar7
                                   1947 ;	menu.c:374: }
      00074A                       1948 00131$:
                                   1949 ;	menu.c:375: printf("\n \r Control Byte for the ending block number is : %X",blocknumberreadend);
      00074A 90r00r0A         [24] 1950 	mov	dptr,#_Hex_Dump_blocknumberreadend_65536_85
      00074D E0               [24] 1951 	movx	a,@dptr
      00074E FB               [12] 1952 	mov	r3,a
      00074F 7A 00            [12] 1953 	mov	r2,#0x00
      000751 C0 07            [24] 1954 	push	ar7
      000753 C0 06            [24] 1955 	push	ar6
      000755 C0 05            [24] 1956 	push	ar5
      000757 C0 04            [24] 1957 	push	ar4
      000759 C0 03            [24] 1958 	push	ar3
      00075B C0 02            [24] 1959 	push	ar2
      00075D 74rE1            [12] 1960 	mov	a,#___str_18
      00075F C0 E0            [24] 1961 	push	acc
      000761 74s03            [12] 1962 	mov	a,#(___str_18 >> 8)
      000763 C0 E0            [24] 1963 	push	acc
      000765 74 80            [12] 1964 	mov	a,#0x80
      000767 C0 E0            [24] 1965 	push	acc
      000769 12r00r00         [24] 1966 	lcall	_printf
      00076C E5 81            [12] 1967 	mov	a,sp
      00076E 24 FB            [12] 1968 	add	a,#0xfb
      000770 F5 81            [12] 1969 	mov	sp,a
      000772 D0 04            [24] 1970 	pop	ar4
      000774 D0 05            [24] 1971 	pop	ar5
      000776 D0 06            [24] 1972 	pop	ar6
      000778 D0 07            [24] 1973 	pop	ar7
                                   1974 ;	menu.c:379: while(endaddress==0)
      00077A                       1975 00132$:
      00077A 90r00r0C         [24] 1976 	mov	dptr,#_Hex_Dump_endaddress_65536_85
      00077D E0               [24] 1977 	movx	a,@dptr
      00077E FB               [12] 1978 	mov	r3,a
      00077F E0               [24] 1979 	movx	a,@dptr
      000780 70 30            [24] 1980 	jnz	00134$
                                   1981 ;	menu.c:381: printf("\n \r Enter a End Address between 00 to FF:  ");
      000782 C0 07            [24] 1982 	push	ar7
      000784 C0 06            [24] 1983 	push	ar6
      000786 C0 05            [24] 1984 	push	ar5
      000788 C0 04            [24] 1985 	push	ar4
      00078A 74r16            [12] 1986 	mov	a,#___str_19
      00078C C0 E0            [24] 1987 	push	acc
      00078E 74s04            [12] 1988 	mov	a,#(___str_19 >> 8)
      000790 C0 E0            [24] 1989 	push	acc
      000792 74 80            [12] 1990 	mov	a,#0x80
      000794 C0 E0            [24] 1991 	push	acc
      000796 12r00r00         [24] 1992 	lcall	_printf
      000799 15 81            [12] 1993 	dec	sp
      00079B 15 81            [12] 1994 	dec	sp
      00079D 15 81            [12] 1995 	dec	sp
                                   1996 ;	menu.c:382: endaddress = Convert_Char_to_dec_val();    //converting address in decimal format
      00079F 12r0Cr66         [24] 1997 	lcall	_Convert_Char_to_dec_val
      0007A2 E5 82            [12] 1998 	mov	a,dpl
      0007A4 D0 04            [24] 1999 	pop	ar4
      0007A6 D0 05            [24] 2000 	pop	ar5
      0007A8 D0 06            [24] 2001 	pop	ar6
      0007AA D0 07            [24] 2002 	pop	ar7
      0007AC 90r00r0C         [24] 2003 	mov	dptr,#_Hex_Dump_endaddress_65536_85
      0007AF F0               [24] 2004 	movx	@dptr,a
      0007B0 80 C8            [24] 2005 	sjmp	00132$
      0007B2                       2006 00134$:
                                   2007 ;	menu.c:387: printf("\n \r ****************************HEX DUMP VALUES******************************");
      0007B2 C0 07            [24] 2008 	push	ar7
      0007B4 C0 06            [24] 2009 	push	ar6
      0007B6 C0 05            [24] 2010 	push	ar5
      0007B8 C0 04            [24] 2011 	push	ar4
      0007BA C0 03            [24] 2012 	push	ar3
      0007BC 74r42            [12] 2013 	mov	a,#___str_20
      0007BE C0 E0            [24] 2014 	push	acc
      0007C0 74s04            [12] 2015 	mov	a,#(___str_20 >> 8)
      0007C2 C0 E0            [24] 2016 	push	acc
      0007C4 74 80            [12] 2017 	mov	a,#0x80
      0007C6 C0 E0            [24] 2018 	push	acc
      0007C8 12r00r00         [24] 2019 	lcall	_printf
      0007CB 15 81            [12] 2020 	dec	sp
      0007CD 15 81            [12] 2021 	dec	sp
      0007CF 15 81            [12] 2022 	dec	sp
      0007D1 D0 03            [24] 2023 	pop	ar3
      0007D3 D0 04            [24] 2024 	pop	ar4
      0007D5 D0 05            [24] 2025 	pop	ar5
      0007D7 D0 06            [24] 2026 	pop	ar6
      0007D9 D0 07            [24] 2027 	pop	ar7
                                   2028 ;	menu.c:390: if(takechar==takechar1)
      0007DB EE               [12] 2029 	mov	a,r6
      0007DC B5 04 06         [24] 2030 	cjne	a,ar4,00332$
      0007DF EF               [12] 2031 	mov	a,r7
      0007E0 B5 05 02         [24] 2032 	cjne	a,ar5,00332$
      0007E3 80 03            [24] 2033 	sjmp	00333$
      0007E5                       2034 00332$:
      0007E5 02r08rC0         [24] 2035 	ljmp	00158$
      0007E8                       2036 00333$:
                                   2037 ;	menu.c:392: printf("\n \r Address 0x%x -->  ",startaddress);
      0007E8 90r00r0B         [24] 2038 	mov	dptr,#_Hex_Dump_startaddress_65536_85
      0007EB E0               [24] 2039 	movx	a,@dptr
      0007EC FA               [12] 2040 	mov	r2,a
      0007ED F8               [12] 2041 	mov	r0,a
      0007EE 79 00            [12] 2042 	mov	r1,#0x00
      0007F0 C0 03            [24] 2043 	push	ar3
      0007F2 C0 02            [24] 2044 	push	ar2
      0007F4 C0 00            [24] 2045 	push	ar0
      0007F6 C0 01            [24] 2046 	push	ar1
      0007F8 74r90            [12] 2047 	mov	a,#___str_21
      0007FA C0 E0            [24] 2048 	push	acc
      0007FC 74s04            [12] 2049 	mov	a,#(___str_21 >> 8)
      0007FE C0 E0            [24] 2050 	push	acc
      000800 74 80            [12] 2051 	mov	a,#0x80
      000802 C0 E0            [24] 2052 	push	acc
      000804 12r00r00         [24] 2053 	lcall	_printf
      000807 E5 81            [12] 2054 	mov	a,sp
      000809 24 FB            [12] 2055 	add	a,#0xfb
      00080B F5 81            [12] 2056 	mov	sp,a
      00080D D0 02            [24] 2057 	pop	ar2
      00080F D0 03            [24] 2058 	pop	ar3
                                   2059 ;	menu.c:393: for (i=startaddress; i<= endaddress; i++)
      000811 90r00r07         [24] 2060 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      000814 E0               [24] 2061 	movx	a,@dptr
      000815 F5*02            [12] 2062 	mov	_Hex_Dump_sloc2_1_0,a
      000817 90r00r08         [24] 2063 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      00081A E0               [24] 2064 	movx	a,@dptr
      00081B F8               [12] 2065 	mov	r0,a
      00081C 8B*00            [24] 2066 	mov	_Hex_Dump_sloc0_1_0,r3
      00081E 75*01 00         [24] 2067 	mov	_Hex_Dump_sloc1_1_0,#0x00
      000821                       2068 00161$:
      000821 C3               [12] 2069 	clr	c
      000822 E5*00            [12] 2070 	mov	a,_Hex_Dump_sloc0_1_0
      000824 9A               [12] 2071 	subb	a,r2
      000825 50 01            [24] 2072 	jnc	00334$
      000827 22               [24] 2073 	ret
      000828                       2074 00334$:
                                   2075 ;	menu.c:395: StartI2C();
      000828 C0 02            [24] 2076 	push	ar2
      00082A C0 00            [24] 2077 	push	ar0
      00082C 12r00r00         [24] 2078 	lcall	_StartI2C
                                   2079 ;	menu.c:397: myread= DataSendI2C(blocknumber);
      00082F 85*02 82         [24] 2080 	mov	dpl,_Hex_Dump_sloc2_1_0
      000832 12r00r00         [24] 2081 	lcall	_DataSendI2C
      000835 D0 00            [24] 2082 	pop	ar0
      000837 D0 02            [24] 2083 	pop	ar2
                                   2084 ;	menu.c:399: myread = DataSendI2C(i);
      000839 8A 82            [24] 2085 	mov	dpl,r2
      00083B C0 02            [24] 2086 	push	ar2
      00083D C0 00            [24] 2087 	push	ar0
      00083F 12r00r00         [24] 2088 	lcall	_DataSendI2C
                                   2089 ;	menu.c:401: RestartI2C();
      000842 12r00r00         [24] 2090 	lcall	_RestartI2C
      000845 D0 00            [24] 2091 	pop	ar0
                                   2092 ;	menu.c:402: myread= DataSendI2C(blocknumberread);
      000847 88 82            [24] 2093 	mov	dpl,r0
      000849 C0 00            [24] 2094 	push	ar0
      00084B 12r00r00         [24] 2095 	lcall	_DataSendI2C
      00084E D0 00            [24] 2096 	pop	ar0
      000850 D0 02            [24] 2097 	pop	ar2
                                   2098 ;	menu.c:403: readdataprint = I2CRead();
      000852 C0 00            [24] 2099 	push	ar0
      000854 C0 02            [24] 2100 	push	ar2
      000856 12r00r00         [24] 2101 	lcall	_I2CRead
      000859 A8 82            [24] 2102 	mov	r0,dpl
                                   2103 ;	menu.c:404: SendNACK();
      00085B C0 00            [24] 2104 	push	ar0
      00085D 12r00r00         [24] 2105 	lcall	_SendNACK
                                   2106 ;	menu.c:405: StopI2C();
      000860 12r00r00         [24] 2107 	lcall	_StopI2C
      000863 D0 00            [24] 2108 	pop	ar0
                                   2109 ;	menu.c:406: printf(" %x",readdataprint);
      000865 79 00            [12] 2110 	mov	r1,#0x00
      000867 C0 00            [24] 2111 	push	ar0
      000869 C0 00            [24] 2112 	push	ar0
      00086B C0 01            [24] 2113 	push	ar1
      00086D 74rA7            [12] 2114 	mov	a,#___str_22
      00086F C0 E0            [24] 2115 	push	acc
      000871 74s04            [12] 2116 	mov	a,#(___str_22 >> 8)
      000873 C0 E0            [24] 2117 	push	acc
      000875 74 80            [12] 2118 	mov	a,#0x80
      000877 C0 E0            [24] 2119 	push	acc
      000879 12r00r00         [24] 2120 	lcall	_printf
      00087C E5 81            [12] 2121 	mov	a,sp
      00087E 24 FB            [12] 2122 	add	a,#0xfb
      000880 F5 81            [12] 2123 	mov	sp,a
      000882 D0 00            [24] 2124 	pop	ar0
      000884 D0 02            [24] 2125 	pop	ar2
                                   2126 ;	menu.c:407: count++;
      000886 05*01            [12] 2127 	inc	_Hex_Dump_sloc1_1_0
                                   2128 ;	menu.c:408: if (count%16==0)
      000888 A8*01            [24] 2129 	mov	r0,_Hex_Dump_sloc1_1_0
      00088A 79 00            [12] 2130 	mov	r1,#0x00
      00088C E8               [12] 2131 	mov	a,r0
      00088D 54 0F            [12] 2132 	anl	a,#0x0f
      00088F 60 04            [24] 2133 	jz	00336$
      000891 D0 00            [24] 2134 	pop	ar0
      000893 80 27            [24] 2135 	sjmp	00162$
      000895                       2136 00336$:
                                   2137 ;	menu.c:410: printf("\n \r Address 0x%x -->  ",i);
      000895 8A 00            [24] 2138 	mov	ar0,r2
      000897 79 00            [12] 2139 	mov	r1,#0x00
      000899 C0 02            [24] 2140 	push	ar2
      00089B C0 00            [24] 2141 	push	ar0
      00089D C0 00            [24] 2142 	push	ar0
      00089F C0 01            [24] 2143 	push	ar1
      0008A1 74r90            [12] 2144 	mov	a,#___str_21
      0008A3 C0 E0            [24] 2145 	push	acc
      0008A5 74s04            [12] 2146 	mov	a,#(___str_21 >> 8)
      0008A7 C0 E0            [24] 2147 	push	acc
      0008A9 74 80            [12] 2148 	mov	a,#0x80
      0008AB C0 E0            [24] 2149 	push	acc
      0008AD 12r00r00         [24] 2150 	lcall	_printf
      0008B0 E5 81            [12] 2151 	mov	a,sp
      0008B2 24 FB            [12] 2152 	add	a,#0xfb
      0008B4 F5 81            [12] 2153 	mov	sp,a
      0008B6 D0 00            [24] 2154 	pop	ar0
      0008B8 D0 02            [24] 2155 	pop	ar2
                                   2156 ;	menu.c:421: for (i =takechar; i<= takechar1; i++)
      0008BA D0 00            [24] 2157 	pop	ar0
                                   2158 ;	menu.c:410: printf("\n \r Address 0x%x -->  ",i);
      0008BC                       2159 00162$:
                                   2160 ;	menu.c:393: for (i=startaddress; i<= endaddress; i++)
      0008BC 0A               [12] 2161 	inc	r2
      0008BD 02r08r21         [24] 2162 	ljmp	00161$
      0008C0                       2163 00158$:
                                   2164 ;	menu.c:418: else if (takechar < takechar1)
      0008C0 C0 03            [24] 2165 	push	ar3
      0008C2 8E 01            [24] 2166 	mov	ar1,r6
      0008C4 8F 02            [24] 2167 	mov	ar2,r7
      0008C6 8C 00            [24] 2168 	mov	ar0,r4
      0008C8 8D 03            [24] 2169 	mov	ar3,r5
      0008CA C3               [12] 2170 	clr	c
      0008CB E9               [12] 2171 	mov	a,r1
      0008CC 98               [12] 2172 	subb	a,r0
      0008CD EA               [12] 2173 	mov	a,r2
      0008CE 9B               [12] 2174 	subb	a,r3
      0008CF D0 03            [24] 2175 	pop	ar3
      0008D1 40 01            [24] 2176 	jc	00337$
      0008D3 22               [24] 2177 	ret
      0008D4                       2178 00337$:
                                   2179 ;	menu.c:420: printf("\n \r Address 0x%x -->  ",startaddress);
      0008D4 90r00r0B         [24] 2180 	mov	dptr,#_Hex_Dump_startaddress_65536_85
      0008D7 E0               [24] 2181 	movx	a,@dptr
      0008D8 FA               [12] 2182 	mov	r2,a
      0008D9 F8               [12] 2183 	mov	r0,a
      0008DA 79 00            [12] 2184 	mov	r1,#0x00
      0008DC C0 07            [24] 2185 	push	ar7
      0008DE C0 06            [24] 2186 	push	ar6
      0008E0 C0 05            [24] 2187 	push	ar5
      0008E2 C0 04            [24] 2188 	push	ar4
      0008E4 C0 03            [24] 2189 	push	ar3
      0008E6 C0 02            [24] 2190 	push	ar2
      0008E8 C0 00            [24] 2191 	push	ar0
      0008EA C0 01            [24] 2192 	push	ar1
      0008EC 74r90            [12] 2193 	mov	a,#___str_21
      0008EE C0 E0            [24] 2194 	push	acc
      0008F0 74s04            [12] 2195 	mov	a,#(___str_21 >> 8)
      0008F2 C0 E0            [24] 2196 	push	acc
      0008F4 74 80            [12] 2197 	mov	a,#0x80
      0008F6 C0 E0            [24] 2198 	push	acc
      0008F8 12r00r00         [24] 2199 	lcall	_printf
      0008FB E5 81            [12] 2200 	mov	a,sp
      0008FD 24 FB            [12] 2201 	add	a,#0xfb
      0008FF F5 81            [12] 2202 	mov	sp,a
      000901 D0 02            [24] 2203 	pop	ar2
      000903 D0 03            [24] 2204 	pop	ar3
      000905 D0 04            [24] 2205 	pop	ar4
      000907 D0 05            [24] 2206 	pop	ar5
      000909 D0 06            [24] 2207 	pop	ar6
      00090B D0 07            [24] 2208 	pop	ar7
                                   2209 ;	menu.c:421: for (i =takechar; i<= takechar1; i++)
      00090D 8E 00            [24] 2210 	mov	ar0,r6
      00090F 8F 01            [24] 2211 	mov	ar1,r7
      000911 88*0A            [24] 2212 	mov	_Hex_Dump_sloc7_1_0,r0
      000913 8C*03            [24] 2213 	mov	_Hex_Dump_sloc3_1_0,r4
      000915 8D*04            [24] 2214 	mov	(_Hex_Dump_sloc3_1_0 + 1),r5
      000917 90r00r09         [24] 2215 	mov	dptr,#_Hex_Dump_blocknumberend_65536_85
      00091A E0               [24] 2216 	movx	a,@dptr
      00091B F5*0D            [12] 2217 	mov	_Hex_Dump_sloc9_1_0,a
      00091D 90r00r0A         [24] 2218 	mov	dptr,#_Hex_Dump_blocknumberreadend_65536_85
      000920 E0               [24] 2219 	movx	a,@dptr
      000921 F5*02            [12] 2220 	mov	_Hex_Dump_sloc2_1_0,a
      000923 8C*05            [24] 2221 	mov	_Hex_Dump_sloc4_1_0,r4
      000925 8D*06            [24] 2222 	mov	(_Hex_Dump_sloc4_1_0 + 1),r5
      000927                       2223 00173$:
      000927 85*0A*07         [24] 2224 	mov	_Hex_Dump_sloc5_1_0,_Hex_Dump_sloc7_1_0
      00092A 75*08 00         [24] 2225 	mov	(_Hex_Dump_sloc5_1_0 + 1),#0x00
      00092D C3               [12] 2226 	clr	c
      00092E E5*05            [12] 2227 	mov	a,_Hex_Dump_sloc4_1_0
      000930 95*07            [12] 2228 	subb	a,_Hex_Dump_sloc5_1_0
      000932 E5*06            [12] 2229 	mov	a,(_Hex_Dump_sloc4_1_0 + 1)
      000934 95*08            [12] 2230 	subb	a,(_Hex_Dump_sloc5_1_0 + 1)
      000936 50 01            [24] 2231 	jnc	00338$
      000938 22               [24] 2232 	ret
      000939                       2233 00338$:
                                   2234 ;	menu.c:423: if(i ==takechar)    // Printing data from first starting block
      000939 EE               [12] 2235 	mov	a,r6
      00093A B5*07 06         [24] 2236 	cjne	a,_Hex_Dump_sloc5_1_0,00339$
      00093D EF               [12] 2237 	mov	a,r7
      00093E B5*08 02         [24] 2238 	cjne	a,(_Hex_Dump_sloc5_1_0 + 1),00339$
      000941 80 03            [24] 2239 	sjmp	00340$
      000943                       2240 00339$:
      000943 02r0Ar29         [24] 2241 	ljmp	00142$
      000946                       2242 00340$:
                                   2243 ;	menu.c:425: for(int j = startaddress; j<=0xff; j++)
      000946 8A*07            [24] 2244 	mov	_Hex_Dump_sloc5_1_0,r2
      000948 75*08 00         [24] 2245 	mov	(_Hex_Dump_sloc5_1_0 + 1),#0x00
      00094B 90r00r07         [24] 2246 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      00094E E0               [24] 2247 	movx	a,@dptr
      00094F F5*01            [12] 2248 	mov	_Hex_Dump_sloc1_1_0,a
      000951 90r00r08         [24] 2249 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      000954 E0               [24] 2250 	movx	a,@dptr
      000955 F5*00            [12] 2251 	mov	_Hex_Dump_sloc0_1_0,a
      000957 90r00r0D         [24] 2252 	mov	dptr,#_Hex_Dump_count_65536_85
      00095A E0               [24] 2253 	movx	a,@dptr
      00095B F5*09            [12] 2254 	mov	_Hex_Dump_sloc6_1_0,a
      00095D                       2255 00164$:
      00095D C3               [12] 2256 	clr	c
      00095E 74 FF            [12] 2257 	mov	a,#0xff
      000960 95*07            [12] 2258 	subb	a,_Hex_Dump_sloc5_1_0
      000962 74 80            [12] 2259 	mov	a,#(0x00 ^ 0x80)
      000964 85*08 F0         [24] 2260 	mov	b,(_Hex_Dump_sloc5_1_0 + 1)
      000967 63 F0 80         [24] 2261 	xrl	b,#0x80
      00096A 95 F0            [12] 2262 	subb	a,b
      00096C 50 03            [24] 2263 	jnc	00341$
      00096E 02r0Ar23         [24] 2264 	ljmp	00212$
      000971                       2265 00341$:
                                   2266 ;	menu.c:427: StartI2C();
      000971 C0 02            [24] 2267 	push	ar2
      000973 C0 07            [24] 2268 	push	ar7
      000975 C0 06            [24] 2269 	push	ar6
      000977 C0 05            [24] 2270 	push	ar5
      000979 C0 04            [24] 2271 	push	ar4
      00097B C0 03            [24] 2272 	push	ar3
      00097D C0 02            [24] 2273 	push	ar2
      00097F 12r00r00         [24] 2274 	lcall	_StartI2C
                                   2275 ;	menu.c:429: myread= DataSendI2C(blocknumber);
      000982 85*01 82         [24] 2276 	mov	dpl,_Hex_Dump_sloc1_1_0
      000985 12r00r00         [24] 2277 	lcall	_DataSendI2C
      000988 D0 02            [24] 2278 	pop	ar2
                                   2279 ;	menu.c:430: myread = DataSendI2C(j);
      00098A AA*07            [24] 2280 	mov	r2,_Hex_Dump_sloc5_1_0
      00098C 8A 82            [24] 2281 	mov	dpl,r2
      00098E C0 02            [24] 2282 	push	ar2
      000990 12r00r00         [24] 2283 	lcall	_DataSendI2C
                                   2284 ;	menu.c:431: RestartI2C();
      000993 12r00r00         [24] 2285 	lcall	_RestartI2C
                                   2286 ;	menu.c:432: myread= DataSendI2C(blocknumberread);
      000996 85*00 82         [24] 2287 	mov	dpl,_Hex_Dump_sloc0_1_0
      000999 12r00r00         [24] 2288 	lcall	_DataSendI2C
      00099C D0 02            [24] 2289 	pop	ar2
                                   2290 ;	menu.c:433: readdataprint = I2CRead();
      00099E 12r00r00         [24] 2291 	lcall	_I2CRead
      0009A1 AA 82            [24] 2292 	mov	r2,dpl
                                   2293 ;	menu.c:434: SendNACK();
      0009A3 C0 02            [24] 2294 	push	ar2
      0009A5 12r00r00         [24] 2295 	lcall	_SendNACK
                                   2296 ;	menu.c:435: StopI2C();
      0009A8 12r00r00         [24] 2297 	lcall	_StopI2C
      0009AB D0 02            [24] 2298 	pop	ar2
                                   2299 ;	menu.c:436: printf(" %x",readdataprint);
      0009AD 8A 00            [24] 2300 	mov	ar0,r2
      0009AF 7A 00            [12] 2301 	mov	r2,#0x00
      0009B1 C0 02            [24] 2302 	push	ar2
      0009B3 C0 00            [24] 2303 	push	ar0
      0009B5 C0 02            [24] 2304 	push	ar2
      0009B7 74rA7            [12] 2305 	mov	a,#___str_22
      0009B9 C0 E0            [24] 2306 	push	acc
      0009BB 74s04            [12] 2307 	mov	a,#(___str_22 >> 8)
      0009BD C0 E0            [24] 2308 	push	acc
      0009BF 74 80            [12] 2309 	mov	a,#0x80
      0009C1 C0 E0            [24] 2310 	push	acc
      0009C3 12r00r00         [24] 2311 	lcall	_printf
      0009C6 E5 81            [12] 2312 	mov	a,sp
      0009C8 24 FB            [12] 2313 	add	a,#0xfb
      0009CA F5 81            [12] 2314 	mov	sp,a
      0009CC D0 02            [24] 2315 	pop	ar2
      0009CE D0 03            [24] 2316 	pop	ar3
      0009D0 D0 04            [24] 2317 	pop	ar4
      0009D2 D0 05            [24] 2318 	pop	ar5
      0009D4 D0 06            [24] 2319 	pop	ar6
      0009D6 D0 07            [24] 2320 	pop	ar7
                                   2321 ;	menu.c:437: count++;
      0009D8 05*09            [12] 2322 	inc	_Hex_Dump_sloc6_1_0
                                   2323 ;	menu.c:438: if (count%16==0)
      0009DA E5*09            [12] 2324 	mov	a,_Hex_Dump_sloc6_1_0
      0009DC F8               [12] 2325 	mov	r0,a
      0009DD 54 0F            [12] 2326 	anl	a,#0x0f
      0009DF 60 04            [24] 2327 	jz	00343$
      0009E1 D0 02            [24] 2328 	pop	ar2
      0009E3 80 33            [24] 2329 	sjmp	00165$
      0009E5                       2330 00343$:
      0009E5 D0 02            [24] 2331 	pop	ar2
                                   2332 ;	menu.c:440: printf("\n \r Address 0x%x -->  ",j);
      0009E7 C0 07            [24] 2333 	push	ar7
      0009E9 C0 06            [24] 2334 	push	ar6
      0009EB C0 05            [24] 2335 	push	ar5
      0009ED C0 04            [24] 2336 	push	ar4
      0009EF C0 03            [24] 2337 	push	ar3
      0009F1 C0 02            [24] 2338 	push	ar2
      0009F3 C0*07            [24] 2339 	push	_Hex_Dump_sloc5_1_0
      0009F5 C0*08            [24] 2340 	push	(_Hex_Dump_sloc5_1_0 + 1)
      0009F7 74r90            [12] 2341 	mov	a,#___str_21
      0009F9 C0 E0            [24] 2342 	push	acc
      0009FB 74s04            [12] 2343 	mov	a,#(___str_21 >> 8)
      0009FD C0 E0            [24] 2344 	push	acc
      0009FF 74 80            [12] 2345 	mov	a,#0x80
      000A01 C0 E0            [24] 2346 	push	acc
      000A03 12r00r00         [24] 2347 	lcall	_printf
      000A06 E5 81            [12] 2348 	mov	a,sp
      000A08 24 FB            [12] 2349 	add	a,#0xfb
      000A0A F5 81            [12] 2350 	mov	sp,a
      000A0C D0 02            [24] 2351 	pop	ar2
      000A0E D0 03            [24] 2352 	pop	ar3
      000A10 D0 04            [24] 2353 	pop	ar4
      000A12 D0 05            [24] 2354 	pop	ar5
      000A14 D0 06            [24] 2355 	pop	ar6
      000A16 D0 07            [24] 2356 	pop	ar7
      000A18                       2357 00165$:
                                   2358 ;	menu.c:425: for(int j = startaddress; j<=0xff; j++)
      000A18 05*07            [12] 2359 	inc	_Hex_Dump_sloc5_1_0
      000A1A E4               [12] 2360 	clr	a
      000A1B B5*07 02         [24] 2361 	cjne	a,_Hex_Dump_sloc5_1_0,00344$
      000A1E 05*08            [12] 2362 	inc	(_Hex_Dump_sloc5_1_0 + 1)
      000A20                       2363 00344$:
      000A20 02r09r5D         [24] 2364 	ljmp	00164$
      000A23                       2365 00212$:
      000A23 90r00r0D         [24] 2366 	mov	dptr,#_Hex_Dump_count_65536_85
      000A26 E5*09            [12] 2367 	mov	a,_Hex_Dump_sloc6_1_0
      000A28 F0               [24] 2368 	movx	@dptr,a
      000A29                       2369 00142$:
                                   2370 ;	menu.c:444: if(i!= takechar && i< takechar1)   // Printing data from blocks in between first and last block
      000A29 85*0A*07         [24] 2371 	mov	_Hex_Dump_sloc5_1_0,_Hex_Dump_sloc7_1_0
      000A2C 75*08 00         [24] 2372 	mov	(_Hex_Dump_sloc5_1_0 + 1),#0x00
      000A2F EE               [12] 2373 	mov	a,r6
      000A30 B5*07 07         [24] 2374 	cjne	a,_Hex_Dump_sloc5_1_0,00345$
      000A33 EF               [12] 2375 	mov	a,r7
      000A34 B5*08 03         [24] 2376 	cjne	a,(_Hex_Dump_sloc5_1_0 + 1),00345$
      000A37 02r0Br53         [24] 2377 	ljmp	00147$
      000A3A                       2378 00345$:
      000A3A C3               [12] 2379 	clr	c
      000A3B E5*07            [12] 2380 	mov	a,_Hex_Dump_sloc5_1_0
      000A3D 95*03            [12] 2381 	subb	a,_Hex_Dump_sloc3_1_0
      000A3F E5*08            [12] 2382 	mov	a,(_Hex_Dump_sloc5_1_0 + 1)
      000A41 95*04            [12] 2383 	subb	a,(_Hex_Dump_sloc3_1_0 + 1)
      000A43 40 03            [24] 2384 	jc	00346$
      000A45 02r0Br53         [24] 2385 	ljmp	00147$
      000A48                       2386 00346$:
                                   2387 ;	menu.c:446: blocknumber=blocknumber+2;
      000A48 90r00r07         [24] 2388 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      000A4B E0               [24] 2389 	movx	a,@dptr
      000A4C 24 02            [12] 2390 	add	a,#0x02
      000A4E F0               [24] 2391 	movx	@dptr,a
                                   2392 ;	menu.c:447: blocknumberread=blocknumberread+2;
      000A4F 90r00r08         [24] 2393 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      000A52 E0               [24] 2394 	movx	a,@dptr
      000A53 24 02            [12] 2395 	add	a,#0x02
      000A55 F0               [24] 2396 	movx	@dptr,a
                                   2397 ;	menu.c:448: for(int j = 0; j<=0xff; j++)
      000A56 90r00r07         [24] 2398 	mov	dptr,#_Hex_Dump_blocknumber_65536_85
      000A59 E0               [24] 2399 	movx	a,@dptr
      000A5A F8               [12] 2400 	mov	r0,a
      000A5B 90r00r08         [24] 2401 	mov	dptr,#_Hex_Dump_blocknumberread_65536_85
      000A5E E0               [24] 2402 	movx	a,@dptr
      000A5F F5*09            [12] 2403 	mov	_Hex_Dump_sloc6_1_0,a
      000A61 90r00r0D         [24] 2404 	mov	dptr,#_Hex_Dump_count_65536_85
      000A64 E0               [24] 2405 	movx	a,@dptr
      000A65 F5*07            [12] 2406 	mov	_Hex_Dump_sloc5_1_0,a
      000A67 E4               [12] 2407 	clr	a
      000A68 F5*0B            [12] 2408 	mov	_Hex_Dump_sloc8_1_0,a
      000A6A F5*0C            [12] 2409 	mov	(_Hex_Dump_sloc8_1_0 + 1),a
      000A6C                       2410 00167$:
      000A6C C3               [12] 2411 	clr	c
      000A6D 74 FF            [12] 2412 	mov	a,#0xff
      000A6F 95*0B            [12] 2413 	subb	a,_Hex_Dump_sloc8_1_0
      000A71 74 80            [12] 2414 	mov	a,#(0x00 ^ 0x80)
      000A73 85*0C F0         [24] 2415 	mov	b,(_Hex_Dump_sloc8_1_0 + 1)
      000A76 63 F0 80         [24] 2416 	xrl	b,#0x80
      000A79 95 F0            [12] 2417 	subb	a,b
      000A7B 50 03            [24] 2418 	jnc	00347$
      000A7D 02r0Br4D         [24] 2419 	ljmp	00213$
      000A80                       2420 00347$:
                                   2421 ;	menu.c:450: StartI2C();
      000A80 C0 02            [24] 2422 	push	ar2
      000A82 C0 07            [24] 2423 	push	ar7
      000A84 C0 06            [24] 2424 	push	ar6
      000A86 C0 05            [24] 2425 	push	ar5
      000A88 C0 04            [24] 2426 	push	ar4
      000A8A C0 03            [24] 2427 	push	ar3
      000A8C C0 02            [24] 2428 	push	ar2
      000A8E C0 00            [24] 2429 	push	ar0
      000A90 12r00r00         [24] 2430 	lcall	_StartI2C
      000A93 D0 00            [24] 2431 	pop	ar0
                                   2432 ;	menu.c:452: myread= DataSendI2C(blocknumber);
      000A95 88 82            [24] 2433 	mov	dpl,r0
      000A97 C0 00            [24] 2434 	push	ar0
      000A99 12r00r00         [24] 2435 	lcall	_DataSendI2C
      000A9C D0 00            [24] 2436 	pop	ar0
      000A9E D0 02            [24] 2437 	pop	ar2
                                   2438 ;	menu.c:453: myread = DataSendI2C(j);
      000AA0 AA*0B            [24] 2439 	mov	r2,_Hex_Dump_sloc8_1_0
      000AA2 8A 82            [24] 2440 	mov	dpl,r2
      000AA4 C0 02            [24] 2441 	push	ar2
      000AA6 C0 00            [24] 2442 	push	ar0
      000AA8 12r00r00         [24] 2443 	lcall	_DataSendI2C
                                   2444 ;	menu.c:454: RestartI2C();
      000AAB 12r00r00         [24] 2445 	lcall	_RestartI2C
                                   2446 ;	menu.c:455: myread= DataSendI2C(blocknumberread);
      000AAE 85*09 82         [24] 2447 	mov	dpl,_Hex_Dump_sloc6_1_0
      000AB1 12r00r00         [24] 2448 	lcall	_DataSendI2C
      000AB4 D0 00            [24] 2449 	pop	ar0
      000AB6 D0 02            [24] 2450 	pop	ar2
                                   2451 ;	menu.c:456: readdataprint = I2CRead();
      000AB8 C0 00            [24] 2452 	push	ar0
      000ABA 12r00r00         [24] 2453 	lcall	_I2CRead
      000ABD AA 82            [24] 2454 	mov	r2,dpl
      000ABF D0 00            [24] 2455 	pop	ar0
                                   2456 ;	menu.c:457: SendNACK();
      000AC1 C0 02            [24] 2457 	push	ar2
      000AC3 C0 00            [24] 2458 	push	ar0
      000AC5 12r00r00         [24] 2459 	lcall	_SendNACK
                                   2460 ;	menu.c:458: StopI2C();
      000AC8 12r00r00         [24] 2461 	lcall	_StopI2C
      000ACB D0 00            [24] 2462 	pop	ar0
      000ACD D0 02            [24] 2463 	pop	ar2
                                   2464 ;	menu.c:459: printf(" %x",readdataprint);
      000ACF 8A 01            [24] 2465 	mov	ar1,r2
      000AD1 7A 00            [12] 2466 	mov	r2,#0x00
      000AD3 C0 02            [24] 2467 	push	ar2
      000AD5 C0 00            [24] 2468 	push	ar0
      000AD7 C0 01            [24] 2469 	push	ar1
      000AD9 C0 02            [24] 2470 	push	ar2
      000ADB 74rA7            [12] 2471 	mov	a,#___str_22
      000ADD C0 E0            [24] 2472 	push	acc
      000ADF 74s04            [12] 2473 	mov	a,#(___str_22 >> 8)
      000AE1 C0 E0            [24] 2474 	push	acc
      000AE3 74 80            [12] 2475 	mov	a,#0x80
      000AE5 C0 E0            [24] 2476 	push	acc
      000AE7 12r00r00         [24] 2477 	lcall	_printf
      000AEA E5 81            [12] 2478 	mov	a,sp
      000AEC 24 FB            [12] 2479 	add	a,#0xfb
      000AEE F5 81            [12] 2480 	mov	sp,a
      000AF0 D0 00            [24] 2481 	pop	ar0
      000AF2 D0 02            [24] 2482 	pop	ar2
      000AF4 D0 03            [24] 2483 	pop	ar3
      000AF6 D0 04            [24] 2484 	pop	ar4
      000AF8 D0 05            [24] 2485 	pop	ar5
      000AFA D0 06            [24] 2486 	pop	ar6
      000AFC D0 07            [24] 2487 	pop	ar7
                                   2488 ;	menu.c:460: count++;
      000AFE 05*07            [12] 2489 	inc	_Hex_Dump_sloc5_1_0
                                   2490 ;	menu.c:461: if (count%16==0)
      000B00 E5*07            [12] 2491 	mov	a,_Hex_Dump_sloc5_1_0
      000B02 F9               [12] 2492 	mov	r1,a
      000B03 54 0F            [12] 2493 	anl	a,#0x0f
      000B05 60 04            [24] 2494 	jz	00349$
      000B07 D0 02            [24] 2495 	pop	ar2
      000B09 80 37            [24] 2496 	sjmp	00168$
      000B0B                       2497 00349$:
      000B0B D0 02            [24] 2498 	pop	ar2
                                   2499 ;	menu.c:463: printf("\n \r Address 0x%x -->  ",j);
      000B0D C0 07            [24] 2500 	push	ar7
      000B0F C0 06            [24] 2501 	push	ar6
      000B11 C0 05            [24] 2502 	push	ar5
      000B13 C0 04            [24] 2503 	push	ar4
      000B15 C0 03            [24] 2504 	push	ar3
      000B17 C0 02            [24] 2505 	push	ar2
      000B19 C0 00            [24] 2506 	push	ar0
      000B1B C0*0B            [24] 2507 	push	_Hex_Dump_sloc8_1_0
      000B1D C0*0C            [24] 2508 	push	(_Hex_Dump_sloc8_1_0 + 1)
      000B1F 74r90            [12] 2509 	mov	a,#___str_21
      000B21 C0 E0            [24] 2510 	push	acc
      000B23 74s04            [12] 2511 	mov	a,#(___str_21 >> 8)
      000B25 C0 E0            [24] 2512 	push	acc
      000B27 74 80            [12] 2513 	mov	a,#0x80
      000B29 C0 E0            [24] 2514 	push	acc
      000B2B 12r00r00         [24] 2515 	lcall	_printf
      000B2E E5 81            [12] 2516 	mov	a,sp
      000B30 24 FB            [12] 2517 	add	a,#0xfb
      000B32 F5 81            [12] 2518 	mov	sp,a
      000B34 D0 00            [24] 2519 	pop	ar0
      000B36 D0 02            [24] 2520 	pop	ar2
      000B38 D0 03            [24] 2521 	pop	ar3
      000B3A D0 04            [24] 2522 	pop	ar4
      000B3C D0 05            [24] 2523 	pop	ar5
      000B3E D0 06            [24] 2524 	pop	ar6
      000B40 D0 07            [24] 2525 	pop	ar7
      000B42                       2526 00168$:
                                   2527 ;	menu.c:448: for(int j = 0; j<=0xff; j++)
      000B42 05*0B            [12] 2528 	inc	_Hex_Dump_sloc8_1_0
      000B44 E4               [12] 2529 	clr	a
      000B45 B5*0B 02         [24] 2530 	cjne	a,_Hex_Dump_sloc8_1_0,00350$
      000B48 05*0C            [12] 2531 	inc	(_Hex_Dump_sloc8_1_0 + 1)
      000B4A                       2532 00350$:
      000B4A 02r0Ar6C         [24] 2533 	ljmp	00167$
      000B4D                       2534 00213$:
      000B4D 90r00r0D         [24] 2535 	mov	dptr,#_Hex_Dump_count_65536_85
      000B50 E5*07            [12] 2536 	mov	a,_Hex_Dump_sloc5_1_0
      000B52 F0               [24] 2537 	movx	@dptr,a
      000B53                       2538 00147$:
                                   2539 ;	menu.c:467: if (i == takechar1)    // Printing data from first to ending address in ending block
      000B53 A8*0A            [24] 2540 	mov	r0,_Hex_Dump_sloc7_1_0
      000B55 79 00            [12] 2541 	mov	r1,#0x00
      000B57 E8               [12] 2542 	mov	a,r0
      000B58 B5 04 06         [24] 2543 	cjne	a,ar4,00351$
      000B5B E9               [12] 2544 	mov	a,r1
      000B5C B5 05 02         [24] 2545 	cjne	a,ar5,00351$
      000B5F 80 03            [24] 2546 	sjmp	00352$
      000B61                       2547 00351$:
      000B61 02r0Cr46         [24] 2548 	ljmp	00174$
      000B64                       2549 00352$:
                                   2550 ;	menu.c:469: for(int j =0; j<=endaddress; j++)
      000B64 90r00r0D         [24] 2551 	mov	dptr,#_Hex_Dump_count_65536_85
      000B67 E0               [24] 2552 	movx	a,@dptr
      000B68 F9               [12] 2553 	mov	r1,a
      000B69 E4               [12] 2554 	clr	a
      000B6A F5*0B            [12] 2555 	mov	_Hex_Dump_sloc8_1_0,a
      000B6C F5*0C            [12] 2556 	mov	(_Hex_Dump_sloc8_1_0 + 1),a
      000B6E                       2557 00170$:
      000B6E C0 02            [24] 2558 	push	ar2
      000B70 8B 00            [24] 2559 	mov	ar0,r3
      000B72 7A 00            [12] 2560 	mov	r2,#0x00
      000B74 C3               [12] 2561 	clr	c
      000B75 E8               [12] 2562 	mov	a,r0
      000B76 95*0B            [12] 2563 	subb	a,_Hex_Dump_sloc8_1_0
      000B78 EA               [12] 2564 	mov	a,r2
      000B79 64 80            [12] 2565 	xrl	a,#0x80
      000B7B 85*0C F0         [24] 2566 	mov	b,(_Hex_Dump_sloc8_1_0 + 1)
      000B7E 63 F0 80         [24] 2567 	xrl	b,#0x80
      000B81 95 F0            [12] 2568 	subb	a,b
      000B83 D0 02            [24] 2569 	pop	ar2
      000B85 50 03            [24] 2570 	jnc	00353$
      000B87 02r0Cr41         [24] 2571 	ljmp	00214$
      000B8A                       2572 00353$:
                                   2573 ;	menu.c:471: StartI2C();
      000B8A C0 02            [24] 2574 	push	ar2
      000B8C C0 07            [24] 2575 	push	ar7
      000B8E C0 06            [24] 2576 	push	ar6
      000B90 C0 05            [24] 2577 	push	ar5
      000B92 C0 04            [24] 2578 	push	ar4
      000B94 C0 03            [24] 2579 	push	ar3
      000B96 C0 02            [24] 2580 	push	ar2
      000B98 C0 01            [24] 2581 	push	ar1
      000B9A 12r00r00         [24] 2582 	lcall	_StartI2C
                                   2583 ;	menu.c:473: myread= DataSendI2C(blocknumberend);
      000B9D 85*0D 82         [24] 2584 	mov	dpl,_Hex_Dump_sloc9_1_0
      000BA0 12r00r00         [24] 2585 	lcall	_DataSendI2C
                                   2586 ;	menu.c:474: myread = DataSendI2C(j);
      000BA3 A8*0B            [24] 2587 	mov	r0,_Hex_Dump_sloc8_1_0
      000BA5 88 82            [24] 2588 	mov	dpl,r0
      000BA7 12r00r00         [24] 2589 	lcall	_DataSendI2C
                                   2590 ;	menu.c:475: RestartI2C();
      000BAA 12r00r00         [24] 2591 	lcall	_RestartI2C
                                   2592 ;	menu.c:476: myread= DataSendI2C(blocknumberreadend);
      000BAD 85*02 82         [24] 2593 	mov	dpl,_Hex_Dump_sloc2_1_0
      000BB0 12r00r00         [24] 2594 	lcall	_DataSendI2C
                                   2595 ;	menu.c:477: readdataprint = I2CRead();
      000BB3 12r00r00         [24] 2596 	lcall	_I2CRead
      000BB6 A8 82            [24] 2597 	mov	r0,dpl
                                   2598 ;	menu.c:478: SendNACK();
      000BB8 C0 00            [24] 2599 	push	ar0
      000BBA 12r00r00         [24] 2600 	lcall	_SendNACK
                                   2601 ;	menu.c:479: StopI2C();
      000BBD 12r00r00         [24] 2602 	lcall	_StopI2C
      000BC0 D0 00            [24] 2603 	pop	ar0
      000BC2 D0 01            [24] 2604 	pop	ar1
      000BC4 D0 02            [24] 2605 	pop	ar2
                                   2606 ;	menu.c:480: printf(" %x",readdataprint);
      000BC6 7A 00            [12] 2607 	mov	r2,#0x00
      000BC8 C0 02            [24] 2608 	push	ar2
      000BCA C0 01            [24] 2609 	push	ar1
      000BCC C0 00            [24] 2610 	push	ar0
      000BCE C0 02            [24] 2611 	push	ar2
      000BD0 74rA7            [12] 2612 	mov	a,#___str_22
      000BD2 C0 E0            [24] 2613 	push	acc
      000BD4 74s04            [12] 2614 	mov	a,#(___str_22 >> 8)
      000BD6 C0 E0            [24] 2615 	push	acc
      000BD8 74 80            [12] 2616 	mov	a,#0x80
      000BDA C0 E0            [24] 2617 	push	acc
      000BDC 12r00r00         [24] 2618 	lcall	_printf
      000BDF E5 81            [12] 2619 	mov	a,sp
      000BE1 24 FB            [12] 2620 	add	a,#0xfb
      000BE3 F5 81            [12] 2621 	mov	sp,a
      000BE5 D0 01            [24] 2622 	pop	ar1
      000BE7 D0 02            [24] 2623 	pop	ar2
      000BE9 D0 03            [24] 2624 	pop	ar3
      000BEB D0 04            [24] 2625 	pop	ar4
      000BED D0 05            [24] 2626 	pop	ar5
      000BEF D0 06            [24] 2627 	pop	ar6
      000BF1 D0 07            [24] 2628 	pop	ar7
                                   2629 ;	menu.c:481: count++;
      000BF3 09               [12] 2630 	inc	r1
                                   2631 ;	menu.c:482: if (count%16==0)
      000BF4 89 00            [24] 2632 	mov	ar0,r1
      000BF6 E8               [12] 2633 	mov	a,r0
      000BF7 54 0F            [12] 2634 	anl	a,#0x0f
      000BF9 60 04            [24] 2635 	jz	00355$
      000BFB D0 02            [24] 2636 	pop	ar2
      000BFD 80 37            [24] 2637 	sjmp	00171$
      000BFF                       2638 00355$:
      000BFF D0 02            [24] 2639 	pop	ar2
                                   2640 ;	menu.c:484: printf("\n \r Address 0x%x -->  ",j);
      000C01 C0 07            [24] 2641 	push	ar7
      000C03 C0 06            [24] 2642 	push	ar6
      000C05 C0 05            [24] 2643 	push	ar5
      000C07 C0 04            [24] 2644 	push	ar4
      000C09 C0 03            [24] 2645 	push	ar3
      000C0B C0 02            [24] 2646 	push	ar2
      000C0D C0 01            [24] 2647 	push	ar1
      000C0F C0*0B            [24] 2648 	push	_Hex_Dump_sloc8_1_0
      000C11 C0*0C            [24] 2649 	push	(_Hex_Dump_sloc8_1_0 + 1)
      000C13 74r90            [12] 2650 	mov	a,#___str_21
      000C15 C0 E0            [24] 2651 	push	acc
      000C17 74s04            [12] 2652 	mov	a,#(___str_21 >> 8)
      000C19 C0 E0            [24] 2653 	push	acc
      000C1B 74 80            [12] 2654 	mov	a,#0x80
      000C1D C0 E0            [24] 2655 	push	acc
      000C1F 12r00r00         [24] 2656 	lcall	_printf
      000C22 E5 81            [12] 2657 	mov	a,sp
      000C24 24 FB            [12] 2658 	add	a,#0xfb
      000C26 F5 81            [12] 2659 	mov	sp,a
      000C28 D0 01            [24] 2660 	pop	ar1
      000C2A D0 02            [24] 2661 	pop	ar2
      000C2C D0 03            [24] 2662 	pop	ar3
      000C2E D0 04            [24] 2663 	pop	ar4
      000C30 D0 05            [24] 2664 	pop	ar5
      000C32 D0 06            [24] 2665 	pop	ar6
      000C34 D0 07            [24] 2666 	pop	ar7
      000C36                       2667 00171$:
                                   2668 ;	menu.c:469: for(int j =0; j<=endaddress; j++)
      000C36 05*0B            [12] 2669 	inc	_Hex_Dump_sloc8_1_0
      000C38 E4               [12] 2670 	clr	a
      000C39 B5*0B 02         [24] 2671 	cjne	a,_Hex_Dump_sloc8_1_0,00356$
      000C3C 05*0C            [12] 2672 	inc	(_Hex_Dump_sloc8_1_0 + 1)
      000C3E                       2673 00356$:
      000C3E 02r0Br6E         [24] 2674 	ljmp	00170$
      000C41                       2675 00214$:
      000C41 90r00r0D         [24] 2676 	mov	dptr,#_Hex_Dump_count_65536_85
      000C44 E9               [12] 2677 	mov	a,r1
      000C45 F0               [24] 2678 	movx	@dptr,a
      000C46                       2679 00174$:
                                   2680 ;	menu.c:421: for (i =takechar; i<= takechar1; i++)
      000C46 05*0A            [12] 2681 	inc	_Hex_Dump_sloc7_1_0
                                   2682 ;	menu.c:496: }
      000C48 02r09r27         [24] 2683 	ljmp	00173$
                                   2684 ;------------------------------------------------------------
                                   2685 ;Allocation info for local variables in function 'eereset'
                                   2686 ;------------------------------------------------------------
                                   2687 ;i                         Allocated with name '_eereset_i_65536_134'
                                   2688 ;------------------------------------------------------------
                                   2689 ;	menu.c:507: void eereset()
                                   2690 ;	-----------------------------------------
                                   2691 ;	 function eereset
                                   2692 ;	-----------------------------------------
      000C4B                       2693 _eereset:
                                   2694 ;	menu.c:510: StartI2C();
      000C4B 12r00r00         [24] 2695 	lcall	_StartI2C
                                   2696 ;	menu.c:511: SDA=1;    // to avoid acknowledge
                                   2697 ;	assignBit
      000C4E D2 94            [12] 2698 	setb	_P1_4
                                   2699 ;	menu.c:512: SCL=0;
                                   2700 ;	assignBit
      000C50 C2 95            [12] 2701 	clr	_P1_5
                                   2702 ;	menu.c:514: for (i=0;i<9;i++)  // to generate clock in nine bits of '1'
      000C52 7F 00            [12] 2703 	mov	r7,#0x00
      000C54                       2704 00102$:
                                   2705 ;	menu.c:516: SCL=1;    // toggle SCL
                                   2706 ;	assignBit
      000C54 D2 95            [12] 2707 	setb	_P1_5
                                   2708 ;	menu.c:517: SCL=0;
                                   2709 ;	assignBit
      000C56 C2 95            [12] 2710 	clr	_P1_5
                                   2711 ;	menu.c:514: for (i=0;i<9;i++)  // to generate clock in nine bits of '1'
      000C58 0F               [12] 2712 	inc	r7
      000C59 BF 09 00         [24] 2713 	cjne	r7,#0x09,00115$
      000C5C                       2714 00115$:
      000C5C 40 F6            [24] 2715 	jc	00102$
                                   2716 ;	menu.c:520: SCL=1;
                                   2717 ;	assignBit
      000C5E D2 95            [12] 2718 	setb	_P1_5
                                   2719 ;	menu.c:521: StartI2C();   // to guard against errorous write
      000C60 12r00r00         [24] 2720 	lcall	_StartI2C
                                   2721 ;	menu.c:522: StopI2C();
                                   2722 ;	menu.c:523: }
      000C63 02r00r00         [24] 2723 	ljmp	_StopI2C
                                   2724 ;------------------------------------------------------------
                                   2725 ;Allocation info for local variables in function 'Convert_Char_to_dec_val'
                                   2726 ;------------------------------------------------------------
                                   2727 ;finaldecimal              Allocated with name '_Convert_Char_to_dec_val_finaldecimal_65536_138'
                                   2728 ;temp                      Allocated with name '_Convert_Char_to_dec_val_temp_65536_138'
                                   2729 ;charstring                Allocated with name '_Convert_Char_to_dec_val_charstring_65536_138'
                                   2730 ;i                         Allocated with name '_Convert_Char_to_dec_val_i_65536_138'
                                   2731 ;------------------------------------------------------------
                                   2732 ;	menu.c:536: uint8_t Convert_Char_to_dec_val(void)
                                   2733 ;	-----------------------------------------
                                   2734 ;	 function Convert_Char_to_dec_val
                                   2735 ;	-----------------------------------------
      000C66                       2736 _Convert_Char_to_dec_val:
                                   2737 ;	menu.c:538: uint8_t finaldecimal=0;
      000C66 90r00r0E         [24] 2738 	mov	dptr,#_Convert_Char_to_dec_val_finaldecimal_65536_138
      000C69 E4               [12] 2739 	clr	a
      000C6A F0               [24] 2740 	movx	@dptr,a
                                   2741 ;	menu.c:539: uint8_t temp=0;
      000C6B 90r00r0F         [24] 2742 	mov	dptr,#_Convert_Char_to_dec_val_temp_65536_138
      000C6E F0               [24] 2743 	movx	@dptr,a
                                   2744 ;	menu.c:542: for (i=0; i<2; i++)
      000C6F 7F 00            [12] 2745 	mov	r7,#0x00
      000C71                       2746 00121$:
                                   2747 ;	menu.c:544: charstring[i] = getchar();
      000C71 EF               [12] 2748 	mov	a,r7
      000C72 24r10            [12] 2749 	add	a,#_Convert_Char_to_dec_val_charstring_65536_138
      000C74 FD               [12] 2750 	mov	r5,a
      000C75 E4               [12] 2751 	clr	a
      000C76 34s00            [12] 2752 	addc	a,#(_Convert_Char_to_dec_val_charstring_65536_138 >> 8)
      000C78 FE               [12] 2753 	mov	r6,a
      000C79 C0 07            [24] 2754 	push	ar7
      000C7B C0 06            [24] 2755 	push	ar6
      000C7D C0 05            [24] 2756 	push	ar5
      000C7F 12r00r00         [24] 2757 	lcall	_getchar
      000C82 AB 82            [24] 2758 	mov	r3,dpl
      000C84 D0 05            [24] 2759 	pop	ar5
      000C86 D0 06            [24] 2760 	pop	ar6
      000C88 8D 82            [24] 2761 	mov	dpl,r5
      000C8A 8E 83            [24] 2762 	mov	dph,r6
      000C8C EB               [12] 2763 	mov	a,r3
      000C8D F0               [24] 2764 	movx	@dptr,a
                                   2765 ;	menu.c:545: putchar(charstring[i]);
      000C8E 7C 00            [12] 2766 	mov	r4,#0x00
      000C90 8B 82            [24] 2767 	mov	dpl,r3
      000C92 8C 83            [24] 2768 	mov	dph,r4
      000C94 C0 06            [24] 2769 	push	ar6
      000C96 C0 05            [24] 2770 	push	ar5
      000C98 12r00r00         [24] 2771 	lcall	_putchar
      000C9B D0 05            [24] 2772 	pop	ar5
      000C9D D0 06            [24] 2773 	pop	ar6
      000C9F D0 07            [24] 2774 	pop	ar7
                                   2775 ;	menu.c:548: if((charstring[i]>='0' && charstring[i]<='9')|| (charstring[i]>='a' && charstring[i]<='f')|| (charstring[i]>='A' && charstring[i]<='F'))
      000CA1 8D 82            [24] 2776 	mov	dpl,r5
      000CA3 8E 83            [24] 2777 	mov	dph,r6
      000CA5 E0               [24] 2778 	movx	a,@dptr
      000CA6 FC               [12] 2779 	mov	r4,a
      000CA7 BC 30 00         [24] 2780 	cjne	r4,#0x30,00179$
      000CAA                       2781 00179$:
      000CAA 40 0A            [24] 2782 	jc	00106$
      000CAC 8D 82            [24] 2783 	mov	dpl,r5
      000CAE 8E 83            [24] 2784 	mov	dph,r6
      000CB0 E0               [24] 2785 	movx	a,@dptr
      000CB1 FD               [12] 2786 	mov  r5,a
      000CB2 24 C6            [12] 2787 	add	a,#0xff - 0x39
      000CB4 50 39            [24] 2788 	jnc	00109$
      000CB6                       2789 00106$:
      000CB6 EF               [12] 2790 	mov	a,r7
      000CB7 24r10            [12] 2791 	add	a,#_Convert_Char_to_dec_val_charstring_65536_138
      000CB9 F5 82            [12] 2792 	mov	dpl,a
      000CBB E4               [12] 2793 	clr	a
      000CBC 34s00            [12] 2794 	addc	a,#(_Convert_Char_to_dec_val_charstring_65536_138 >> 8)
      000CBE F5 83            [12] 2795 	mov	dph,a
      000CC0 E0               [24] 2796 	movx	a,@dptr
      000CC1 FE               [12] 2797 	mov	r6,a
      000CC2 BE 61 00         [24] 2798 	cjne	r6,#0x61,00182$
      000CC5                       2799 00182$:
      000CC5 40 05            [24] 2800 	jc	00108$
      000CC7 EE               [12] 2801 	mov	a,r6
      000CC8 24 99            [12] 2802 	add	a,#0xff - 0x66
      000CCA 50 23            [24] 2803 	jnc	00109$
      000CCC                       2804 00108$:
      000CCC BE 41 00         [24] 2805 	cjne	r6,#0x41,00185$
      000CCF                       2806 00185$:
      000CCF 40 05            [24] 2807 	jc	00102$
      000CD1 EE               [12] 2808 	mov	a,r6
      000CD2 24 B9            [12] 2809 	add	a,#0xff - 0x46
      000CD4 50 19            [24] 2810 	jnc	00109$
                                   2811 ;	menu.c:550: continue;
      000CD6                       2812 00102$:
                                   2813 ;	menu.c:553: printf("\n \rEnter correct value");
      000CD6 74rAB            [12] 2814 	mov	a,#___str_23
      000CD8 C0 E0            [24] 2815 	push	acc
      000CDA 74s04            [12] 2816 	mov	a,#(___str_23 >> 8)
      000CDC C0 E0            [24] 2817 	push	acc
      000CDE 74 80            [12] 2818 	mov	a,#0x80
      000CE0 C0 E0            [24] 2819 	push	acc
      000CE2 12r00r00         [24] 2820 	lcall	_printf
      000CE5 15 81            [12] 2821 	dec	sp
      000CE7 15 81            [12] 2822 	dec	sp
      000CE9 15 81            [12] 2823 	dec	sp
                                   2824 ;	menu.c:554: return 0;
      000CEB 75 82 00         [24] 2825 	mov	dpl,#0x00
      000CEE 22               [24] 2826 	ret
      000CEF                       2827 00109$:
                                   2828 ;	menu.c:542: for (i=0; i<2; i++)
      000CEF 0F               [12] 2829 	inc	r7
      000CF0 BF 02 00         [24] 2830 	cjne	r7,#0x02,00188$
      000CF3                       2831 00188$:
      000CF3 50 03            [24] 2832 	jnc	00189$
      000CF5 02r0Cr71         [24] 2833 	ljmp	00121$
      000CF8                       2834 00189$:
                                   2835 ;	menu.c:558: for (i=0; i<2; i++)
      000CF8 7F 00            [12] 2836 	mov	r7,#0x00
      000CFA                       2837 00122$:
                                   2838 ;	menu.c:560: if(charstring[i]>='0' && charstring[i]<='9')
      000CFA EF               [12] 2839 	mov	a,r7
      000CFB 24r10            [12] 2840 	add	a,#_Convert_Char_to_dec_val_charstring_65536_138
      000CFD F5 82            [12] 2841 	mov	dpl,a
      000CFF E4               [12] 2842 	clr	a
      000D00 34s00            [12] 2843 	addc	a,#(_Convert_Char_to_dec_val_charstring_65536_138 >> 8)
      000D02 F5 83            [12] 2844 	mov	dph,a
      000D04 E0               [24] 2845 	movx	a,@dptr
      000D05 FE               [12] 2846 	mov	r6,a
      000D06 BE 30 00         [24] 2847 	cjne	r6,#0x30,00190$
      000D09                       2848 00190$:
      000D09 40 0C            [24] 2849 	jc	00112$
      000D0B EE               [12] 2850 	mov	a,r6
      000D0C 24 C6            [12] 2851 	add	a,#0xff - 0x39
      000D0E 40 07            [24] 2852 	jc	00112$
                                   2853 ;	menu.c:561: temp= charstring[i]-48;
      000D10 EE               [12] 2854 	mov	a,r6
      000D11 24 D0            [12] 2855 	add	a,#0xd0
      000D13 90r00r0F         [24] 2856 	mov	dptr,#_Convert_Char_to_dec_val_temp_65536_138
      000D16 F0               [24] 2857 	movx	@dptr,a
      000D17                       2858 00112$:
                                   2859 ;	menu.c:562: if(charstring[i]>='a' && charstring[i]<='f')
      000D17 EF               [12] 2860 	mov	a,r7
      000D18 24r10            [12] 2861 	add	a,#_Convert_Char_to_dec_val_charstring_65536_138
      000D1A F5 82            [12] 2862 	mov	dpl,a
      000D1C E4               [12] 2863 	clr	a
      000D1D 34s00            [12] 2864 	addc	a,#(_Convert_Char_to_dec_val_charstring_65536_138 >> 8)
      000D1F F5 83            [12] 2865 	mov	dph,a
      000D21 E0               [24] 2866 	movx	a,@dptr
      000D22 FE               [12] 2867 	mov	r6,a
      000D23 BE 61 00         [24] 2868 	cjne	r6,#0x61,00193$
      000D26                       2869 00193$:
      000D26 40 0C            [24] 2870 	jc	00115$
      000D28 EE               [12] 2871 	mov	a,r6
      000D29 24 99            [12] 2872 	add	a,#0xff - 0x66
      000D2B 40 07            [24] 2873 	jc	00115$
                                   2874 ;	menu.c:563: temp= charstring[i]-87;
      000D2D EE               [12] 2875 	mov	a,r6
      000D2E 24 A9            [12] 2876 	add	a,#0xa9
      000D30 90r00r0F         [24] 2877 	mov	dptr,#_Convert_Char_to_dec_val_temp_65536_138
      000D33 F0               [24] 2878 	movx	@dptr,a
      000D34                       2879 00115$:
                                   2880 ;	menu.c:564: if (charstring[i]>='A' && charstring[i]<='F')
      000D34 EF               [12] 2881 	mov	a,r7
      000D35 24r10            [12] 2882 	add	a,#_Convert_Char_to_dec_val_charstring_65536_138
      000D37 F5 82            [12] 2883 	mov	dpl,a
      000D39 E4               [12] 2884 	clr	a
      000D3A 34s00            [12] 2885 	addc	a,#(_Convert_Char_to_dec_val_charstring_65536_138 >> 8)
      000D3C F5 83            [12] 2886 	mov	dph,a
      000D3E E0               [24] 2887 	movx	a,@dptr
      000D3F FE               [12] 2888 	mov	r6,a
      000D40 BE 41 00         [24] 2889 	cjne	r6,#0x41,00196$
      000D43                       2890 00196$:
      000D43 40 0C            [24] 2891 	jc	00118$
      000D45 EE               [12] 2892 	mov	a,r6
      000D46 24 B9            [12] 2893 	add	a,#0xff - 0x46
      000D48 40 07            [24] 2894 	jc	00118$
                                   2895 ;	menu.c:565: temp = charstring[i]-55;
      000D4A EE               [12] 2896 	mov	a,r6
      000D4B 24 C9            [12] 2897 	add	a,#0xc9
      000D4D 90r00r0F         [24] 2898 	mov	dptr,#_Convert_Char_to_dec_val_temp_65536_138
      000D50 F0               [24] 2899 	movx	@dptr,a
      000D51                       2900 00118$:
                                   2901 ;	menu.c:566: finaldecimal= finaldecimal*16 + temp;   // Compute final decimal value
      000D51 90r00r0E         [24] 2902 	mov	dptr,#_Convert_Char_to_dec_val_finaldecimal_65536_138
      000D54 E0               [24] 2903 	movx	a,@dptr
      000D55 C4               [12] 2904 	swap	a
      000D56 54 F0            [12] 2905 	anl	a,#0xf0
      000D58 FE               [12] 2906 	mov	r6,a
      000D59 90r00r0F         [24] 2907 	mov	dptr,#_Convert_Char_to_dec_val_temp_65536_138
      000D5C E0               [24] 2908 	movx	a,@dptr
      000D5D 90r00r0E         [24] 2909 	mov	dptr,#_Convert_Char_to_dec_val_finaldecimal_65536_138
      000D60 2E               [12] 2910 	add	a,r6
      000D61 F0               [24] 2911 	movx	@dptr,a
                                   2912 ;	menu.c:558: for (i=0; i<2; i++)
      000D62 0F               [12] 2913 	inc	r7
      000D63 BF 02 00         [24] 2914 	cjne	r7,#0x02,00199$
      000D66                       2915 00199$:
      000D66 40 92            [24] 2916 	jc	00122$
                                   2917 ;	menu.c:569: return finaldecimal;
      000D68 90r00r0E         [24] 2918 	mov	dptr,#_Convert_Char_to_dec_val_finaldecimal_65536_138
      000D6B E0               [24] 2919 	movx	a,@dptr
                                   2920 ;	menu.c:570: }
      000D6C F5 82            [12] 2921 	mov	dpl,a
      000D6E 22               [24] 2922 	ret
                                   2923 	.area CSEG    (CODE)
                                   2924 	.area CONST   (CODE)
                                   2925 	.area CONST   (CODE)
      000000                       2926 ___str_0:
      000000 0A                    2927 	.db 0x0a
      000001 0A                    2928 	.db 0x0a
      000002 20                    2929 	.ascii " "
      000003 0D                    2930 	.db 0x0d
      000004 20 23 23 23 23 23 23  2931 	.ascii " ########################### Menu ##########################"
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             20 4D 65 6E 75 20 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23
      000040 23 23 23 23 23 23 23  2932 	.ascii "##################"
             23 23 23 23 23 23 23
             23 23 23 23
      000052 00                    2933 	.db 0x00
                                   2934 	.area CSEG    (CODE)
                                   2935 	.area CONST   (CODE)
      000053                       2936 ___str_1:
      000053 0A                    2937 	.db 0x0a
      000054 20                    2938 	.ascii " "
      000055 0D                    2939 	.db 0x0d
      000056 20 23 20 31 2E 20 27  2940 	.ascii " # 1. 'w' Sign --> Write EEPROM address and a byte data valu"
             77 27 20 53 69 67 6E
             20 2D 2D 3E 20 57 72
             69 74 65 20 45 45 50
             52 4F 4D 20 61 64 64
             72 65 73 73 20 61 6E
             64 20 61 20 62 79 74
             65 20 64 61 74 61 20
             76 61 6C 75
      000092 65 20 69 6E 20 68 65  2941 	.ascii "e in hex         #"
             78 20 20 20 20 20 20
             20 20 20 23
      0000A4 00                    2942 	.db 0x00
                                   2943 	.area CSEG    (CODE)
                                   2944 	.area CONST   (CODE)
      0000A5                       2945 ___str_2:
      0000A5 0A                    2946 	.db 0x0a
      0000A6 20                    2947 	.ascii " "
      0000A7 0D                    2948 	.db 0x0d
      0000A8 20 23 20 32 2E 20 27  2949 	.ascii " # 2. 'r' Sign --> Read Data from particular EEPROM address "
             72 27 20 53 69 67 6E
             20 2D 2D 3E 20 52 65
             61 64 20 44 61 74 61
             20 66 72 6F 6D 20 70
             61 72 74 69 63 75 6C
             61 72 20 45 45 50 52
             4F 4D 20 61 64 64 72
             65 73 73 20
      0000E4 20 20 20 20 20 20 20  2950 	.ascii "                 #"
             20 20 20 20 20 20 20
             20 20 20 23
      0000F6 00                    2951 	.db 0x00
                                   2952 	.area CSEG    (CODE)
                                   2953 	.area CONST   (CODE)
      0000F7                       2954 ___str_3:
      0000F7 0A                    2955 	.db 0x0a
      0000F8 20                    2956 	.ascii " "
      0000F9 0D                    2957 	.db 0x0d
      0000FA 20 23 20 33 2E 20 27  2958 	.ascii " # 3. 'h' Sign --> Display Data contents from provided start"
             68 27 20 53 69 67 6E
             20 2D 2D 3E 20 44 69
             73 70 6C 61 79 20 44
             61 74 61 20 63 6F 6E
             74 65 6E 74 73 20 66
             72 6F 6D 20 70 72 6F
             76 69 64 65 64 20 73
             74 61 72 74
      000136 20 74 6F 20 65 6E 64  2959 	.ascii " to end address  #"
             20 61 64 64 72 65 73
             73 20 20 23
      000148 00                    2960 	.db 0x00
                                   2961 	.area CSEG    (CODE)
                                   2962 	.area CONST   (CODE)
      000149                       2963 ___str_4:
      000149 0A                    2964 	.db 0x0a
      00014A 20                    2965 	.ascii " "
      00014B 0D                    2966 	.db 0x0d
      00014C 20 23 20 34 2E 20 27  2967 	.ascii " # 4. 't' Sign --> Reset the EEPROM                         "
             74 27 20 53 69 67 6E
             20 2D 2D 3E 20 52 65
             73 65 74 20 74 68 65
             20 45 45 50 52 4F 4D
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20
      000188 20 20 20 20 20 20 20  2968 	.ascii "                 #"
             20 20 20 20 20 20 20
             20 20 20 23
      00019A 00                    2969 	.db 0x00
                                   2970 	.area CSEG    (CODE)
                                   2971 	.area CONST   (CODE)
      00019B                       2972 ___str_5:
      00019B 0A                    2973 	.db 0x0a
      00019C 20                    2974 	.ascii " "
      00019D 0D                    2975 	.db 0x0d
      00019E 20 23 23 23 23 23 23  2976 	.ascii " ###########################################################"
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23
      0001DA 23 23 23 23 23 23 23  2977 	.ascii "##################"
             23 23 23 23 23 23 23
             23 23 23 23
      0001EC 00                    2978 	.db 0x00
                                   2979 	.area CSEG    (CODE)
                                   2980 	.area CONST   (CODE)
      0001ED                       2981 ___str_6:
      0001ED 0A                    2982 	.db 0x0a
      0001EE 20                    2983 	.ascii " "
      0001EF 0D                    2984 	.db 0x0d
      0001F0 45 6E 74 65 72 20 63  2985 	.ascii "Enter character "
             68 61 72 61 63 74 65
             72 20
      000200 0A                    2986 	.db 0x0a
      000201 20                    2987 	.ascii " "
      000202 0D                    2988 	.db 0x0d
      000203 00                    2989 	.db 0x00
                                   2990 	.area CSEG    (CODE)
                                   2991 	.area CONST   (CODE)
      000204                       2992 ___str_7:
      000204 0A                    2993 	.db 0x0a
      000205 20                    2994 	.ascii " "
      000206 0D                    2995 	.db 0x0d
      000207 20 53 65 6C 65 63 74  2996 	.ascii " Select Correct option From Menu"
             20 43 6F 72 72 65 63
             74 20 6F 70 74 69 6F
             6E 20 46 72 6F 6D 20
             4D 65 6E 75
      000227 00                    2997 	.db 0x00
                                   2998 	.area CSEG    (CODE)
                                   2999 	.area CONST   (CODE)
      000228                       3000 ___str_8:
      000228 0A                    3001 	.db 0x0a
      000229 20                    3002 	.ascii " "
      00022A 0D                    3003 	.db 0x0d
      00022B 45 6E 74 65 72 20 61  3004 	.ascii "Enter a valid starting address block from 0 to 7 "
             20 76 61 6C 69 64 20
             73 74 61 72 74 69 6E
             67 20 61 64 64 72 65
             73 73 20 62 6C 6F 63
             6B 20 66 72 6F 6D 20
             30 20 74 6F 20 37 20
      00025C 0A                    3005 	.db 0x0a
      00025D 20                    3006 	.ascii " "
      00025E 0D                    3007 	.db 0x0d
      00025F 00                    3008 	.db 0x00
                                   3009 	.area CSEG    (CODE)
                                   3010 	.area CONST   (CODE)
      000260                       3011 ___str_9:
      000260 0A                    3012 	.db 0x0a
      000261 20                    3013 	.ascii " "
      000262 0D                    3014 	.db 0x0d
      000263 20 59 6F 75 20 45 6E  3015 	.ascii " You Entered block number: %d "
             74 65 72 65 64 20 62
             6C 6F 63 6B 20 6E 75
             6D 62 65 72 3A 20 25
             64 20
      000281 00                    3016 	.db 0x00
                                   3017 	.area CSEG    (CODE)
                                   3018 	.area CONST   (CODE)
      000282                       3019 ___str_10:
      000282 0A                    3020 	.db 0x0a
      000283 20                    3021 	.ascii " "
      000284 0D                    3022 	.db 0x0d
      000285 20 45 6E 74 65 72 20  3023 	.ascii " Enter correct block number between 0 to 7 n"
             63 6F 72 72 65 63 74
             20 62 6C 6F 63 6B 20
             6E 75 6D 62 65 72 20
             62 65 74 77 65 65 6E
             20 30 20 74 6F 20 37
             20 6E
      0002B1 00                    3024 	.db 0x00
                                   3025 	.area CSEG    (CODE)
                                   3026 	.area CONST   (CODE)
      0002B2                       3027 ___str_11:
      0002B2 0A                    3028 	.db 0x0a
      0002B3 20                    3029 	.ascii " "
      0002B4 0D                    3030 	.db 0x0d
      0002B5 20 43 6F 6E 74 72 6F  3031 	.ascii " Control Byte for the block number is : %X"
             6C 20 42 79 74 65 20
             66 6F 72 20 74 68 65
             20 62 6C 6F 63 6B 20
             6E 75 6D 62 65 72 20
             69 73 20 3A 20 25 58
      0002DF 00                    3032 	.db 0x00
                                   3033 	.area CSEG    (CODE)
                                   3034 	.area CONST   (CODE)
      0002E0                       3035 ___str_12:
      0002E0 0A                    3036 	.db 0x0a
      0002E1 20                    3037 	.ascii " "
      0002E2 0D                    3038 	.db 0x0d
      0002E3 20 45 6E 74 65 72 20  3039 	.ascii " Enter a Word Address between 00 to FF:  "
             61 20 57 6F 72 64 20
             41 64 64 72 65 73 73
             20 62 65 74 77 65 65
             6E 20 30 30 20 74 6F
             20 46 46 3A 20 20
      00030C 00                    3040 	.db 0x00
                                   3041 	.area CSEG    (CODE)
                                   3042 	.area CONST   (CODE)
      00030D                       3043 ___str_13:
      00030D 0A                    3044 	.db 0x0a
      00030E 20                    3045 	.ascii " "
      00030F 0D                    3046 	.db 0x0d
      000310 20 45 6E 74 65 72 20  3047 	.ascii " Enter Databyte between 00 to FF:  "
             44 61 74 61 62 79 74
             65 20 62 65 74 77 65
             65 6E 20 30 30 20 74
             6F 20 46 46 3A 20 20
      000333 00                    3048 	.db 0x00
                                   3049 	.area CSEG    (CODE)
                                   3050 	.area CONST   (CODE)
      000334                       3051 ___str_14:
      000334 0A                    3052 	.db 0x0a
      000335 20                    3053 	.ascii " "
      000336 0D                    3054 	.db 0x0d
      000337 20 44 61 74 61 20 45  3055 	.ascii " Data Entered at given Memory Location --> %x"
             6E 74 65 72 65 64 20
             61 74 20 67 69 76 65
             6E 20 4D 65 6D 6F 72
             79 20 4C 6F 63 61 74
             69 6F 6E 20 2D 2D 3E
             20 25 78
      000364 00                    3056 	.db 0x00
                                   3057 	.area CSEG    (CODE)
                                   3058 	.area CONST   (CODE)
      000365                       3059 ___str_15:
      000365 0A                    3060 	.db 0x0a
      000366 20                    3061 	.ascii " "
      000367 0D                    3062 	.db 0x0d
      000368 20 41 64 64 72 65 73  3063 	.ascii " Address 0x%x --> %x"
             73 20 30 78 25 78 20
             2D 2D 3E 20 25 78
      00037C 00                    3064 	.db 0x00
                                   3065 	.area CSEG    (CODE)
                                   3066 	.area CONST   (CODE)
      00037D                       3067 ___str_16:
      00037D 0A                    3068 	.db 0x0a
      00037E 20                    3069 	.ascii " "
      00037F 0D                    3070 	.db 0x0d
      000380 20 45 6E 74 65 72 20  3071 	.ascii " Enter a Start Address between 00 to FF:  "
             61 20 53 74 61 72 74
             20 41 64 64 72 65 73
             73 20 62 65 74 77 65
             65 6E 20 30 30 20 74
             6F 20 46 46 3A 20 20
      0003AA 00                    3072 	.db 0x00
                                   3073 	.area CSEG    (CODE)
                                   3074 	.area CONST   (CODE)
      0003AB                       3075 ___str_17:
      0003AB 0A                    3076 	.db 0x0a
      0003AC 20                    3077 	.ascii " "
      0003AD 0D                    3078 	.db 0x0d
      0003AE 45 6E 74 65 72 20 61  3079 	.ascii "Enter a valid ending address block from 0 to 7 "
             20 76 61 6C 69 64 20
             65 6E 64 69 6E 67 20
             61 64 64 72 65 73 73
             20 62 6C 6F 63 6B 20
             66 72 6F 6D 20 30 20
             74 6F 20 37 20
      0003DD 0A                    3080 	.db 0x0a
      0003DE 20                    3081 	.ascii " "
      0003DF 0D                    3082 	.db 0x0d
      0003E0 00                    3083 	.db 0x00
                                   3084 	.area CSEG    (CODE)
                                   3085 	.area CONST   (CODE)
      0003E1                       3086 ___str_18:
      0003E1 0A                    3087 	.db 0x0a
      0003E2 20                    3088 	.ascii " "
      0003E3 0D                    3089 	.db 0x0d
      0003E4 20 43 6F 6E 74 72 6F  3090 	.ascii " Control Byte for the ending block number is : %X"
             6C 20 42 79 74 65 20
             66 6F 72 20 74 68 65
             20 65 6E 64 69 6E 67
             20 62 6C 6F 63 6B 20
             6E 75 6D 62 65 72 20
             69 73 20 3A 20 25 58
      000415 00                    3091 	.db 0x00
                                   3092 	.area CSEG    (CODE)
                                   3093 	.area CONST   (CODE)
      000416                       3094 ___str_19:
      000416 0A                    3095 	.db 0x0a
      000417 20                    3096 	.ascii " "
      000418 0D                    3097 	.db 0x0d
      000419 20 45 6E 74 65 72 20  3098 	.ascii " Enter a End Address between 00 to FF:  "
             61 20 45 6E 64 20 41
             64 64 72 65 73 73 20
             62 65 74 77 65 65 6E
             20 30 30 20 74 6F 20
             46 46 3A 20 20
      000441 00                    3099 	.db 0x00
                                   3100 	.area CSEG    (CODE)
                                   3101 	.area CONST   (CODE)
      000442                       3102 ___str_20:
      000442 0A                    3103 	.db 0x0a
      000443 20                    3104 	.ascii " "
      000444 0D                    3105 	.db 0x0d
      000445 20 2A 2A 2A 2A 2A 2A  3106 	.ascii " ****************************HEX DUMP VALUES****************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 48 45 58 20 44 55
             4D 50 20 56 41 4C 55
             45 53 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      000481 2A 2A 2A 2A 2A 2A 2A  3107 	.ascii "**************"
             2A 2A 2A 2A 2A 2A 2A
      00048F 00                    3108 	.db 0x00
                                   3109 	.area CSEG    (CODE)
                                   3110 	.area CONST   (CODE)
      000490                       3111 ___str_21:
      000490 0A                    3112 	.db 0x0a
      000491 20                    3113 	.ascii " "
      000492 0D                    3114 	.db 0x0d
      000493 20 41 64 64 72 65 73  3115 	.ascii " Address 0x%x -->  "
             73 20 30 78 25 78 20
             2D 2D 3E 20 20
      0004A6 00                    3116 	.db 0x00
                                   3117 	.area CSEG    (CODE)
                                   3118 	.area CONST   (CODE)
      0004A7                       3119 ___str_22:
      0004A7 20 25 78              3120 	.ascii " %x"
      0004AA 00                    3121 	.db 0x00
                                   3122 	.area CSEG    (CODE)
                                   3123 	.area CONST   (CODE)
      0004AB                       3124 ___str_23:
      0004AB 0A                    3125 	.db 0x0a
      0004AC 20                    3126 	.ascii " "
      0004AD 0D                    3127 	.db 0x0d
      0004AE 45 6E 74 65 72 20 63  3128 	.ascii "Enter correct value"
             6F 72 72 65 63 74 20
             76 61 6C 75 65
      0004C1 00                    3129 	.db 0x00
                                   3130 	.area CSEG    (CODE)
                                   3131 	.area XINIT   (CODE)
                                   3132 	.area CABS    (ABS,CODE)
