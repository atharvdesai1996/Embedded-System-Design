                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main1
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___sdcc_heap_size
                                     12 	.globl _main
                                     13 	.globl _dataout
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _printf_tiny
                                     17 	.globl _printf
                                     18 	.globl _TF1
                                     19 	.globl _TR1
                                     20 	.globl _TF0
                                     21 	.globl _TR0
                                     22 	.globl _IE1
                                     23 	.globl _IT1
                                     24 	.globl _IE0
                                     25 	.globl _IT0
                                     26 	.globl _SM0
                                     27 	.globl _SM1
                                     28 	.globl _SM2
                                     29 	.globl _REN
                                     30 	.globl _TB8
                                     31 	.globl _RB8
                                     32 	.globl _TI
                                     33 	.globl _RI
                                     34 	.globl _CY
                                     35 	.globl _AC
                                     36 	.globl _F0
                                     37 	.globl _RS1
                                     38 	.globl _RS0
                                     39 	.globl _OV
                                     40 	.globl _F1
                                     41 	.globl _P
                                     42 	.globl _RD
                                     43 	.globl _WR
                                     44 	.globl _T1
                                     45 	.globl _T0
                                     46 	.globl _INT1
                                     47 	.globl _INT0
                                     48 	.globl _TXD0
                                     49 	.globl _TXD
                                     50 	.globl _RXD0
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _P2_7
                                     61 	.globl _P2_6
                                     62 	.globl _P2_5
                                     63 	.globl _P2_4
                                     64 	.globl _P2_3
                                     65 	.globl _P2_2
                                     66 	.globl _P2_1
                                     67 	.globl _P2_0
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _P0_7
                                     77 	.globl _P0_6
                                     78 	.globl _P0_5
                                     79 	.globl _P0_4
                                     80 	.globl _P0_3
                                     81 	.globl _P0_2
                                     82 	.globl _P0_1
                                     83 	.globl _P0_0
                                     84 	.globl _PS
                                     85 	.globl _PT1
                                     86 	.globl _PX1
                                     87 	.globl _PT0
                                     88 	.globl _PX0
                                     89 	.globl _EA
                                     90 	.globl _ES
                                     91 	.globl _ET1
                                     92 	.globl _EX1
                                     93 	.globl _ET0
                                     94 	.globl _EX0
                                     95 	.globl _BREG_F7
                                     96 	.globl _BREG_F6
                                     97 	.globl _BREG_F5
                                     98 	.globl _BREG_F4
                                     99 	.globl _BREG_F3
                                    100 	.globl _BREG_F2
                                    101 	.globl _BREG_F1
                                    102 	.globl _BREG_F0
                                    103 	.globl _TMOD
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TH1
                                    107 	.globl _TH0
                                    108 	.globl _TCON
                                    109 	.globl _SP
                                    110 	.globl _SCON
                                    111 	.globl _SBUF0
                                    112 	.globl _SBUF
                                    113 	.globl _PSW
                                    114 	.globl _PCON
                                    115 	.globl _P3
                                    116 	.globl _P2
                                    117 	.globl _P1
                                    118 	.globl _P0
                                    119 	.globl _IP
                                    120 	.globl _IE
                                    121 	.globl _DP0L
                                    122 	.globl _DPL
                                    123 	.globl _DP0H
                                    124 	.globl _DPH
                                    125 	.globl _B
                                    126 	.globl _ACC
                                    127 	.globl _ptr
                                    128 	.globl _buff01size
                                    129 	.globl ___sdcc_heap
                                    130 	.globl _takeinput
                                    131 	.globl _getchar
                                    132 	.globl _putchar
                                    133 ;--------------------------------------------------------
                                    134 ; special function registers
                                    135 ;--------------------------------------------------------
                                    136 	.area RSEG    (ABS,DATA)
      000000                        137 	.org 0x0000
                           0000E0   138 _ACC	=	0x00e0
                           0000F0   139 _B	=	0x00f0
                           000083   140 _DPH	=	0x0083
                           000083   141 _DP0H	=	0x0083
                           000082   142 _DPL	=	0x0082
                           000082   143 _DP0L	=	0x0082
                           0000A8   144 _IE	=	0x00a8
                           0000B8   145 _IP	=	0x00b8
                           000080   146 _P0	=	0x0080
                           000090   147 _P1	=	0x0090
                           0000A0   148 _P2	=	0x00a0
                           0000B0   149 _P3	=	0x00b0
                           000087   150 _PCON	=	0x0087
                           0000D0   151 _PSW	=	0x00d0
                           000099   152 _SBUF	=	0x0099
                           000099   153 _SBUF0	=	0x0099
                           000098   154 _SCON	=	0x0098
                           000081   155 _SP	=	0x0081
                           000088   156 _TCON	=	0x0088
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           00008A   159 _TL0	=	0x008a
                           00008B   160 _TL1	=	0x008b
                           000089   161 _TMOD	=	0x0089
                                    162 ;--------------------------------------------------------
                                    163 ; special function bits
                                    164 ;--------------------------------------------------------
                                    165 	.area RSEG    (ABS,DATA)
      000000                        166 	.org 0x0000
                           0000F0   167 _BREG_F0	=	0x00f0
                           0000F1   168 _BREG_F1	=	0x00f1
                           0000F2   169 _BREG_F2	=	0x00f2
                           0000F3   170 _BREG_F3	=	0x00f3
                           0000F4   171 _BREG_F4	=	0x00f4
                           0000F5   172 _BREG_F5	=	0x00f5
                           0000F6   173 _BREG_F6	=	0x00f6
                           0000F7   174 _BREG_F7	=	0x00f7
                           0000A8   175 _EX0	=	0x00a8
                           0000A9   176 _ET0	=	0x00a9
                           0000AA   177 _EX1	=	0x00aa
                           0000AB   178 _ET1	=	0x00ab
                           0000AC   179 _ES	=	0x00ac
                           0000AF   180 _EA	=	0x00af
                           0000B8   181 _PX0	=	0x00b8
                           0000B9   182 _PT0	=	0x00b9
                           0000BA   183 _PX1	=	0x00ba
                           0000BB   184 _PT1	=	0x00bb
                           0000BC   185 _PS	=	0x00bc
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000090   194 _P1_0	=	0x0090
                           000091   195 _P1_1	=	0x0091
                           000092   196 _P1_2	=	0x0092
                           000093   197 _P1_3	=	0x0093
                           000094   198 _P1_4	=	0x0094
                           000095   199 _P1_5	=	0x0095
                           000096   200 _P1_6	=	0x0096
                           000097   201 _P1_7	=	0x0097
                           0000A0   202 _P2_0	=	0x00a0
                           0000A1   203 _P2_1	=	0x00a1
                           0000A2   204 _P2_2	=	0x00a2
                           0000A3   205 _P2_3	=	0x00a3
                           0000A4   206 _P2_4	=	0x00a4
                           0000A5   207 _P2_5	=	0x00a5
                           0000A6   208 _P2_6	=	0x00a6
                           0000A7   209 _P2_7	=	0x00a7
                           0000B0   210 _P3_0	=	0x00b0
                           0000B1   211 _P3_1	=	0x00b1
                           0000B2   212 _P3_2	=	0x00b2
                           0000B3   213 _P3_3	=	0x00b3
                           0000B4   214 _P3_4	=	0x00b4
                           0000B5   215 _P3_5	=	0x00b5
                           0000B6   216 _P3_6	=	0x00b6
                           0000B7   217 _P3_7	=	0x00b7
                           0000B0   218 _RXD	=	0x00b0
                           0000B0   219 _RXD0	=	0x00b0
                           0000B1   220 _TXD	=	0x00b1
                           0000B1   221 _TXD0	=	0x00b1
                           0000B2   222 _INT0	=	0x00b2
                           0000B3   223 _INT1	=	0x00b3
                           0000B4   224 _T0	=	0x00b4
                           0000B5   225 _T1	=	0x00b5
                           0000B6   226 _WR	=	0x00b6
                           0000B7   227 _RD	=	0x00b7
                           0000D0   228 _P	=	0x00d0
                           0000D1   229 _F1	=	0x00d1
                           0000D2   230 _OV	=	0x00d2
                           0000D3   231 _RS0	=	0x00d3
                           0000D4   232 _RS1	=	0x00d4
                           0000D5   233 _F0	=	0x00d5
                           0000D6   234 _AC	=	0x00d6
                           0000D7   235 _CY	=	0x00d7
                           000098   236 _RI	=	0x0098
                           000099   237 _TI	=	0x0099
                           00009A   238 _RB8	=	0x009a
                           00009B   239 _TB8	=	0x009b
                           00009C   240 _REN	=	0x009c
                           00009D   241 _SM2	=	0x009d
                           00009E   242 _SM1	=	0x009e
                           00009F   243 _SM0	=	0x009f
                           000088   244 _IT0	=	0x0088
                           000089   245 _IE0	=	0x0089
                           00008A   246 _IT1	=	0x008a
                           00008B   247 _IE1	=	0x008b
                           00008C   248 _TR0	=	0x008c
                           00008D   249 _TF0	=	0x008d
                           00008E   250 _TR1	=	0x008e
                           00008F   251 _TF1	=	0x008f
                                    252 ;--------------------------------------------------------
                                    253 ; overlayable register banks
                                    254 ;--------------------------------------------------------
                                    255 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        256 	.ds 8
                                    257 ;--------------------------------------------------------
                                    258 ; internal ram data
                                    259 ;--------------------------------------------------------
                                    260 	.area DSEG    (DATA)
      000000                        261 _main_sloc0_1_0:
      000000                        262 	.ds 3
      000003                        263 _main_sloc1_1_0:
      000003                        264 	.ds 2
      000005                        265 _main_sloc2_1_0:
      000005                        266 	.ds 3
      000008                        267 _main_sloc3_1_0:
      000008                        268 	.ds 2
      00000A                        269 _main_sloc4_1_0:
      00000A                        270 	.ds 2
      00000C                        271 _main_sloc5_1_0:
      00000C                        272 	.ds 2
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable items in internal ram 
                                    275 ;--------------------------------------------------------
                                    276 ;--------------------------------------------------------
                                    277 ; Stack segment in internal ram 
                                    278 ;--------------------------------------------------------
                                    279 	.area	SSEG
      000000                        280 __start__stack:
      000000                        281 	.ds	1
                                    282 
                                    283 ;--------------------------------------------------------
                                    284 ; indirectly addressable internal ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area ISEG    (DATA)
                                    287 ;--------------------------------------------------------
                                    288 ; absolute internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area IABS    (ABS,DATA)
                                    291 	.area IABS    (ABS,DATA)
                                    292 ;--------------------------------------------------------
                                    293 ; bit data
                                    294 ;--------------------------------------------------------
                                    295 	.area BSEG    (BIT)
                                    296 ;--------------------------------------------------------
                                    297 ; paged external ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area PSEG    (PAG,XDATA)
                                    300 ;--------------------------------------------------------
                                    301 ; external ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area XSEG    (XDATA)
      000000                        304 ___sdcc_heap::
      000000                        305 	.ds 4000
      000FA0                        306 _dataout_x_65536_62:
      000FA0                        307 	.ds 1
      000FA1                        308 _buff01size::
      000FA1                        309 	.ds 2
      000FA3                        310 _main_buffer_131072_67:
      000FA3                        311 	.ds 60
      000FDF                        312 _main_buffnewcount_131072_67:
      000FDF                        313 	.ds 2
      000FE1                        314 _main_totalstoragecount_131072_67:
      000FE1                        315 	.ds 2
      000FE3                        316 _main_startaddr_131072_67:
      000FE3                        317 	.ds 40
      00100B                        318 _main_endaddr_131072_67:
      00100B                        319 	.ds 40
      001033                        320 _main_buffersizes_131072_67:
      001033                        321 	.ds 40
      00105B                        322 _main_storagecountall_131072_67:
      00105B                        323 	.ds 40
      001083                        324 _main_totalcharafterQ_131072_67:
      001083                        325 	.ds 2
      001085                        326 _main_freespacesbuff_131072_67:
      001085                        327 	.ds 40
      0010AD                        328 _takeinput_number_65537_104:
      0010AD                        329 	.ds 2
      0010AF                        330 _putchar_b_65536_110:
      0010AF                        331 	.ds 2
                                    332 ;--------------------------------------------------------
                                    333 ; absolute external ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area XABS    (ABS,XDATA)
                                    336 ;--------------------------------------------------------
                                    337 ; external initialized ram data
                                    338 ;--------------------------------------------------------
                                    339 	.area XISEG   (XDATA)
      000000                        340 _ptr::
      000000                        341 	.ds 2
                                    342 	.area HOME    (CODE)
                                    343 	.area GSINIT0 (CODE)
                                    344 	.area GSINIT1 (CODE)
                                    345 	.area GSINIT2 (CODE)
                                    346 	.area GSINIT3 (CODE)
                                    347 	.area GSINIT4 (CODE)
                                    348 	.area GSINIT5 (CODE)
                                    349 	.area GSINIT  (CODE)
                                    350 	.area GSFINAL (CODE)
                                    351 	.area CSEG    (CODE)
                                    352 ;--------------------------------------------------------
                                    353 ; interrupt vector 
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
      000000                        356 __interrupt_vect:
      000000 02r00r00         [24]  357 	ljmp	__sdcc_gsinit_startup
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.globl __sdcc_gsinit_startup
                                    366 	.globl __sdcc_program_startup
                                    367 	.globl __start__stack
                                    368 	.globl __mcs51_genXINIT
                                    369 	.globl __mcs51_genXRAMCLEAR
                                    370 	.globl __mcs51_genRAMCLEAR
                                    371 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  372 	ljmp	__sdcc_program_startup
                                    373 ;--------------------------------------------------------
                                    374 ; Home
                                    375 ;--------------------------------------------------------
                                    376 	.area HOME    (CODE)
                                    377 	.area HOME    (CODE)
      000003                        378 __sdcc_program_startup:
      000003 02r00r12         [24]  379 	ljmp	_main
                                    380 ;	return from main will return to caller
                                    381 ;--------------------------------------------------------
                                    382 ; code
                                    383 ;--------------------------------------------------------
                                    384 	.area CSEG    (CODE)
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'dataout'
                                    387 ;------------------------------------------------------------
                                    388 ;x                         Allocated with name '_dataout_x_65536_62'
                                    389 ;ptr                       Allocated with name '_dataout_ptr_65536_63'
                                    390 ;------------------------------------------------------------
                                    391 ;	main1.c:25: void dataout(uint8_t x)
                                    392 ;	-----------------------------------------
                                    393 ;	 function dataout
                                    394 ;	-----------------------------------------
      000000                        395 _dataout:
                           000007   396 	ar7 = 0x07
                           000006   397 	ar6 = 0x06
                           000005   398 	ar5 = 0x05
                           000004   399 	ar4 = 0x04
                           000003   400 	ar3 = 0x03
                           000002   401 	ar2 = 0x02
                           000001   402 	ar1 = 0x01
                           000000   403 	ar0 = 0x00
      000000 E5 82            [12]  404 	mov	a,dpl
      000002 90r0FrA0         [24]  405 	mov	dptr,#_dataout_x_65536_62
      000005 F0               [24]  406 	movx	@dptr,a
                                    407 ;	main1.c:29: *ptr = (x);
      000006 E0               [24]  408 	movx	a,@dptr
      000007 FF               [12]  409 	mov	r7,a
      000008 90 FF FF         [24]  410 	mov	dptr,#0xffff
      00000B 75 F0 00         [24]  411 	mov	b,#0x00
      00000E EF               [12]  412 	mov	a,r7
                                    413 ;	main1.c:30: }
      00000F 02r00r00         [24]  414 	ljmp	__gptrput
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'main'
                                    417 ;------------------------------------------------------------
                                    418 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    419 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    420 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    421 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    422 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    423 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                    424 ;buffer                    Allocated with name '_main_buffer_131072_67'
                                    425 ;buffnewcount              Allocated with name '_main_buffnewcount_131072_67'
                                    426 ;totalcharcount            Allocated with name '_main_totalcharcount_131072_67'
                                    427 ;totalstoragecount         Allocated with name '_main_totalstoragecount_131072_67'
                                    428 ;startaddr                 Allocated with name '_main_startaddr_131072_67'
                                    429 ;endaddr                   Allocated with name '_main_endaddr_131072_67'
                                    430 ;buffersizes               Allocated with name '_main_buffersizes_131072_67'
                                    431 ;storagecountall           Allocated with name '_main_storagecountall_131072_67'
                                    432 ;totalcharafterQ           Allocated with name '_main_totalcharafterQ_131072_67'
                                    433 ;freespacesbuff            Allocated with name '_main_freespacesbuff_131072_67'
                                    434 ;m                         Allocated with name '_main_m_196609_69'
                                    435 ;takechar                  Allocated with name '_main_takechar_196609_76'
                                    436 ;n                         Allocated with name '_main_n_262146_80'
                                    437 ;buffno                    Allocated with name '_main_buffno_262146_83'
                                    438 ;d                         Allocated with name '_main_d_262146_87'
                                    439 ;e                         Allocated with name '_main_e_262146_87'
                                    440 ;g                         Allocated with name '_main_g_262146_95'
                                    441 ;k                         Allocated with name '_main_k_262146_100'
                                    442 ;------------------------------------------------------------
                                    443 ;	main1.c:37: void main(void)
                                    444 ;	-----------------------------------------
                                    445 ;	 function main
                                    446 ;	-----------------------------------------
      000012                        447 _main:
                                    448 ;	main1.c:39: while(1)
      000012                        449 00153$:
                                    450 ;	main1.c:47: uint16_t totalstoragecount = 0;
      000012 90r0FrE1         [24]  451 	mov	dptr,#_main_totalstoragecount_131072_67
      000015 E4               [12]  452 	clr	a
      000016 F0               [24]  453 	movx	@dptr,a
      000017 A3               [24]  454 	inc	dptr
      000018 F0               [24]  455 	movx	@dptr,a
                                    456 ;	main1.c:52: uint16_t totalcharafterQ =0;
      000019 90r10r83         [24]  457 	mov	dptr,#_main_totalcharafterQ_131072_67
      00001C F0               [24]  458 	movx	@dptr,a
      00001D A3               [24]  459 	inc	dptr
      00001E F0               [24]  460 	movx	@dptr,a
                                    461 ;	main1.c:61: while(1)
      00001F 7E 00            [12]  462 	mov	r6,#0x00
      000021 7F 00            [12]  463 	mov	r7,#0x00
      000023                        464 00114$:
                                    465 ;	main1.c:64: printf("### Enter a valid buffer size for buffer 0 and 1 ###");
      000023 C0 07            [24]  466 	push	ar7
      000025 C0 06            [24]  467 	push	ar6
      000027 74r02            [12]  468 	mov	a,#___str_0
      000029 C0 E0            [24]  469 	push	acc
      00002B 74s00            [12]  470 	mov	a,#(___str_0 >> 8)
      00002D C0 E0            [24]  471 	push	acc
      00002F 74 80            [12]  472 	mov	a,#0x80
      000031 C0 E0            [24]  473 	push	acc
      000033 12r00r00         [24]  474 	lcall	_printf
      000036 15 81            [12]  475 	dec	sp
      000038 15 81            [12]  476 	dec	sp
      00003A 15 81            [12]  477 	dec	sp
                                    478 ;	main1.c:65: uint16_t m= takeinput();
      00003C 12r0Br92         [24]  479 	lcall	_takeinput
      00003F AC 82            [24]  480 	mov	r4,dpl
      000041 AD 83            [24]  481 	mov	r5,dph
      000043 D0 06            [24]  482 	pop	ar6
      000045 D0 07            [24]  483 	pop	ar7
                                    484 ;	main1.c:66: if (m>=32 && m<=3200 && m%16==0)
      000047 8C 02            [24]  485 	mov	ar2,r4
      000049 8D 03            [24]  486 	mov	ar3,r5
      00004B C3               [12]  487 	clr	c
      00004C EA               [12]  488 	mov	a,r2
      00004D 94 20            [12]  489 	subb	a,#0x20
      00004F EB               [12]  490 	mov	a,r3
      000050 94 00            [12]  491 	subb	a,#0x00
      000052 40 42            [24]  492 	jc	00102$
      000054 8C 02            [24]  493 	mov	ar2,r4
      000056 8D 03            [24]  494 	mov	ar3,r5
      000058 C3               [12]  495 	clr	c
      000059 74 80            [12]  496 	mov	a,#0x80
      00005B 9A               [12]  497 	subb	a,r2
      00005C 74 0C            [12]  498 	mov	a,#0x0c
      00005E 9B               [12]  499 	subb	a,r3
      00005F 40 35            [24]  500 	jc	00102$
      000061 8C 02            [24]  501 	mov	ar2,r4
      000063 8D 03            [24]  502 	mov	ar3,r5
      000065 EA               [12]  503 	mov	a,r2
      000066 54 0F            [12]  504 	anl	a,#0x0f
      000068 70 2C            [24]  505 	jnz	00102$
                                    506 ;	main1.c:68: buffer[0] = (uint8_t *)malloc(m);
      00006A 8C 82            [24]  507 	mov	dpl,r4
      00006C 8D 83            [24]  508 	mov	dph,r5
      00006E C0 07            [24]  509 	push	ar7
      000070 C0 06            [24]  510 	push	ar6
      000072 C0 05            [24]  511 	push	ar5
      000074 C0 04            [24]  512 	push	ar4
      000076 12r00r00         [24]  513 	lcall	_malloc
      000079 AA 82            [24]  514 	mov	r2,dpl
      00007B AB 83            [24]  515 	mov	r3,dph
      00007D D0 04            [24]  516 	pop	ar4
      00007F D0 05            [24]  517 	pop	ar5
      000081 D0 06            [24]  518 	pop	ar6
      000083 D0 07            [24]  519 	pop	ar7
      000085 8B 01            [24]  520 	mov	ar1,r3
      000087 7B 00            [12]  521 	mov	r3,#0x00
      000089 90r0FrA3         [24]  522 	mov	dptr,#_main_buffer_131072_67
      00008C EA               [12]  523 	mov	a,r2
      00008D F0               [24]  524 	movx	@dptr,a
      00008E E9               [12]  525 	mov	a,r1
      00008F A3               [24]  526 	inc	dptr
      000090 F0               [24]  527 	movx	@dptr,a
      000091 EB               [12]  528 	mov	a,r3
      000092 A3               [24]  529 	inc	dptr
      000093 F0               [24]  530 	movx	@dptr,a
      000094 80 09            [24]  531 	sjmp	00103$
      000096                        532 00102$:
                                    533 ;	main1.c:73: buffer[0] = 0;
      000096 90r0FrA3         [24]  534 	mov	dptr,#_main_buffer_131072_67
      000099 E4               [12]  535 	clr	a
      00009A F0               [24]  536 	movx	@dptr,a
      00009B A3               [24]  537 	inc	dptr
      00009C F0               [24]  538 	movx	@dptr,a
      00009D A3               [24]  539 	inc	dptr
      00009E F0               [24]  540 	movx	@dptr,a
      00009F                        541 00103$:
                                    542 ;	main1.c:77: if (buffer[0] == 0)
      00009F 90r0FrA3         [24]  543 	mov	dptr,#_main_buffer_131072_67
      0000A2 E0               [24]  544 	movx	a,@dptr
      0000A3 F9               [12]  545 	mov	r1,a
      0000A4 A3               [24]  546 	inc	dptr
      0000A5 E0               [24]  547 	movx	a,@dptr
      0000A6 FA               [12]  548 	mov	r2,a
      0000A7 A3               [24]  549 	inc	dptr
      0000A8 E0               [24]  550 	movx	a,@dptr
      0000A9 E9               [12]  551 	mov	a,r1
      0000AA 4A               [12]  552 	orl	a,r2
      0000AB 70 22            [24]  553 	jnz	00107$
                                    554 ;	main1.c:78: printf_tiny("\n \rMalloc buffer0 failed\n\r");
      0000AD C0 07            [24]  555 	push	ar7
      0000AF C0 06            [24]  556 	push	ar6
      0000B1 C0 05            [24]  557 	push	ar5
      0000B3 C0 04            [24]  558 	push	ar4
      0000B5 74r37            [12]  559 	mov	a,#___str_1
      0000B7 C0 E0            [24]  560 	push	acc
      0000B9 74s00            [12]  561 	mov	a,#(___str_1 >> 8)
      0000BB C0 E0            [24]  562 	push	acc
      0000BD 12r00r00         [24]  563 	lcall	_printf_tiny
      0000C0 15 81            [12]  564 	dec	sp
      0000C2 15 81            [12]  565 	dec	sp
      0000C4 D0 04            [24]  566 	pop	ar4
      0000C6 D0 05            [24]  567 	pop	ar5
      0000C8 D0 06            [24]  568 	pop	ar6
      0000CA D0 07            [24]  569 	pop	ar7
      0000CC 02r01r61         [24]  570 	ljmp	00108$
      0000CF                        571 00107$:
                                    572 ;	main1.c:81: printf_tiny("\n \rMalloc buffer0 passed\n\r");
      0000CF C0 07            [24]  573 	push	ar7
      0000D1 C0 06            [24]  574 	push	ar6
      0000D3 C0 05            [24]  575 	push	ar5
      0000D5 C0 04            [24]  576 	push	ar4
      0000D7 74r52            [12]  577 	mov	a,#___str_2
      0000D9 C0 E0            [24]  578 	push	acc
      0000DB 74s00            [12]  579 	mov	a,#(___str_2 >> 8)
      0000DD C0 E0            [24]  580 	push	acc
      0000DF 12r00r00         [24]  581 	lcall	_printf_tiny
      0000E2 15 81            [12]  582 	dec	sp
      0000E4 15 81            [12]  583 	dec	sp
      0000E6 D0 04            [24]  584 	pop	ar4
      0000E8 D0 05            [24]  585 	pop	ar5
      0000EA D0 06            [24]  586 	pop	ar6
      0000EC D0 07            [24]  587 	pop	ar7
                                    588 ;	main1.c:83: startaddr[0]= (int)buffer[0];
      0000EE 90r0FrA3         [24]  589 	mov	dptr,#_main_buffer_131072_67
      0000F1 E0               [24]  590 	movx	a,@dptr
      0000F2 FA               [12]  591 	mov	r2,a
      0000F3 A3               [24]  592 	inc	dptr
      0000F4 E0               [24]  593 	movx	a,@dptr
      0000F5 FB               [12]  594 	mov	r3,a
      0000F6 90r0FrE3         [24]  595 	mov	dptr,#_main_startaddr_131072_67
      0000F9 EA               [12]  596 	mov	a,r2
      0000FA F0               [24]  597 	movx	@dptr,a
      0000FB EB               [12]  598 	mov	a,r3
      0000FC A3               [24]  599 	inc	dptr
      0000FD F0               [24]  600 	movx	@dptr,a
                                    601 ;	main1.c:84: endaddr[0]= (int)(buffer[0]+ m);
      0000FE 90r0FrA3         [24]  602 	mov	dptr,#_main_buffer_131072_67
      000101 E0               [24]  603 	movx	a,@dptr
      000102 F9               [12]  604 	mov	r1,a
      000103 A3               [24]  605 	inc	dptr
      000104 E0               [24]  606 	movx	a,@dptr
      000105 FA               [12]  607 	mov	r2,a
      000106 A3               [24]  608 	inc	dptr
      000107 E0               [24]  609 	movx	a,@dptr
      000108 EC               [12]  610 	mov	a,r4
      000109 29               [12]  611 	add	a,r1
      00010A F9               [12]  612 	mov	r1,a
      00010B ED               [12]  613 	mov	a,r5
      00010C 3A               [12]  614 	addc	a,r2
      00010D FA               [12]  615 	mov	r2,a
      00010E 90r10r0B         [24]  616 	mov	dptr,#_main_endaddr_131072_67
      000111 E9               [12]  617 	mov	a,r1
      000112 F0               [24]  618 	movx	@dptr,a
      000113 EA               [12]  619 	mov	a,r2
      000114 A3               [24]  620 	inc	dptr
      000115 F0               [24]  621 	movx	@dptr,a
                                    622 ;	main1.c:85: buffersizes[0]= m;
      000116 90r10r33         [24]  623 	mov	dptr,#_main_buffersizes_131072_67
      000119 EC               [12]  624 	mov	a,r4
      00011A F0               [24]  625 	movx	@dptr,a
      00011B ED               [12]  626 	mov	a,r5
      00011C A3               [24]  627 	inc	dptr
      00011D F0               [24]  628 	movx	@dptr,a
                                    629 ;	main1.c:86: printf("\n \rBuffer 0 created at :0X0%x \n \r",startaddr[buffnewcount]);
      00011E EE               [12]  630 	mov	a,r6
      00011F 2E               [12]  631 	add	a,r6
      000120 FA               [12]  632 	mov	r2,a
      000121 EF               [12]  633 	mov	a,r7
      000122 33               [12]  634 	rlc	a
      000123 FB               [12]  635 	mov	r3,a
      000124 EA               [12]  636 	mov	a,r2
      000125 24rE3            [12]  637 	add	a,#_main_startaddr_131072_67
      000127 F5 82            [12]  638 	mov	dpl,a
      000129 EB               [12]  639 	mov	a,r3
      00012A 34s0F            [12]  640 	addc	a,#(_main_startaddr_131072_67 >> 8)
      00012C F5 83            [12]  641 	mov	dph,a
      00012E E0               [24]  642 	movx	a,@dptr
      00012F FA               [12]  643 	mov	r2,a
      000130 A3               [24]  644 	inc	dptr
      000131 E0               [24]  645 	movx	a,@dptr
      000132 FB               [12]  646 	mov	r3,a
      000133 C0 07            [24]  647 	push	ar7
      000135 C0 06            [24]  648 	push	ar6
      000137 C0 05            [24]  649 	push	ar5
      000139 C0 04            [24]  650 	push	ar4
      00013B C0 02            [24]  651 	push	ar2
      00013D C0 03            [24]  652 	push	ar3
      00013F 74r6D            [12]  653 	mov	a,#___str_3
      000141 C0 E0            [24]  654 	push	acc
      000143 74s00            [12]  655 	mov	a,#(___str_3 >> 8)
      000145 C0 E0            [24]  656 	push	acc
      000147 74 80            [12]  657 	mov	a,#0x80
      000149 C0 E0            [24]  658 	push	acc
      00014B 12r00r00         [24]  659 	lcall	_printf
      00014E E5 81            [12]  660 	mov	a,sp
      000150 24 FB            [12]  661 	add	a,#0xfb
      000152 F5 81            [12]  662 	mov	sp,a
      000154 D0 04            [24]  663 	pop	ar4
      000156 D0 05            [24]  664 	pop	ar5
      000158 D0 06            [24]  665 	pop	ar6
      00015A D0 07            [24]  666 	pop	ar7
                                    667 ;	main1.c:87: buffnewcount++;
      00015C 0E               [12]  668 	inc	r6
      00015D BE 00 01         [24]  669 	cjne	r6,#0x00,00312$
      000160 0F               [12]  670 	inc	r7
      000161                        671 00312$:
      000161                        672 00108$:
                                    673 ;	main1.c:90: if (m<1980 && buffer[0] !=0)
      000161 8C 02            [24]  674 	mov	ar2,r4
      000163 8D 03            [24]  675 	mov	ar3,r5
      000165 C3               [12]  676 	clr	c
      000166 EA               [12]  677 	mov	a,r2
      000167 94 BC            [12]  678 	subb	a,#0xbc
      000169 EB               [12]  679 	mov	a,r3
      00016A 94 07            [12]  680 	subb	a,#0x07
      00016C 40 03            [24]  681 	jc	00313$
      00016E 02r02r58         [24]  682 	ljmp	00110$
      000171                        683 00313$:
      000171 90r0FrA3         [24]  684 	mov	dptr,#_main_buffer_131072_67
      000174 E0               [24]  685 	movx	a,@dptr
      000175 F9               [12]  686 	mov	r1,a
      000176 A3               [24]  687 	inc	dptr
      000177 E0               [24]  688 	movx	a,@dptr
      000178 FA               [12]  689 	mov	r2,a
      000179 A3               [24]  690 	inc	dptr
      00017A E0               [24]  691 	movx	a,@dptr
      00017B FB               [12]  692 	mov	r3,a
      00017C E9               [12]  693 	mov	a,r1
      00017D 4A               [12]  694 	orl	a,r2
      00017E 70 03            [24]  695 	jnz	00314$
      000180 02r02r58         [24]  696 	ljmp	00110$
      000183                        697 00314$:
                                    698 ;	main1.c:92: buffer[1] = (uint8_t *)malloc(m);
      000183 8C 82            [24]  699 	mov	dpl,r4
      000185 8D 83            [24]  700 	mov	dph,r5
      000187 C0 07            [24]  701 	push	ar7
      000189 C0 06            [24]  702 	push	ar6
      00018B C0 05            [24]  703 	push	ar5
      00018D C0 04            [24]  704 	push	ar4
      00018F 12r00r00         [24]  705 	lcall	_malloc
      000192 AA 82            [24]  706 	mov	r2,dpl
      000194 AB 83            [24]  707 	mov	r3,dph
      000196 D0 04            [24]  708 	pop	ar4
      000198 D0 05            [24]  709 	pop	ar5
      00019A 8A*00            [24]  710 	mov	_main_sloc0_1_0,r2
      00019C 8B*01            [24]  711 	mov	(_main_sloc0_1_0 + 1),r3
      00019E 75*02 00         [24]  712 	mov	(_main_sloc0_1_0 + 2),#0x00
      0001A1 90r0FrA6         [24]  713 	mov	dptr,#(_main_buffer_131072_67 + 0x0003)
      0001A4 E5*00            [12]  714 	mov	a,_main_sloc0_1_0
      0001A6 F0               [24]  715 	movx	@dptr,a
      0001A7 E5*01            [12]  716 	mov	a,(_main_sloc0_1_0 + 1)
      0001A9 A3               [24]  717 	inc	dptr
      0001AA F0               [24]  718 	movx	@dptr,a
      0001AB E5*02            [12]  719 	mov	a,(_main_sloc0_1_0 + 2)
      0001AD A3               [24]  720 	inc	dptr
      0001AE F0               [24]  721 	movx	@dptr,a
                                    722 ;	main1.c:93: startaddr[1]= (int)buffer[1];
      0001AF A8*00            [24]  723 	mov	r0,_main_sloc0_1_0
      0001B1 AB*01            [24]  724 	mov	r3,(_main_sloc0_1_0 + 1)
      0001B3 90r0FrE5         [24]  725 	mov	dptr,#(_main_startaddr_131072_67 + 0x0002)
      0001B6 E8               [12]  726 	mov	a,r0
      0001B7 F0               [24]  727 	movx	@dptr,a
      0001B8 EB               [12]  728 	mov	a,r3
      0001B9 A3               [24]  729 	inc	dptr
      0001BA F0               [24]  730 	movx	@dptr,a
                                    731 ;	main1.c:94: endaddr[1]= (int)(buffer[1]+ m);
      0001BB EC               [12]  732 	mov	a,r4
      0001BC 25*00            [12]  733 	add	a,_main_sloc0_1_0
      0001BE F9               [12]  734 	mov	r1,a
      0001BF ED               [12]  735 	mov	a,r5
      0001C0 35*01            [12]  736 	addc	a,(_main_sloc0_1_0 + 1)
      0001C2 FA               [12]  737 	mov	r2,a
      0001C3 90r10r0D         [24]  738 	mov	dptr,#(_main_endaddr_131072_67 + 0x0002)
      0001C6 E9               [12]  739 	mov	a,r1
      0001C7 F0               [24]  740 	movx	@dptr,a
      0001C8 EA               [12]  741 	mov	a,r2
      0001C9 A3               [24]  742 	inc	dptr
      0001CA F0               [24]  743 	movx	@dptr,a
                                    744 ;	main1.c:95: buffersizes[1]= m;
      0001CB 90r10r35         [24]  745 	mov	dptr,#(_main_buffersizes_131072_67 + 0x0002)
      0001CE EC               [12]  746 	mov	a,r4
      0001CF F0               [24]  747 	movx	@dptr,a
      0001D0 ED               [12]  748 	mov	a,r5
      0001D1 A3               [24]  749 	inc	dptr
      0001D2 F0               [24]  750 	movx	@dptr,a
                                    751 ;	main1.c:96: buff01size=m;
      0001D3 90r0FrA1         [24]  752 	mov	dptr,#_buff01size
      0001D6 EC               [12]  753 	mov	a,r4
      0001D7 F0               [24]  754 	movx	@dptr,a
      0001D8 ED               [12]  755 	mov	a,r5
      0001D9 A3               [24]  756 	inc	dptr
      0001DA F0               [24]  757 	movx	@dptr,a
                                    758 ;	main1.c:97: printf_tiny("\n \rMalloc buffer1 passed \n \r");
      0001DB 74r8F            [12]  759 	mov	a,#___str_4
      0001DD C0 E0            [24]  760 	push	acc
      0001DF 74s00            [12]  761 	mov	a,#(___str_4 >> 8)
      0001E1 C0 E0            [24]  762 	push	acc
      0001E3 12r00r00         [24]  763 	lcall	_printf_tiny
      0001E6 15 81            [12]  764 	dec	sp
      0001E8 15 81            [12]  765 	dec	sp
      0001EA D0 06            [24]  766 	pop	ar6
      0001EC D0 07            [24]  767 	pop	ar7
                                    768 ;	main1.c:98: printf("\n \rBuffer 1 created at : :0X0%x \n \r",startaddr[buffnewcount]);
      0001EE EE               [12]  769 	mov	a,r6
      0001EF 2E               [12]  770 	add	a,r6
      0001F0 FC               [12]  771 	mov	r4,a
      0001F1 EF               [12]  772 	mov	a,r7
      0001F2 33               [12]  773 	rlc	a
      0001F3 FD               [12]  774 	mov	r5,a
      0001F4 EC               [12]  775 	mov	a,r4
      0001F5 24rE3            [12]  776 	add	a,#_main_startaddr_131072_67
      0001F7 F5 82            [12]  777 	mov	dpl,a
      0001F9 ED               [12]  778 	mov	a,r5
      0001FA 34s0F            [12]  779 	addc	a,#(_main_startaddr_131072_67 >> 8)
      0001FC F5 83            [12]  780 	mov	dph,a
      0001FE E0               [24]  781 	movx	a,@dptr
      0001FF FC               [12]  782 	mov	r4,a
      000200 A3               [24]  783 	inc	dptr
      000201 E0               [24]  784 	movx	a,@dptr
      000202 FD               [12]  785 	mov	r5,a
      000203 C0 07            [24]  786 	push	ar7
      000205 C0 06            [24]  787 	push	ar6
      000207 C0 04            [24]  788 	push	ar4
      000209 C0 05            [24]  789 	push	ar5
      00020B 74rAC            [12]  790 	mov	a,#___str_5
      00020D C0 E0            [24]  791 	push	acc
      00020F 74s00            [12]  792 	mov	a,#(___str_5 >> 8)
      000211 C0 E0            [24]  793 	push	acc
      000213 74 80            [12]  794 	mov	a,#0x80
      000215 C0 E0            [24]  795 	push	acc
      000217 12r00r00         [24]  796 	lcall	_printf
      00021A E5 81            [12]  797 	mov	a,sp
      00021C 24 FB            [12]  798 	add	a,#0xfb
      00021E F5 81            [12]  799 	mov	sp,a
      000220 D0 06            [24]  800 	pop	ar6
      000222 D0 07            [24]  801 	pop	ar7
                                    802 ;	main1.c:99: buffnewcount++;
      000224 90r0FrDF         [24]  803 	mov	dptr,#_main_buffnewcount_131072_67
      000227 74 01            [12]  804 	mov	a,#0x01
      000229 2E               [12]  805 	add	a,r6
      00022A F0               [24]  806 	movx	@dptr,a
      00022B E4               [12]  807 	clr	a
      00022C 3F               [12]  808 	addc	a,r7
      00022D A3               [24]  809 	inc	dptr
      00022E F0               [24]  810 	movx	@dptr,a
                                    811 ;	main1.c:100: storagecountall[0]=0;
      00022F 90r10r5B         [24]  812 	mov	dptr,#_main_storagecountall_131072_67
      000232 E4               [12]  813 	clr	a
      000233 F0               [24]  814 	movx	@dptr,a
      000234 A3               [24]  815 	inc	dptr
      000235 F0               [24]  816 	movx	@dptr,a
                                    817 ;	main1.c:101: freespacesbuff[0]=buff01size;
      000236 90r0FrA1         [24]  818 	mov	dptr,#_buff01size
      000239 E0               [24]  819 	movx	a,@dptr
      00023A FC               [12]  820 	mov	r4,a
      00023B A3               [24]  821 	inc	dptr
      00023C E0               [24]  822 	movx	a,@dptr
      00023D FD               [12]  823 	mov	r5,a
      00023E 90r10r85         [24]  824 	mov	dptr,#_main_freespacesbuff_131072_67
      000241 EC               [12]  825 	mov	a,r4
      000242 F0               [24]  826 	movx	@dptr,a
      000243 ED               [12]  827 	mov	a,r5
      000244 A3               [24]  828 	inc	dptr
      000245 F0               [24]  829 	movx	@dptr,a
                                    830 ;	main1.c:102: freespacesbuff[1]= buff01size;
      000246 90r0FrA1         [24]  831 	mov	dptr,#_buff01size
      000249 E0               [24]  832 	movx	a,@dptr
      00024A FC               [12]  833 	mov	r4,a
      00024B A3               [24]  834 	inc	dptr
      00024C E0               [24]  835 	movx	a,@dptr
      00024D FD               [12]  836 	mov	r5,a
      00024E 90r10r87         [24]  837 	mov	dptr,#(_main_freespacesbuff_131072_67 + 0x0002)
      000251 EC               [12]  838 	mov	a,r4
      000252 F0               [24]  839 	movx	@dptr,a
      000253 ED               [12]  840 	mov	a,r5
      000254 A3               [24]  841 	inc	dptr
      000255 F0               [24]  842 	movx	@dptr,a
                                    843 ;	main1.c:103: break;
      000256 80 2E            [24]  844 	sjmp	00197$
      000258                        845 00110$:
                                    846 ;	main1.c:107: free(buffer[0]);
      000258 90r0FrA3         [24]  847 	mov	dptr,#_main_buffer_131072_67
      00025B E0               [24]  848 	movx	a,@dptr
      00025C FB               [12]  849 	mov	r3,a
      00025D A3               [24]  850 	inc	dptr
      00025E E0               [24]  851 	movx	a,@dptr
      00025F FC               [12]  852 	mov	r4,a
      000260 A3               [24]  853 	inc	dptr
      000261 E0               [24]  854 	movx	a,@dptr
      000262 FD               [12]  855 	mov	r5,a
      000263 8B 82            [24]  856 	mov	dpl,r3
      000265 8C 83            [24]  857 	mov	dph,r4
      000267 8D F0            [24]  858 	mov	b,r5
      000269 C0 07            [24]  859 	push	ar7
      00026B C0 06            [24]  860 	push	ar6
      00026D 12r00r00         [24]  861 	lcall	_free
                                    862 ;	main1.c:108: printf_tiny("\n \rMalloc buffer1 failed so reenter value\n\r");
      000270 74rD0            [12]  863 	mov	a,#___str_6
      000272 C0 E0            [24]  864 	push	acc
      000274 74s00            [12]  865 	mov	a,#(___str_6 >> 8)
      000276 C0 E0            [24]  866 	push	acc
      000278 12r00r00         [24]  867 	lcall	_printf_tiny
      00027B 15 81            [12]  868 	dec	sp
      00027D 15 81            [12]  869 	dec	sp
      00027F D0 06            [24]  870 	pop	ar6
      000281 D0 07            [24]  871 	pop	ar7
      000283 02r00r23         [24]  872 	ljmp	00114$
                                    873 ;	main1.c:113: while(1)
      000286                        874 00197$:
      000286 90r0FrDF         [24]  875 	mov	dptr,#_main_buffnewcount_131072_67
      000289 E0               [24]  876 	movx	a,@dptr
      00028A F5*0A            [12]  877 	mov	_main_sloc4_1_0,a
      00028C A3               [24]  878 	inc	dptr
      00028D E0               [24]  879 	movx	a,@dptr
      00028E F5*0B            [12]  880 	mov	(_main_sloc4_1_0 + 1),a
      000290 7C 00            [12]  881 	mov	r4,#0x00
      000292 7D 00            [12]  882 	mov	r5,#0x00
      000294                        883 00150$:
                                    884 ;	main1.c:115: printf("\n\r ####### Select from the command options below ##########");
      000294 C0 05            [24]  885 	push	ar5
      000296 C0 04            [24]  886 	push	ar4
      000298 74rFC            [12]  887 	mov	a,#___str_7
      00029A C0 E0            [24]  888 	push	acc
      00029C 74s00            [12]  889 	mov	a,#(___str_7 >> 8)
      00029E C0 E0            [24]  890 	push	acc
      0002A0 74 80            [12]  891 	mov	a,#0x80
      0002A2 C0 E0            [24]  892 	push	acc
      0002A4 12r00r00         [24]  893 	lcall	_printf
      0002A7 15 81            [12]  894 	dec	sp
      0002A9 15 81            [12]  895 	dec	sp
      0002AB 15 81            [12]  896 	dec	sp
                                    897 ;	main1.c:116: printf("\n \r 1. '+' Sign --> Add a New Buffer");
      0002AD 74r38            [12]  898 	mov	a,#___str_8
      0002AF C0 E0            [24]  899 	push	acc
      0002B1 74s01            [12]  900 	mov	a,#(___str_8 >> 8)
      0002B3 C0 E0            [24]  901 	push	acc
      0002B5 74 80            [12]  902 	mov	a,#0x80
      0002B7 C0 E0            [24]  903 	push	acc
      0002B9 12r00r00         [24]  904 	lcall	_printf
      0002BC 15 81            [12]  905 	dec	sp
      0002BE 15 81            [12]  906 	dec	sp
      0002C0 15 81            [12]  907 	dec	sp
                                    908 ;	main1.c:117: printf("\n \r 2. '-' Sign --> Clean a Buffer");
      0002C2 74r5D            [12]  909 	mov	a,#___str_9
      0002C4 C0 E0            [24]  910 	push	acc
      0002C6 74s01            [12]  911 	mov	a,#(___str_9 >> 8)
      0002C8 C0 E0            [24]  912 	push	acc
      0002CA 74 80            [12]  913 	mov	a,#0x80
      0002CC C0 E0            [24]  914 	push	acc
      0002CE 12r00r00         [24]  915 	lcall	_printf
      0002D1 15 81            [12]  916 	dec	sp
      0002D3 15 81            [12]  917 	dec	sp
      0002D5 15 81            [12]  918 	dec	sp
                                    919 ;	main1.c:118: printf("\n \r 3. '?' Sign --> Display a Detailed Heap Report");
      0002D7 74r80            [12]  920 	mov	a,#___str_10
      0002D9 C0 E0            [24]  921 	push	acc
      0002DB 74s01            [12]  922 	mov	a,#(___str_10 >> 8)
      0002DD C0 E0            [24]  923 	push	acc
      0002DF 74 80            [12]  924 	mov	a,#0x80
      0002E1 C0 E0            [24]  925 	push	acc
      0002E3 12r00r00         [24]  926 	lcall	_printf
      0002E6 15 81            [12]  927 	dec	sp
      0002E8 15 81            [12]  928 	dec	sp
      0002EA 15 81            [12]  929 	dec	sp
                                    930 ;	main1.c:119: printf("\n \r 4. '@' Sign --> Clear all Buffers Data and Start Again");
      0002EC 74rB3            [12]  931 	mov	a,#___str_11
      0002EE C0 E0            [24]  932 	push	acc
      0002F0 74s01            [12]  933 	mov	a,#(___str_11 >> 8)
      0002F2 C0 E0            [24]  934 	push	acc
      0002F4 74 80            [12]  935 	mov	a,#0x80
      0002F6 C0 E0            [24]  936 	push	acc
      0002F8 12r00r00         [24]  937 	lcall	_printf
      0002FB 15 81            [12]  938 	dec	sp
      0002FD 15 81            [12]  939 	dec	sp
      0002FF 15 81            [12]  940 	dec	sp
                                    941 ;	main1.c:120: printf("\n \r 5. 'a'-'z'  --> Store these Characters in Buffer 0");
      000301 74rEE            [12]  942 	mov	a,#___str_12
      000303 C0 E0            [24]  943 	push	acc
      000305 74s01            [12]  944 	mov	a,#(___str_12 >> 8)
      000307 C0 E0            [24]  945 	push	acc
      000309 74 80            [12]  946 	mov	a,#0x80
      00030B C0 E0            [24]  947 	push	acc
      00030D 12r00r00         [24]  948 	lcall	_printf
      000310 15 81            [12]  949 	dec	sp
      000312 15 81            [12]  950 	dec	sp
      000314 15 81            [12]  951 	dec	sp
                                    952 ;	main1.c:121: printf("##############################################################");
      000316 74r25            [12]  953 	mov	a,#___str_13
      000318 C0 E0            [24]  954 	push	acc
      00031A 74s02            [12]  955 	mov	a,#(___str_13 >> 8)
      00031C C0 E0            [24]  956 	push	acc
      00031E 74 80            [12]  957 	mov	a,#0x80
      000320 C0 E0            [24]  958 	push	acc
      000322 12r00r00         [24]  959 	lcall	_printf
      000325 15 81            [12]  960 	dec	sp
      000327 15 81            [12]  961 	dec	sp
      000329 15 81            [12]  962 	dec	sp
                                    963 ;	main1.c:122: printf_tiny("\n \rEnter character \n \r");
      00032B 74r64            [12]  964 	mov	a,#___str_14
      00032D C0 E0            [24]  965 	push	acc
      00032F 74s02            [12]  966 	mov	a,#(___str_14 >> 8)
      000331 C0 E0            [24]  967 	push	acc
      000333 12r00r00         [24]  968 	lcall	_printf_tiny
      000336 15 81            [12]  969 	dec	sp
      000338 15 81            [12]  970 	dec	sp
                                    971 ;	main1.c:123: uint16_t takechar = getchar();
      00033A 12r0Cr53         [24]  972 	lcall	_getchar
      00033D AA 82            [24]  973 	mov	r2,dpl
      00033F AB 83            [24]  974 	mov	r3,dph
      000341 D0 04            [24]  975 	pop	ar4
      000343 D0 05            [24]  976 	pop	ar5
                                    977 ;	main1.c:124: totalcharcount++;
      000345 0C               [12]  978 	inc	r4
      000346 BC 00 01         [24]  979 	cjne	r4,#0x00,00315$
      000349 0D               [12]  980 	inc	r5
      00034A                        981 00315$:
                                    982 ;	main1.c:125: if(takechar !='?')
      00034A BA 3F 05         [24]  983 	cjne	r2,#0x3f,00316$
      00034D BB 00 02         [24]  984 	cjne	r3,#0x00,00316$
      000350 80 0C            [24]  985 	sjmp	00117$
      000352                        986 00316$:
                                    987 ;	main1.c:127: totalcharafterQ++;
      000352 90r10r83         [24]  988 	mov	dptr,#_main_totalcharafterQ_131072_67
      000355 E0               [24]  989 	movx	a,@dptr
      000356 24 01            [12]  990 	add	a,#0x01
      000358 F0               [24]  991 	movx	@dptr,a
      000359 A3               [24]  992 	inc	dptr
      00035A E0               [24]  993 	movx	a,@dptr
      00035B 34 00            [12]  994 	addc	a,#0x00
      00035D F0               [24]  995 	movx	@dptr,a
      00035E                        996 00117$:
                                    997 ;	main1.c:129: printf("\n \rTotal number of characters =%d \n \r",totalcharcount);
      00035E C0 05            [24]  998 	push	ar5
      000360 C0 04            [24]  999 	push	ar4
      000362 C0 03            [24] 1000 	push	ar3
      000364 C0 02            [24] 1001 	push	ar2
      000366 C0 04            [24] 1002 	push	ar4
      000368 C0 05            [24] 1003 	push	ar5
      00036A 74r7B            [12] 1004 	mov	a,#___str_15
      00036C C0 E0            [24] 1005 	push	acc
      00036E 74s02            [12] 1006 	mov	a,#(___str_15 >> 8)
      000370 C0 E0            [24] 1007 	push	acc
      000372 74 80            [12] 1008 	mov	a,#0x80
      000374 C0 E0            [24] 1009 	push	acc
      000376 12r00r00         [24] 1010 	lcall	_printf
      000379 E5 81            [12] 1011 	mov	a,sp
      00037B 24 FB            [12] 1012 	add	a,#0xfb
      00037D F5 81            [12] 1013 	mov	sp,a
      00037F D0 02            [24] 1014 	pop	ar2
      000381 D0 03            [24] 1015 	pop	ar3
                                   1016 ;	main1.c:130: putchar(takechar);
      000383 8A 82            [24] 1017 	mov	dpl,r2
      000385 8B 83            [24] 1018 	mov	dph,r3
      000387 C0 03            [24] 1019 	push	ar3
      000389 C0 02            [24] 1020 	push	ar2
      00038B 12r0Cr61         [24] 1021 	lcall	_putchar
      00038E D0 02            [24] 1022 	pop	ar2
      000390 D0 03            [24] 1023 	pop	ar3
      000392 D0 04            [24] 1024 	pop	ar4
      000394 D0 05            [24] 1025 	pop	ar5
                                   1026 ;	main1.c:131: if ((takechar>96 && takechar<123) && freespacesbuff[0] !=0)      // to get character from 'a' to 'z' and store in Buffer 0
      000396 8A 00            [24] 1027 	mov	ar0,r2
      000398 8B 01            [24] 1028 	mov	ar1,r3
      00039A C3               [12] 1029 	clr	c
      00039B 74 60            [12] 1030 	mov	a,#0x60
      00039D 98               [12] 1031 	subb	a,r0
      00039E E4               [12] 1032 	clr	a
      00039F 99               [12] 1033 	subb	a,r1
      0003A0 40 03            [24] 1034 	jc	00317$
      0003A2 02r04rB1         [24] 1035 	ljmp	00119$
      0003A5                       1036 00317$:
      0003A5 8A 00            [24] 1037 	mov	ar0,r2
      0003A7 8B 01            [24] 1038 	mov	ar1,r3
      0003A9 C3               [12] 1039 	clr	c
      0003AA E8               [12] 1040 	mov	a,r0
      0003AB 94 7B            [12] 1041 	subb	a,#0x7b
      0003AD E9               [12] 1042 	mov	a,r1
      0003AE 94 00            [12] 1043 	subb	a,#0x00
      0003B0 40 03            [24] 1044 	jc	00318$
      0003B2 02r04rB1         [24] 1045 	ljmp	00119$
      0003B5                       1046 00318$:
      0003B5 90r10r85         [24] 1047 	mov	dptr,#_main_freespacesbuff_131072_67
      0003B8 E0               [24] 1048 	movx	a,@dptr
      0003B9 F8               [12] 1049 	mov	r0,a
      0003BA A3               [24] 1050 	inc	dptr
      0003BB E0               [24] 1051 	movx	a,@dptr
      0003BC F9               [12] 1052 	mov	r1,a
      0003BD 48               [12] 1053 	orl	a,r0
      0003BE 70 03            [24] 1054 	jnz	00319$
      0003C0 02r04rB1         [24] 1055 	ljmp	00119$
      0003C3                       1056 00319$:
                                   1057 ;	main1.c:133: DEBUGPORT(0xAA);
      0003C3 C0 04            [24] 1058 	push	ar4
      0003C5 C0 05            [24] 1059 	push	ar5
      0003C7 75 82 AA         [24] 1060 	mov	dpl,#0xaa
      0003CA C0 05            [24] 1061 	push	ar5
      0003CC C0 04            [24] 1062 	push	ar4
      0003CE C0 03            [24] 1063 	push	ar3
      0003D0 C0 02            [24] 1064 	push	ar2
      0003D2 12r00r00         [24] 1065 	lcall	_dataout
      0003D5 D0 02            [24] 1066 	pop	ar2
      0003D7 D0 03            [24] 1067 	pop	ar3
      0003D9 D0 04            [24] 1068 	pop	ar4
      0003DB D0 05            [24] 1069 	pop	ar5
                                   1070 ;	main1.c:134: *(buffer[0]+ totalstoragecount) = takechar;
      0003DD 90r0FrA3         [24] 1071 	mov	dptr,#_main_buffer_131072_67
      0003E0 E0               [24] 1072 	movx	a,@dptr
      0003E1 F5*00            [12] 1073 	mov	_main_sloc0_1_0,a
      0003E3 A3               [24] 1074 	inc	dptr
      0003E4 E0               [24] 1075 	movx	a,@dptr
      0003E5 F5*01            [12] 1076 	mov	(_main_sloc0_1_0 + 1),a
      0003E7 A3               [24] 1077 	inc	dptr
      0003E8 E0               [24] 1078 	movx	a,@dptr
      0003E9 F5*02            [12] 1079 	mov	(_main_sloc0_1_0 + 2),a
      0003EB 90r0FrE1         [24] 1080 	mov	dptr,#_main_totalstoragecount_131072_67
      0003EE E0               [24] 1081 	movx	a,@dptr
      0003EF F5*03            [12] 1082 	mov	_main_sloc1_1_0,a
      0003F1 A3               [24] 1083 	inc	dptr
      0003F2 E0               [24] 1084 	movx	a,@dptr
      0003F3 F5*04            [12] 1085 	mov	(_main_sloc1_1_0 + 1),a
      0003F5 E5*03            [12] 1086 	mov	a,_main_sloc1_1_0
      0003F7 25*00            [12] 1087 	add	a,_main_sloc0_1_0
      0003F9 F5*00            [12] 1088 	mov	_main_sloc0_1_0,a
      0003FB E5*04            [12] 1089 	mov	a,(_main_sloc1_1_0 + 1)
      0003FD 35*01            [12] 1090 	addc	a,(_main_sloc0_1_0 + 1)
      0003FF F5*01            [12] 1091 	mov	(_main_sloc0_1_0 + 1),a
      000401 8A 04            [24] 1092 	mov	ar4,r2
      000403 8B 05            [24] 1093 	mov	ar5,r3
      000405 85*00 82         [24] 1094 	mov	dpl,_main_sloc0_1_0
      000408 85*01 83         [24] 1095 	mov	dph,(_main_sloc0_1_0 + 1)
      00040B 85*02 F0         [24] 1096 	mov	b,(_main_sloc0_1_0 + 2)
      00040E EC               [12] 1097 	mov	a,r4
      00040F 12r00r00         [24] 1098 	lcall	__gptrput
                                   1099 ;	main1.c:136: printf(" --> This character is stored at %p \n",(buffer[0]+totalstoragecount));
      000412 90r0FrA3         [24] 1100 	mov	dptr,#_main_buffer_131072_67
      000415 E0               [24] 1101 	movx	a,@dptr
      000416 F9               [12] 1102 	mov	r1,a
      000417 A3               [24] 1103 	inc	dptr
      000418 E0               [24] 1104 	movx	a,@dptr
      000419 FC               [12] 1105 	mov	r4,a
      00041A A3               [24] 1106 	inc	dptr
      00041B E0               [24] 1107 	movx	a,@dptr
      00041C FD               [12] 1108 	mov	r5,a
      00041D E5*03            [12] 1109 	mov	a,_main_sloc1_1_0
      00041F 29               [12] 1110 	add	a,r1
      000420 F9               [12] 1111 	mov	r1,a
      000421 E5*04            [12] 1112 	mov	a,(_main_sloc1_1_0 + 1)
      000423 3C               [12] 1113 	addc	a,r4
      000424 FC               [12] 1114 	mov	r4,a
      000425 C0 05            [24] 1115 	push	ar5
      000427 C0 04            [24] 1116 	push	ar4
      000429 C0 03            [24] 1117 	push	ar3
      00042B C0 02            [24] 1118 	push	ar2
      00042D C0 01            [24] 1119 	push	ar1
      00042F C0 04            [24] 1120 	push	ar4
      000431 C0 05            [24] 1121 	push	ar5
      000433 74rA1            [12] 1122 	mov	a,#___str_16
      000435 C0 E0            [24] 1123 	push	acc
      000437 74s02            [12] 1124 	mov	a,#(___str_16 >> 8)
      000439 C0 E0            [24] 1125 	push	acc
      00043B 74 80            [12] 1126 	mov	a,#0x80
      00043D C0 E0            [24] 1127 	push	acc
      00043F 12r00r00         [24] 1128 	lcall	_printf
      000442 E5 81            [12] 1129 	mov	a,sp
      000444 24 FA            [12] 1130 	add	a,#0xfa
      000446 F5 81            [12] 1131 	mov	sp,a
      000448 D0 02            [24] 1132 	pop	ar2
      00044A D0 03            [24] 1133 	pop	ar3
      00044C D0 04            [24] 1134 	pop	ar4
      00044E D0 05            [24] 1135 	pop	ar5
                                   1136 ;	main1.c:139: totalstoragecount++;
      000450 90r0FrE1         [24] 1137 	mov	dptr,#_main_totalstoragecount_131072_67
      000453 74 01            [12] 1138 	mov	a,#0x01
      000455 25*03            [12] 1139 	add	a,_main_sloc1_1_0
      000457 F0               [24] 1140 	movx	@dptr,a
      000458 E4               [12] 1141 	clr	a
      000459 35*04            [12] 1142 	addc	a,(_main_sloc1_1_0 + 1)
      00045B A3               [24] 1143 	inc	dptr
      00045C F0               [24] 1144 	movx	@dptr,a
                                   1145 ;	main1.c:141: storagecountall[0]=totalstoragecount;
      00045D 90r0FrE1         [24] 1146 	mov	dptr,#_main_totalstoragecount_131072_67
      000460 E0               [24] 1147 	movx	a,@dptr
      000461 FC               [12] 1148 	mov	r4,a
      000462 A3               [24] 1149 	inc	dptr
      000463 E0               [24] 1150 	movx	a,@dptr
      000464 FD               [12] 1151 	mov	r5,a
      000465 90r10r5B         [24] 1152 	mov	dptr,#_main_storagecountall_131072_67
      000468 EC               [12] 1153 	mov	a,r4
      000469 F0               [24] 1154 	movx	@dptr,a
      00046A ED               [12] 1155 	mov	a,r5
      00046B A3               [24] 1156 	inc	dptr
      00046C F0               [24] 1157 	movx	@dptr,a
                                   1158 ;	main1.c:142: freespacesbuff[0]= buff01size - storagecountall[0];
      00046D 90r0FrA1         [24] 1159 	mov	dptr,#_buff01size
      000470 E0               [24] 1160 	movx	a,@dptr
      000471 F8               [12] 1161 	mov	r0,a
      000472 A3               [24] 1162 	inc	dptr
      000473 E0               [24] 1163 	movx	a,@dptr
      000474 F9               [12] 1164 	mov	r1,a
      000475 E8               [12] 1165 	mov	a,r0
      000476 C3               [12] 1166 	clr	c
      000477 9C               [12] 1167 	subb	a,r4
      000478 F8               [12] 1168 	mov	r0,a
      000479 E9               [12] 1169 	mov	a,r1
      00047A 9D               [12] 1170 	subb	a,r5
      00047B F9               [12] 1171 	mov	r1,a
      00047C 90r10r85         [24] 1172 	mov	dptr,#_main_freespacesbuff_131072_67
      00047F E8               [12] 1173 	mov	a,r0
      000480 F0               [24] 1174 	movx	@dptr,a
      000481 E9               [12] 1175 	mov	a,r1
      000482 A3               [24] 1176 	inc	dptr
      000483 F0               [24] 1177 	movx	@dptr,a
                                   1178 ;	main1.c:143: printf("\n \r Total number of storage characters =%d \n",totalstoragecount);
      000484 C0 05            [24] 1179 	push	ar5
      000486 C0 04            [24] 1180 	push	ar4
      000488 C0 03            [24] 1181 	push	ar3
      00048A C0 02            [24] 1182 	push	ar2
      00048C C0 04            [24] 1183 	push	ar4
      00048E C0 05            [24] 1184 	push	ar5
      000490 74rC7            [12] 1185 	mov	a,#___str_17
      000492 C0 E0            [24] 1186 	push	acc
      000494 74s02            [12] 1187 	mov	a,#(___str_17 >> 8)
      000496 C0 E0            [24] 1188 	push	acc
      000498 74 80            [12] 1189 	mov	a,#0x80
      00049A C0 E0            [24] 1190 	push	acc
      00049C 12r00r00         [24] 1191 	lcall	_printf
      00049F E5 81            [12] 1192 	mov	a,sp
      0004A1 24 FB            [12] 1193 	add	a,#0xfb
      0004A3 F5 81            [12] 1194 	mov	sp,a
      0004A5 D0 02            [24] 1195 	pop	ar2
      0004A7 D0 03            [24] 1196 	pop	ar3
      0004A9 D0 04            [24] 1197 	pop	ar4
      0004AB D0 05            [24] 1198 	pop	ar5
                                   1199 ;	main1.c:232: break;
      0004AD D0 05            [24] 1200 	pop	ar5
      0004AF D0 04            [24] 1201 	pop	ar4
                                   1202 ;	main1.c:143: printf("\n \r Total number of storage characters =%d \n",totalstoragecount);
      0004B1                       1203 00119$:
                                   1204 ;	main1.c:145: if (takechar=='+')      //to create a new buffer
      0004B1 BA 2B 05         [24] 1205 	cjne	r2,#0x2b,00320$
      0004B4 BB 00 02         [24] 1206 	cjne	r3,#0x00,00320$
      0004B7 80 03            [24] 1207 	sjmp	00321$
      0004B9                       1208 00320$:
      0004B9 02r06r61         [24] 1209 	ljmp	00126$
      0004BC                       1210 00321$:
                                   1211 ;	main1.c:147: DEBUGPORT(0xBB);
      0004BC C0 04            [24] 1212 	push	ar4
      0004BE C0 05            [24] 1213 	push	ar5
      0004C0 75 82 BB         [24] 1214 	mov	dpl,#0xbb
      0004C3 C0 05            [24] 1215 	push	ar5
      0004C5 C0 04            [24] 1216 	push	ar4
      0004C7 C0 03            [24] 1217 	push	ar3
      0004C9 C0 02            [24] 1218 	push	ar2
      0004CB 12r00r00         [24] 1219 	lcall	_dataout
                                   1220 ;	main1.c:148: printf("\n \r You need to enter a number between 30 to 300 bytes to create a new buffer \n");
      0004CE 74rF4            [12] 1221 	mov	a,#___str_18
      0004D0 C0 E0            [24] 1222 	push	acc
      0004D2 74s02            [12] 1223 	mov	a,#(___str_18 >> 8)
      0004D4 C0 E0            [24] 1224 	push	acc
      0004D6 74 80            [12] 1225 	mov	a,#0x80
      0004D8 C0 E0            [24] 1226 	push	acc
      0004DA 12r00r00         [24] 1227 	lcall	_printf
      0004DD 15 81            [12] 1228 	dec	sp
      0004DF 15 81            [12] 1229 	dec	sp
      0004E1 15 81            [12] 1230 	dec	sp
                                   1231 ;	main1.c:149: uint16_t n= takeinput();
      0004E3 12r0Br92         [24] 1232 	lcall	_takeinput
      0004E6 85 82*00         [24] 1233 	mov	_main_sloc0_1_0,dpl
      0004E9 85 83*01         [24] 1234 	mov	(_main_sloc0_1_0 + 1),dph
      0004EC D0 02            [24] 1235 	pop	ar2
      0004EE D0 03            [24] 1236 	pop	ar3
      0004F0 D0 04            [24] 1237 	pop	ar4
      0004F2 D0 05            [24] 1238 	pop	ar5
                                   1239 ;	main1.c:150: if (n>30 && n<300){
      0004F4 AC*00            [24] 1240 	mov	r4,_main_sloc0_1_0
      0004F6 AD*01            [24] 1241 	mov	r5,(_main_sloc0_1_0 + 1)
      0004F8 C3               [12] 1242 	clr	c
      0004F9 74 1E            [12] 1243 	mov	a,#0x1e
      0004FB 9C               [12] 1244 	subb	a,r4
      0004FC E4               [12] 1245 	clr	a
      0004FD 9D               [12] 1246 	subb	a,r5
      0004FE D0 05            [24] 1247 	pop	ar5
      000500 D0 04            [24] 1248 	pop	ar4
      000502 40 03            [24] 1249 	jc	00322$
      000504 02r06r61         [24] 1250 	ljmp	00126$
      000507                       1251 00322$:
      000507 C0 04            [24] 1252 	push	ar4
      000509 C0 05            [24] 1253 	push	ar5
      00050B AC*00            [24] 1254 	mov	r4,_main_sloc0_1_0
      00050D AD*01            [24] 1255 	mov	r5,(_main_sloc0_1_0 + 1)
      00050F C3               [12] 1256 	clr	c
      000510 EC               [12] 1257 	mov	a,r4
      000511 94 2C            [12] 1258 	subb	a,#0x2c
      000513 ED               [12] 1259 	mov	a,r5
      000514 94 01            [12] 1260 	subb	a,#0x01
      000516 D0 05            [24] 1261 	pop	ar5
      000518 D0 04            [24] 1262 	pop	ar4
      00051A 40 03            [24] 1263 	jc	00323$
      00051C 02r06r61         [24] 1264 	ljmp	00126$
      00051F                       1265 00323$:
                                   1266 ;	main1.c:151: buffer[buffnewcount] = (uint8_t *)malloc(n);
      00051F C0 04            [24] 1267 	push	ar4
      000521 C0 05            [24] 1268 	push	ar5
      000523 90r00r00         [24] 1269 	mov	dptr,#__mulint_PARM_2
      000526 E5*0A            [12] 1270 	mov	a,_main_sloc4_1_0
      000528 F0               [24] 1271 	movx	@dptr,a
      000529 E5*0B            [12] 1272 	mov	a,(_main_sloc4_1_0 + 1)
      00052B A3               [24] 1273 	inc	dptr
      00052C F0               [24] 1274 	movx	@dptr,a
      00052D 90 00 03         [24] 1275 	mov	dptr,#0x0003
      000530 C0 03            [24] 1276 	push	ar3
      000532 C0 02            [24] 1277 	push	ar2
      000534 12r00r00         [24] 1278 	lcall	__mulint
      000537 AC 82            [24] 1279 	mov	r4,dpl
      000539 AD 83            [24] 1280 	mov	r5,dph
      00053B EC               [12] 1281 	mov	a,r4
      00053C 24rA3            [12] 1282 	add	a,#_main_buffer_131072_67
      00053E F5*03            [12] 1283 	mov	_main_sloc1_1_0,a
      000540 ED               [12] 1284 	mov	a,r5
      000541 34s0F            [12] 1285 	addc	a,#(_main_buffer_131072_67 >> 8)
      000543 F5*04            [12] 1286 	mov	(_main_sloc1_1_0 + 1),a
      000545 85*00 82         [24] 1287 	mov	dpl,_main_sloc0_1_0
      000548 85*01 83         [24] 1288 	mov	dph,(_main_sloc0_1_0 + 1)
      00054B 12r00r00         [24] 1289 	lcall	_malloc
      00054E AC 82            [24] 1290 	mov	r4,dpl
      000550 AD 83            [24] 1291 	mov	r5,dph
      000552 D0 02            [24] 1292 	pop	ar2
      000554 D0 03            [24] 1293 	pop	ar3
      000556 8C*05            [24] 1294 	mov	_main_sloc2_1_0,r4
      000558 8D*06            [24] 1295 	mov	(_main_sloc2_1_0 + 1),r5
      00055A 75*07 00         [24] 1296 	mov	(_main_sloc2_1_0 + 2),#0x00
      00055D 85*03 82         [24] 1297 	mov	dpl,_main_sloc1_1_0
      000560 85*04 83         [24] 1298 	mov	dph,(_main_sloc1_1_0 + 1)
      000563 E5*05            [12] 1299 	mov	a,_main_sloc2_1_0
      000565 F0               [24] 1300 	movx	@dptr,a
      000566 E5*06            [12] 1301 	mov	a,(_main_sloc2_1_0 + 1)
      000568 A3               [24] 1302 	inc	dptr
      000569 F0               [24] 1303 	movx	@dptr,a
      00056A E5*07            [12] 1304 	mov	a,(_main_sloc2_1_0 + 2)
      00056C A3               [24] 1305 	inc	dptr
      00056D F0               [24] 1306 	movx	@dptr,a
                                   1307 ;	main1.c:152: startaddr[buffnewcount] = (int)buffer[buffnewcount];
      00056E E5*0A            [12] 1308 	mov	a,_main_sloc4_1_0
      000570 25*0A            [12] 1309 	add	a,_main_sloc4_1_0
      000572 F5*08            [12] 1310 	mov	_main_sloc3_1_0,a
      000574 E5*0B            [12] 1311 	mov	a,(_main_sloc4_1_0 + 1)
      000576 33               [12] 1312 	rlc	a
      000577 F5*09            [12] 1313 	mov	(_main_sloc3_1_0 + 1),a
      000579 E5*08            [12] 1314 	mov	a,_main_sloc3_1_0
      00057B 24rE3            [12] 1315 	add	a,#_main_startaddr_131072_67
      00057D F5 82            [12] 1316 	mov	dpl,a
      00057F E5*09            [12] 1317 	mov	a,(_main_sloc3_1_0 + 1)
      000581 34s0F            [12] 1318 	addc	a,#(_main_startaddr_131072_67 >> 8)
      000583 F5 83            [12] 1319 	mov	dph,a
      000585 A9*05            [24] 1320 	mov	r1,_main_sloc2_1_0
      000587 AC*06            [24] 1321 	mov	r4,(_main_sloc2_1_0 + 1)
      000589 E9               [12] 1322 	mov	a,r1
      00058A F0               [24] 1323 	movx	@dptr,a
      00058B EC               [12] 1324 	mov	a,r4
      00058C A3               [24] 1325 	inc	dptr
      00058D F0               [24] 1326 	movx	@dptr,a
                                   1327 ;	main1.c:153: endaddr[buffnewcount]= (int)(buffer[buffnewcount]+ n);
      00058E E5*08            [12] 1328 	mov	a,_main_sloc3_1_0
      000590 24r0B            [12] 1329 	add	a,#_main_endaddr_131072_67
      000592 F5 82            [12] 1330 	mov	dpl,a
      000594 E5*09            [12] 1331 	mov	a,(_main_sloc3_1_0 + 1)
      000596 34s10            [12] 1332 	addc	a,#(_main_endaddr_131072_67 >> 8)
      000598 F5 83            [12] 1333 	mov	dph,a
      00059A E5*00            [12] 1334 	mov	a,_main_sloc0_1_0
      00059C 25*05            [12] 1335 	add	a,_main_sloc2_1_0
      00059E F9               [12] 1336 	mov	r1,a
      00059F E5*01            [12] 1337 	mov	a,(_main_sloc0_1_0 + 1)
      0005A1 35*06            [12] 1338 	addc	a,(_main_sloc2_1_0 + 1)
      0005A3 FC               [12] 1339 	mov	r4,a
      0005A4 E9               [12] 1340 	mov	a,r1
      0005A5 F0               [24] 1341 	movx	@dptr,a
      0005A6 EC               [12] 1342 	mov	a,r4
      0005A7 A3               [24] 1343 	inc	dptr
      0005A8 F0               [24] 1344 	movx	@dptr,a
                                   1345 ;	main1.c:154: buffersizes[buffnewcount]= n;
      0005A9 E5*08            [12] 1346 	mov	a,_main_sloc3_1_0
      0005AB 24r33            [12] 1347 	add	a,#_main_buffersizes_131072_67
      0005AD F5 82            [12] 1348 	mov	dpl,a
      0005AF E5*09            [12] 1349 	mov	a,(_main_sloc3_1_0 + 1)
      0005B1 34s10            [12] 1350 	addc	a,#(_main_buffersizes_131072_67 >> 8)
      0005B3 F5 83            [12] 1351 	mov	dph,a
      0005B5 E5*00            [12] 1352 	mov	a,_main_sloc0_1_0
      0005B7 F0               [24] 1353 	movx	@dptr,a
      0005B8 E5*01            [12] 1354 	mov	a,(_main_sloc0_1_0 + 1)
      0005BA A3               [24] 1355 	inc	dptr
      0005BB F0               [24] 1356 	movx	@dptr,a
                                   1357 ;	main1.c:155: storagecountall[buffnewcount]=0;
      0005BC E5*08            [12] 1358 	mov	a,_main_sloc3_1_0
      0005BE 24r5B            [12] 1359 	add	a,#_main_storagecountall_131072_67
      0005C0 FC               [12] 1360 	mov	r4,a
      0005C1 E5*09            [12] 1361 	mov	a,(_main_sloc3_1_0 + 1)
      0005C3 34s10            [12] 1362 	addc	a,#(_main_storagecountall_131072_67 >> 8)
      0005C5 FD               [12] 1363 	mov	r5,a
      0005C6 8C 82            [24] 1364 	mov	dpl,r4
      0005C8 8D 83            [24] 1365 	mov	dph,r5
      0005CA E4               [12] 1366 	clr	a
      0005CB F0               [24] 1367 	movx	@dptr,a
      0005CC A3               [24] 1368 	inc	dptr
      0005CD F0               [24] 1369 	movx	@dptr,a
                                   1370 ;	main1.c:156: freespacesbuff[buffnewcount]= n - storagecountall[buffnewcount];
      0005CE E5*08            [12] 1371 	mov	a,_main_sloc3_1_0
      0005D0 24r85            [12] 1372 	add	a,#_main_freespacesbuff_131072_67
      0005D2 F8               [12] 1373 	mov	r0,a
      0005D3 E5*09            [12] 1374 	mov	a,(_main_sloc3_1_0 + 1)
      0005D5 34s10            [12] 1375 	addc	a,#(_main_freespacesbuff_131072_67 >> 8)
      0005D7 F9               [12] 1376 	mov	r1,a
      0005D8 8C 82            [24] 1377 	mov	dpl,r4
      0005DA 8D 83            [24] 1378 	mov	dph,r5
      0005DC E0               [24] 1379 	movx	a,@dptr
      0005DD FC               [12] 1380 	mov	r4,a
      0005DE A3               [24] 1381 	inc	dptr
      0005DF E0               [24] 1382 	movx	a,@dptr
      0005E0 FD               [12] 1383 	mov	r5,a
      0005E1 E5*00            [12] 1384 	mov	a,_main_sloc0_1_0
      0005E3 C3               [12] 1385 	clr	c
      0005E4 9C               [12] 1386 	subb	a,r4
      0005E5 FC               [12] 1387 	mov	r4,a
      0005E6 E5*01            [12] 1388 	mov	a,(_main_sloc0_1_0 + 1)
      0005E8 9D               [12] 1389 	subb	a,r5
      0005E9 FD               [12] 1390 	mov	r5,a
      0005EA 88 82            [24] 1391 	mov	dpl,r0
      0005EC 89 83            [24] 1392 	mov	dph,r1
      0005EE EC               [12] 1393 	mov	a,r4
      0005EF F0               [24] 1394 	movx	@dptr,a
      0005F0 ED               [12] 1395 	mov	a,r5
      0005F1 A3               [24] 1396 	inc	dptr
      0005F2 F0               [24] 1397 	movx	@dptr,a
                                   1398 ;	main1.c:157: printf_tiny("\n \r New Malloc buffer %d passed\n\r",buffnewcount);
      0005F3 C0 05            [24] 1399 	push	ar5
      0005F5 C0 04            [24] 1400 	push	ar4
      0005F7 C0 03            [24] 1401 	push	ar3
      0005F9 C0 02            [24] 1402 	push	ar2
      0005FB C0*0A            [24] 1403 	push	_main_sloc4_1_0
      0005FD C0*0B            [24] 1404 	push	(_main_sloc4_1_0 + 1)
      0005FF 74r44            [12] 1405 	mov	a,#___str_19
      000601 C0 E0            [24] 1406 	push	acc
      000603 74s03            [12] 1407 	mov	a,#(___str_19 >> 8)
      000605 C0 E0            [24] 1408 	push	acc
      000607 12r00r00         [24] 1409 	lcall	_printf_tiny
      00060A E5 81            [12] 1410 	mov	a,sp
      00060C 24 FC            [12] 1411 	add	a,#0xfc
      00060E F5 81            [12] 1412 	mov	sp,a
      000610 D0 02            [24] 1413 	pop	ar2
      000612 D0 03            [24] 1414 	pop	ar3
      000614 D0 04            [24] 1415 	pop	ar4
      000616 D0 05            [24] 1416 	pop	ar5
                                   1417 ;	main1.c:158: printf("\n \r Address of buffer no %d: %p \n \r",buffnewcount, buffer[buffnewcount]);
      000618 85*03 82         [24] 1418 	mov	dpl,_main_sloc1_1_0
      00061B 85*04 83         [24] 1419 	mov	dph,(_main_sloc1_1_0 + 1)
      00061E E0               [24] 1420 	movx	a,@dptr
      00061F F9               [12] 1421 	mov	r1,a
      000620 A3               [24] 1422 	inc	dptr
      000621 E0               [24] 1423 	movx	a,@dptr
      000622 FC               [12] 1424 	mov	r4,a
      000623 A3               [24] 1425 	inc	dptr
      000624 E0               [24] 1426 	movx	a,@dptr
      000625 FD               [12] 1427 	mov	r5,a
      000626 C0 05            [24] 1428 	push	ar5
      000628 C0 04            [24] 1429 	push	ar4
      00062A C0 03            [24] 1430 	push	ar3
      00062C C0 02            [24] 1431 	push	ar2
      00062E C0 01            [24] 1432 	push	ar1
      000630 C0 04            [24] 1433 	push	ar4
      000632 C0 05            [24] 1434 	push	ar5
      000634 C0*0A            [24] 1435 	push	_main_sloc4_1_0
      000636 C0*0B            [24] 1436 	push	(_main_sloc4_1_0 + 1)
      000638 74r66            [12] 1437 	mov	a,#___str_20
      00063A C0 E0            [24] 1438 	push	acc
      00063C 74s03            [12] 1439 	mov	a,#(___str_20 >> 8)
      00063E C0 E0            [24] 1440 	push	acc
      000640 74 80            [12] 1441 	mov	a,#0x80
      000642 C0 E0            [24] 1442 	push	acc
      000644 12r00r00         [24] 1443 	lcall	_printf
      000647 E5 81            [12] 1444 	mov	a,sp
      000649 24 F8            [12] 1445 	add	a,#0xf8
      00064B F5 81            [12] 1446 	mov	sp,a
      00064D D0 02            [24] 1447 	pop	ar2
      00064F D0 03            [24] 1448 	pop	ar3
      000651 D0 04            [24] 1449 	pop	ar4
      000653 D0 05            [24] 1450 	pop	ar5
                                   1451 ;	main1.c:159: buffnewcount++;
      000655 05*0A            [12] 1452 	inc	_main_sloc4_1_0
      000657 E4               [12] 1453 	clr	a
      000658 B5*0A 02         [24] 1454 	cjne	a,_main_sloc4_1_0,00324$
      00065B 05*0B            [12] 1455 	inc	(_main_sloc4_1_0 + 1)
      00065D                       1456 00324$:
                                   1457 ;	main1.c:232: break;
      00065D D0 05            [24] 1458 	pop	ar5
      00065F D0 04            [24] 1459 	pop	ar4
                                   1460 ;	main1.c:159: buffnewcount++;
      000661                       1461 00126$:
                                   1462 ;	main1.c:162: if (takechar=='-')   // TO delete a buffer
      000661 BA 2D 05         [24] 1463 	cjne	r2,#0x2d,00325$
      000664 BB 00 02         [24] 1464 	cjne	r3,#0x00,00325$
      000667 80 03            [24] 1465 	sjmp	00326$
      000669                       1466 00325$:
      000669 02r07r77         [24] 1467 	ljmp	00132$
      00066C                       1468 00326$:
                                   1469 ;	main1.c:164: DEBUGPORT(0xCC);
      00066C C0 04            [24] 1470 	push	ar4
      00066E C0 05            [24] 1471 	push	ar5
      000670 75 82 CC         [24] 1472 	mov	dpl,#0xcc
      000673 C0 05            [24] 1473 	push	ar5
      000675 C0 04            [24] 1474 	push	ar4
      000677 C0 03            [24] 1475 	push	ar3
      000679 C0 02            [24] 1476 	push	ar2
      00067B 12r00r00         [24] 1477 	lcall	_dataout
                                   1478 ;	main1.c:165: printf("\n \r You need to enter a valid buffer number to clear it \n");
      00067E 74r8A            [12] 1479 	mov	a,#___str_21
      000680 C0 E0            [24] 1480 	push	acc
      000682 74s03            [12] 1481 	mov	a,#(___str_21 >> 8)
      000684 C0 E0            [24] 1482 	push	acc
      000686 74 80            [12] 1483 	mov	a,#0x80
      000688 C0 E0            [24] 1484 	push	acc
      00068A 12r00r00         [24] 1485 	lcall	_printf
      00068D 15 81            [12] 1486 	dec	sp
      00068F 15 81            [12] 1487 	dec	sp
      000691 15 81            [12] 1488 	dec	sp
                                   1489 ;	main1.c:166: uint16_t buffno = takeinput();
      000693 12r0Br92         [24] 1490 	lcall	_takeinput
      000696 85 82*08         [24] 1491 	mov	_main_sloc3_1_0,dpl
      000699 85 83*09         [24] 1492 	mov	(_main_sloc3_1_0 + 1),dph
      00069C D0 02            [24] 1493 	pop	ar2
      00069E D0 03            [24] 1494 	pop	ar3
      0006A0 D0 04            [24] 1495 	pop	ar4
      0006A2 D0 05            [24] 1496 	pop	ar5
                                   1497 ;	main1.c:167: if ((buffno <= buffnewcount) && (buffno != 0))
      0006A4 AC*08            [24] 1498 	mov	r4,_main_sloc3_1_0
      0006A6 AD*09            [24] 1499 	mov	r5,(_main_sloc3_1_0 + 1)
      0006A8 C3               [12] 1500 	clr	c
      0006A9 E5*0A            [12] 1501 	mov	a,_main_sloc4_1_0
      0006AB 9C               [12] 1502 	subb	a,r4
      0006AC E5*0B            [12] 1503 	mov	a,(_main_sloc4_1_0 + 1)
      0006AE 9D               [12] 1504 	subb	a,r5
      0006AF D0 05            [24] 1505 	pop	ar5
      0006B1 D0 04            [24] 1506 	pop	ar4
      0006B3 50 03            [24] 1507 	jnc	00327$
      0006B5 02r07r52         [24] 1508 	ljmp	00128$
      0006B8                       1509 00327$:
      0006B8 E5*08            [12] 1510 	mov	a,_main_sloc3_1_0
      0006BA 45*09            [12] 1511 	orl	a,(_main_sloc3_1_0 + 1)
      0006BC 70 03            [24] 1512 	jnz	00328$
      0006BE 02r07r52         [24] 1513 	ljmp	00128$
      0006C1                       1514 00328$:
                                   1515 ;	main1.c:169: free(buffer[buffno]);
      0006C1 C0 04            [24] 1516 	push	ar4
      0006C3 C0 05            [24] 1517 	push	ar5
      0006C5 90r00r00         [24] 1518 	mov	dptr,#__mulint_PARM_2
      0006C8 E5*08            [12] 1519 	mov	a,_main_sloc3_1_0
      0006CA F0               [24] 1520 	movx	@dptr,a
      0006CB E5*09            [12] 1521 	mov	a,(_main_sloc3_1_0 + 1)
      0006CD A3               [24] 1522 	inc	dptr
      0006CE F0               [24] 1523 	movx	@dptr,a
      0006CF 90 00 03         [24] 1524 	mov	dptr,#0x0003
      0006D2 C0 03            [24] 1525 	push	ar3
      0006D4 C0 02            [24] 1526 	push	ar2
      0006D6 12r00r00         [24] 1527 	lcall	__mulint
      0006D9 AC 82            [24] 1528 	mov	r4,dpl
      0006DB AD 83            [24] 1529 	mov	r5,dph
      0006DD D0 02            [24] 1530 	pop	ar2
      0006DF D0 03            [24] 1531 	pop	ar3
      0006E1 EC               [12] 1532 	mov	a,r4
      0006E2 24rA3            [12] 1533 	add	a,#_main_buffer_131072_67
      0006E4 F5 82            [12] 1534 	mov	dpl,a
      0006E6 ED               [12] 1535 	mov	a,r5
      0006E7 34s0F            [12] 1536 	addc	a,#(_main_buffer_131072_67 >> 8)
      0006E9 F5 83            [12] 1537 	mov	dph,a
      0006EB E0               [24] 1538 	movx	a,@dptr
      0006EC F9               [12] 1539 	mov	r1,a
      0006ED A3               [24] 1540 	inc	dptr
      0006EE E0               [24] 1541 	movx	a,@dptr
      0006EF FC               [12] 1542 	mov	r4,a
      0006F0 A3               [24] 1543 	inc	dptr
      0006F1 E0               [24] 1544 	movx	a,@dptr
      0006F2 FD               [12] 1545 	mov	r5,a
      0006F3 89 82            [24] 1546 	mov	dpl,r1
      0006F5 8C 83            [24] 1547 	mov	dph,r4
      0006F7 8D F0            [24] 1548 	mov	b,r5
      0006F9 C0 05            [24] 1549 	push	ar5
      0006FB C0 04            [24] 1550 	push	ar4
      0006FD C0 03            [24] 1551 	push	ar3
      0006FF C0 02            [24] 1552 	push	ar2
      000701 12r00r00         [24] 1553 	lcall	_free
      000704 D0 02            [24] 1554 	pop	ar2
      000706 D0 03            [24] 1555 	pop	ar3
      000708 D0 04            [24] 1556 	pop	ar4
      00070A D0 05            [24] 1557 	pop	ar5
                                   1558 ;	main1.c:170: startaddr[buffno]=0;
      00070C E5*08            [12] 1559 	mov	a,_main_sloc3_1_0
      00070E 25*08            [12] 1560 	add	a,_main_sloc3_1_0
      000710 FC               [12] 1561 	mov	r4,a
      000711 E5*09            [12] 1562 	mov	a,(_main_sloc3_1_0 + 1)
      000713 33               [12] 1563 	rlc	a
      000714 FD               [12] 1564 	mov	r5,a
      000715 EC               [12] 1565 	mov	a,r4
      000716 24rE3            [12] 1566 	add	a,#_main_startaddr_131072_67
      000718 F5 82            [12] 1567 	mov	dpl,a
      00071A ED               [12] 1568 	mov	a,r5
      00071B 34s0F            [12] 1569 	addc	a,#(_main_startaddr_131072_67 >> 8)
      00071D F5 83            [12] 1570 	mov	dph,a
      00071F E4               [12] 1571 	clr	a
      000720 F0               [24] 1572 	movx	@dptr,a
      000721 A3               [24] 1573 	inc	dptr
      000722 F0               [24] 1574 	movx	@dptr,a
                                   1575 ;	main1.c:171: printf("\n \r Buffer %d Cleared \n \r",buffno);
      000723 C0 05            [24] 1576 	push	ar5
      000725 C0 04            [24] 1577 	push	ar4
      000727 C0 03            [24] 1578 	push	ar3
      000729 C0 02            [24] 1579 	push	ar2
      00072B C0*08            [24] 1580 	push	_main_sloc3_1_0
      00072D C0*09            [24] 1581 	push	(_main_sloc3_1_0 + 1)
      00072F 74rC4            [12] 1582 	mov	a,#___str_22
      000731 C0 E0            [24] 1583 	push	acc
      000733 74s03            [12] 1584 	mov	a,#(___str_22 >> 8)
      000735 C0 E0            [24] 1585 	push	acc
      000737 74 80            [12] 1586 	mov	a,#0x80
      000739 C0 E0            [24] 1587 	push	acc
      00073B 12r00r00         [24] 1588 	lcall	_printf
      00073E E5 81            [12] 1589 	mov	a,sp
      000740 24 FB            [12] 1590 	add	a,#0xfb
      000742 F5 81            [12] 1591 	mov	sp,a
      000744 D0 02            [24] 1592 	pop	ar2
      000746 D0 03            [24] 1593 	pop	ar3
      000748 D0 04            [24] 1594 	pop	ar4
      00074A D0 05            [24] 1595 	pop	ar5
      00074C D0 05            [24] 1596 	pop	ar5
      00074E D0 04            [24] 1597 	pop	ar4
      000750 80 25            [24] 1598 	sjmp	00132$
      000752                       1599 00128$:
                                   1600 ;	main1.c:176: printf("\n \r You entered a wrong Buffer number \n \r");
      000752 C0 05            [24] 1601 	push	ar5
      000754 C0 04            [24] 1602 	push	ar4
      000756 C0 03            [24] 1603 	push	ar3
      000758 C0 02            [24] 1604 	push	ar2
      00075A 74rDE            [12] 1605 	mov	a,#___str_23
      00075C C0 E0            [24] 1606 	push	acc
      00075E 74s03            [12] 1607 	mov	a,#(___str_23 >> 8)
      000760 C0 E0            [24] 1608 	push	acc
      000762 74 80            [12] 1609 	mov	a,#0x80
      000764 C0 E0            [24] 1610 	push	acc
      000766 12r00r00         [24] 1611 	lcall	_printf
      000769 15 81            [12] 1612 	dec	sp
      00076B 15 81            [12] 1613 	dec	sp
      00076D 15 81            [12] 1614 	dec	sp
      00076F D0 02            [24] 1615 	pop	ar2
      000771 D0 03            [24] 1616 	pop	ar3
      000773 D0 04            [24] 1617 	pop	ar4
      000775 D0 05            [24] 1618 	pop	ar5
      000777                       1619 00132$:
                                   1620 ;	main1.c:179: if (takechar=='?')    // To give a detailed Heap report,Print Buffer 0 contents and clear Buffer 0
      000777 BA 3F 05         [24] 1621 	cjne	r2,#0x3f,00329$
      00077A BB 00 02         [24] 1622 	cjne	r3,#0x00,00329$
      00077D 80 03            [24] 1623 	sjmp	00330$
      00077F                       1624 00329$:
      00077F 02r09rB9         [24] 1625 	ljmp	00140$
      000782                       1626 00330$:
                                   1627 ;	main1.c:181: DEBUGPORT(0xDD);
      000782 75 82 DD         [24] 1628 	mov	dpl,#0xdd
      000785 C0 05            [24] 1629 	push	ar5
      000787 C0 04            [24] 1630 	push	ar4
      000789 C0 03            [24] 1631 	push	ar3
      00078B C0 02            [24] 1632 	push	ar2
      00078D 12r00r00         [24] 1633 	lcall	_dataout
                                   1634 ;	main1.c:184: printf("\n \r ########################## Heap Report ########################### \n");
      000790 74r08            [12] 1635 	mov	a,#___str_24
      000792 C0 E0            [24] 1636 	push	acc
      000794 74s04            [12] 1637 	mov	a,#(___str_24 >> 8)
      000796 C0 E0            [24] 1638 	push	acc
      000798 74 80            [12] 1639 	mov	a,#0x80
      00079A C0 E0            [24] 1640 	push	acc
      00079C 12r00r00         [24] 1641 	lcall	_printf
      00079F 15 81            [12] 1642 	dec	sp
      0007A1 15 81            [12] 1643 	dec	sp
      0007A3 15 81            [12] 1644 	dec	sp
                                   1645 ;	main1.c:185: printf("\n\rBuffer\tStarting Addr\tEnding Addr\tSize\tStorageChar\t Free Space \n");
      0007A5 74r51            [12] 1646 	mov	a,#___str_25
      0007A7 C0 E0            [24] 1647 	push	acc
      0007A9 74s04            [12] 1648 	mov	a,#(___str_25 >> 8)
      0007AB C0 E0            [24] 1649 	push	acc
      0007AD 74 80            [12] 1650 	mov	a,#0x80
      0007AF C0 E0            [24] 1651 	push	acc
      0007B1 12r00r00         [24] 1652 	lcall	_printf
      0007B4 15 81            [12] 1653 	dec	sp
      0007B6 15 81            [12] 1654 	dec	sp
      0007B8 15 81            [12] 1655 	dec	sp
      0007BA D0 02            [24] 1656 	pop	ar2
      0007BC D0 03            [24] 1657 	pop	ar3
      0007BE D0 04            [24] 1658 	pop	ar4
      0007C0 D0 05            [24] 1659 	pop	ar5
                                   1660 ;	main1.c:186: for (d=0; d< buffnewcount; d++)
      0007C2 A8*0A            [24] 1661 	mov	r0,_main_sloc4_1_0
      0007C4 A9*0B            [24] 1662 	mov	r1,(_main_sloc4_1_0 + 1)
      0007C6 E4               [12] 1663 	clr	a
      0007C7 F5*08            [12] 1664 	mov	_main_sloc3_1_0,a
      0007C9 F5*09            [12] 1665 	mov	(_main_sloc3_1_0 + 1),a
      0007CB                       1666 00156$:
      0007CB C0 04            [24] 1667 	push	ar4
      0007CD C0 05            [24] 1668 	push	ar5
      0007CF AC*08            [24] 1669 	mov	r4,_main_sloc3_1_0
      0007D1 AD*09            [24] 1670 	mov	r5,(_main_sloc3_1_0 + 1)
      0007D3 C3               [12] 1671 	clr	c
      0007D4 EC               [12] 1672 	mov	a,r4
      0007D5 98               [12] 1673 	subb	a,r0
      0007D6 ED               [12] 1674 	mov	a,r5
      0007D7 99               [12] 1675 	subb	a,r1
      0007D8 D0 05            [24] 1676 	pop	ar5
      0007DA D0 04            [24] 1677 	pop	ar4
      0007DC 40 03            [24] 1678 	jc	00331$
      0007DE 02r08rA8         [24] 1679 	ljmp	00135$
      0007E1                       1680 00331$:
                                   1681 ;	main1.c:188: if(startaddr[d] !=0)
      0007E1 E5*08            [12] 1682 	mov	a,_main_sloc3_1_0
      0007E3 25*08            [12] 1683 	add	a,_main_sloc3_1_0
      0007E5 F5*05            [12] 1684 	mov	_main_sloc2_1_0,a
      0007E7 E5*09            [12] 1685 	mov	a,(_main_sloc3_1_0 + 1)
      0007E9 33               [12] 1686 	rlc	a
      0007EA F5*06            [12] 1687 	mov	(_main_sloc2_1_0 + 1),a
      0007EC E5*05            [12] 1688 	mov	a,_main_sloc2_1_0
      0007EE 24rE3            [12] 1689 	add	a,#_main_startaddr_131072_67
      0007F0 F5 82            [12] 1690 	mov	dpl,a
      0007F2 E5*06            [12] 1691 	mov	a,(_main_sloc2_1_0 + 1)
      0007F4 34s0F            [12] 1692 	addc	a,#(_main_startaddr_131072_67 >> 8)
      0007F6 F5 83            [12] 1693 	mov	dph,a
      0007F8 E0               [24] 1694 	movx	a,@dptr
      0007F9 F5*03            [12] 1695 	mov	_main_sloc1_1_0,a
      0007FB A3               [24] 1696 	inc	dptr
      0007FC E0               [24] 1697 	movx	a,@dptr
      0007FD F5*04            [12] 1698 	mov	(_main_sloc1_1_0 + 1),a
      0007FF E5*03            [12] 1699 	mov	a,_main_sloc1_1_0
      000801 45*04            [12] 1700 	orl	a,(_main_sloc1_1_0 + 1)
      000803 70 03            [24] 1701 	jnz	00332$
      000805 02r08r9D         [24] 1702 	ljmp	00157$
      000808                       1703 00332$:
                                   1704 ;	main1.c:190: printf("\n\r%d\t0X0%x\t\t0X0%x\t\t %d\t\t%d\t%d\n\r",d,startaddr[d],endaddr[d],buffersizes[d],storagecountall[d],freespacesbuff[d]);
      000808 C0 04            [24] 1705 	push	ar4
      00080A C0 05            [24] 1706 	push	ar5
      00080C E5*05            [12] 1707 	mov	a,_main_sloc2_1_0
      00080E 24r85            [12] 1708 	add	a,#_main_freespacesbuff_131072_67
      000810 F5 82            [12] 1709 	mov	dpl,a
      000812 E5*06            [12] 1710 	mov	a,(_main_sloc2_1_0 + 1)
      000814 34s10            [12] 1711 	addc	a,#(_main_freespacesbuff_131072_67 >> 8)
      000816 F5 83            [12] 1712 	mov	dph,a
      000818 E0               [24] 1713 	movx	a,@dptr
      000819 FC               [12] 1714 	mov	r4,a
      00081A A3               [24] 1715 	inc	dptr
      00081B E0               [24] 1716 	movx	a,@dptr
      00081C FD               [12] 1717 	mov	r5,a
      00081D E5*05            [12] 1718 	mov	a,_main_sloc2_1_0
      00081F 24r5B            [12] 1719 	add	a,#_main_storagecountall_131072_67
      000821 F5 82            [12] 1720 	mov	dpl,a
      000823 E5*06            [12] 1721 	mov	a,(_main_sloc2_1_0 + 1)
      000825 34s10            [12] 1722 	addc	a,#(_main_storagecountall_131072_67 >> 8)
      000827 F5 83            [12] 1723 	mov	dph,a
      000829 E0               [24] 1724 	movx	a,@dptr
      00082A F5*00            [12] 1725 	mov	_main_sloc0_1_0,a
      00082C A3               [24] 1726 	inc	dptr
      00082D E0               [24] 1727 	movx	a,@dptr
      00082E F5*01            [12] 1728 	mov	(_main_sloc0_1_0 + 1),a
      000830 E5*05            [12] 1729 	mov	a,_main_sloc2_1_0
      000832 24r33            [12] 1730 	add	a,#_main_buffersizes_131072_67
      000834 F5 82            [12] 1731 	mov	dpl,a
      000836 E5*06            [12] 1732 	mov	a,(_main_sloc2_1_0 + 1)
      000838 34s10            [12] 1733 	addc	a,#(_main_buffersizes_131072_67 >> 8)
      00083A F5 83            [12] 1734 	mov	dph,a
      00083C E0               [24] 1735 	movx	a,@dptr
      00083D F5*0C            [12] 1736 	mov	_main_sloc5_1_0,a
      00083F A3               [24] 1737 	inc	dptr
      000840 E0               [24] 1738 	movx	a,@dptr
      000841 F5*0D            [12] 1739 	mov	(_main_sloc5_1_0 + 1),a
      000843 E5*05            [12] 1740 	mov	a,_main_sloc2_1_0
      000845 24r0B            [12] 1741 	add	a,#_main_endaddr_131072_67
      000847 F5 82            [12] 1742 	mov	dpl,a
      000849 E5*06            [12] 1743 	mov	a,(_main_sloc2_1_0 + 1)
      00084B 34s10            [12] 1744 	addc	a,#(_main_endaddr_131072_67 >> 8)
      00084D F5 83            [12] 1745 	mov	dph,a
      00084F E0               [24] 1746 	movx	a,@dptr
      000850 FE               [12] 1747 	mov	r6,a
      000851 A3               [24] 1748 	inc	dptr
      000852 E0               [24] 1749 	movx	a,@dptr
      000853 FF               [12] 1750 	mov	r7,a
      000854 C0 05            [24] 1751 	push	ar5
      000856 C0 04            [24] 1752 	push	ar4
      000858 C0 03            [24] 1753 	push	ar3
      00085A C0 02            [24] 1754 	push	ar2
      00085C C0 01            [24] 1755 	push	ar1
      00085E C0 00            [24] 1756 	push	ar0
      000860 C0 04            [24] 1757 	push	ar4
      000862 C0 05            [24] 1758 	push	ar5
      000864 C0*00            [24] 1759 	push	_main_sloc0_1_0
      000866 C0*01            [24] 1760 	push	(_main_sloc0_1_0 + 1)
      000868 C0*0C            [24] 1761 	push	_main_sloc5_1_0
      00086A C0*0D            [24] 1762 	push	(_main_sloc5_1_0 + 1)
      00086C C0 06            [24] 1763 	push	ar6
      00086E C0 07            [24] 1764 	push	ar7
      000870 C0*03            [24] 1765 	push	_main_sloc1_1_0
      000872 C0*04            [24] 1766 	push	(_main_sloc1_1_0 + 1)
      000874 C0*08            [24] 1767 	push	_main_sloc3_1_0
      000876 C0*09            [24] 1768 	push	(_main_sloc3_1_0 + 1)
      000878 74r93            [12] 1769 	mov	a,#___str_26
      00087A C0 E0            [24] 1770 	push	acc
      00087C 74s04            [12] 1771 	mov	a,#(___str_26 >> 8)
      00087E C0 E0            [24] 1772 	push	acc
      000880 74 80            [12] 1773 	mov	a,#0x80
      000882 C0 E0            [24] 1774 	push	acc
      000884 12r00r00         [24] 1775 	lcall	_printf
      000887 E5 81            [12] 1776 	mov	a,sp
      000889 24 F1            [12] 1777 	add	a,#0xf1
      00088B F5 81            [12] 1778 	mov	sp,a
      00088D D0 00            [24] 1779 	pop	ar0
      00088F D0 01            [24] 1780 	pop	ar1
      000891 D0 02            [24] 1781 	pop	ar2
      000893 D0 03            [24] 1782 	pop	ar3
      000895 D0 04            [24] 1783 	pop	ar4
      000897 D0 05            [24] 1784 	pop	ar5
                                   1785 ;	main1.c:232: break;
      000899 D0 05            [24] 1786 	pop	ar5
      00089B D0 04            [24] 1787 	pop	ar4
                                   1788 ;	main1.c:190: printf("\n\r%d\t0X0%x\t\t0X0%x\t\t %d\t\t%d\t%d\n\r",d,startaddr[d],endaddr[d],buffersizes[d],storagecountall[d],freespacesbuff[d]);
      00089D                       1789 00157$:
                                   1790 ;	main1.c:186: for (d=0; d< buffnewcount; d++)
      00089D 05*08            [12] 1791 	inc	_main_sloc3_1_0
      00089F E4               [12] 1792 	clr	a
      0008A0 B5*08 02         [24] 1793 	cjne	a,_main_sloc3_1_0,00333$
      0008A3 05*09            [12] 1794 	inc	(_main_sloc3_1_0 + 1)
      0008A5                       1795 00333$:
      0008A5 02r07rCB         [24] 1796 	ljmp	00156$
      0008A8                       1797 00135$:
                                   1798 ;	main1.c:193: printf("\n \r Total no. of characters after ? sign --> %d \n \r",totalcharafterQ);
      0008A8 C0 05            [24] 1799 	push	ar5
      0008AA C0 04            [24] 1800 	push	ar4
      0008AC C0 03            [24] 1801 	push	ar3
      0008AE C0 02            [24] 1802 	push	ar2
      0008B0 90r10r83         [24] 1803 	mov	dptr,#_main_totalcharafterQ_131072_67
      0008B3 E0               [24] 1804 	movx	a,@dptr
      0008B4 C0 E0            [24] 1805 	push	acc
      0008B6 A3               [24] 1806 	inc	dptr
      0008B7 E0               [24] 1807 	movx	a,@dptr
      0008B8 C0 E0            [24] 1808 	push	acc
      0008BA 74rB3            [12] 1809 	mov	a,#___str_27
      0008BC C0 E0            [24] 1810 	push	acc
      0008BE 74s04            [12] 1811 	mov	a,#(___str_27 >> 8)
      0008C0 C0 E0            [24] 1812 	push	acc
      0008C2 74 80            [12] 1813 	mov	a,#0x80
      0008C4 C0 E0            [24] 1814 	push	acc
      0008C6 12r00r00         [24] 1815 	lcall	_printf
      0008C9 E5 81            [12] 1816 	mov	a,sp
      0008CB 24 FB            [12] 1817 	add	a,#0xfb
      0008CD F5 81            [12] 1818 	mov	sp,a
                                   1819 ;	main1.c:194: totalcharafterQ=0;
      0008CF 90r10r83         [24] 1820 	mov	dptr,#_main_totalcharafterQ_131072_67
      0008D2 E4               [12] 1821 	clr	a
      0008D3 F0               [24] 1822 	movx	@dptr,a
      0008D4 A3               [24] 1823 	inc	dptr
      0008D5 F0               [24] 1824 	movx	@dptr,a
                                   1825 ;	main1.c:196: printf("\n \rData at Buffer 0: \t");
      0008D6 74rE7            [12] 1826 	mov	a,#___str_28
      0008D8 C0 E0            [24] 1827 	push	acc
      0008DA 74s04            [12] 1828 	mov	a,#(___str_28 >> 8)
      0008DC C0 E0            [24] 1829 	push	acc
      0008DE 74 80            [12] 1830 	mov	a,#0x80
      0008E0 C0 E0            [24] 1831 	push	acc
      0008E2 12r00r00         [24] 1832 	lcall	_printf
      0008E5 15 81            [12] 1833 	dec	sp
      0008E7 15 81            [12] 1834 	dec	sp
      0008E9 15 81            [12] 1835 	dec	sp
      0008EB D0 02            [24] 1836 	pop	ar2
      0008ED D0 03            [24] 1837 	pop	ar3
      0008EF D0 04            [24] 1838 	pop	ar4
      0008F1 D0 05            [24] 1839 	pop	ar5
                                   1840 ;	main1.c:197: for(e=0; e< totalstoragecount; e++)
      0008F3 90r0FrE1         [24] 1841 	mov	dptr,#_main_totalstoragecount_131072_67
      0008F6 E0               [24] 1842 	movx	a,@dptr
      0008F7 F5*0C            [12] 1843 	mov	_main_sloc5_1_0,a
      0008F9 A3               [24] 1844 	inc	dptr
      0008FA E0               [24] 1845 	movx	a,@dptr
      0008FB F5*0D            [12] 1846 	mov	(_main_sloc5_1_0 + 1),a
      0008FD 78 00            [12] 1847 	mov	r0,#0x00
      0008FF 79 00            [12] 1848 	mov	r1,#0x00
      000901                       1849 00159$:
      000901 C0 04            [24] 1850 	push	ar4
      000903 C0 05            [24] 1851 	push	ar5
      000905 88 04            [24] 1852 	mov	ar4,r0
      000907 89 05            [24] 1853 	mov	ar5,r1
      000909 C3               [12] 1854 	clr	c
      00090A EC               [12] 1855 	mov	a,r4
      00090B 95*0C            [12] 1856 	subb	a,_main_sloc5_1_0
      00090D ED               [12] 1857 	mov	a,r5
      00090E 95*0D            [12] 1858 	subb	a,(_main_sloc5_1_0 + 1)
      000910 D0 05            [24] 1859 	pop	ar5
      000912 D0 04            [24] 1860 	pop	ar4
      000914 40 03            [24] 1861 	jc	00334$
      000916 02r09rB2         [24] 1862 	ljmp	00138$
      000919                       1863 00334$:
                                   1864 ;	main1.c:199: printf("%c  ",*(buffer[0]+e));
      000919 C0 04            [24] 1865 	push	ar4
      00091B C0 05            [24] 1866 	push	ar5
      00091D 90r0FrA3         [24] 1867 	mov	dptr,#_main_buffer_131072_67
      000920 E0               [24] 1868 	movx	a,@dptr
      000921 FC               [12] 1869 	mov	r4,a
      000922 A3               [24] 1870 	inc	dptr
      000923 E0               [24] 1871 	movx	a,@dptr
      000924 FD               [12] 1872 	mov	r5,a
      000925 A3               [24] 1873 	inc	dptr
      000926 E0               [24] 1874 	movx	a,@dptr
      000927 FF               [12] 1875 	mov	r7,a
      000928 E8               [12] 1876 	mov	a,r0
      000929 2C               [12] 1877 	add	a,r4
      00092A FC               [12] 1878 	mov	r4,a
      00092B E9               [12] 1879 	mov	a,r1
      00092C 3D               [12] 1880 	addc	a,r5
      00092D FD               [12] 1881 	mov	r5,a
      00092E 8C 82            [24] 1882 	mov	dpl,r4
      000930 8D 83            [24] 1883 	mov	dph,r5
      000932 8F F0            [24] 1884 	mov	b,r7
      000934 12r00r00         [24] 1885 	lcall	__gptrget
      000937 FC               [12] 1886 	mov	r4,a
      000938 7F 00            [12] 1887 	mov	r7,#0x00
      00093A C0 05            [24] 1888 	push	ar5
      00093C C0 04            [24] 1889 	push	ar4
      00093E C0 03            [24] 1890 	push	ar3
      000940 C0 02            [24] 1891 	push	ar2
      000942 C0 01            [24] 1892 	push	ar1
      000944 C0 00            [24] 1893 	push	ar0
      000946 C0 04            [24] 1894 	push	ar4
      000948 C0 07            [24] 1895 	push	ar7
      00094A 74rFE            [12] 1896 	mov	a,#___str_29
      00094C C0 E0            [24] 1897 	push	acc
      00094E 74s04            [12] 1898 	mov	a,#(___str_29 >> 8)
      000950 C0 E0            [24] 1899 	push	acc
      000952 74 80            [12] 1900 	mov	a,#0x80
      000954 C0 E0            [24] 1901 	push	acc
      000956 12r00r00         [24] 1902 	lcall	_printf
      000959 E5 81            [12] 1903 	mov	a,sp
      00095B 24 FB            [12] 1904 	add	a,#0xfb
      00095D F5 81            [12] 1905 	mov	sp,a
      00095F D0 00            [24] 1906 	pop	ar0
      000961 D0 01            [24] 1907 	pop	ar1
      000963 D0 02            [24] 1908 	pop	ar2
      000965 D0 03            [24] 1909 	pop	ar3
      000967 D0 04            [24] 1910 	pop	ar4
      000969 D0 05            [24] 1911 	pop	ar5
                                   1912 ;	main1.c:200: if (e==64)
      00096B B8 40 05         [24] 1913 	cjne	r0,#0x40,00335$
      00096E B9 00 02         [24] 1914 	cjne	r1,#0x00,00335$
      000971 80 06            [24] 1915 	sjmp	00336$
      000973                       1916 00335$:
      000973 D0 05            [24] 1917 	pop	ar5
      000975 D0 04            [24] 1918 	pop	ar4
      000977 80 31            [24] 1919 	sjmp	00160$
      000979                       1920 00336$:
      000979 D0 05            [24] 1921 	pop	ar5
      00097B D0 04            [24] 1922 	pop	ar4
                                   1923 ;	main1.c:202: printf("\n");
      00097D C0 05            [24] 1924 	push	ar5
      00097F C0 04            [24] 1925 	push	ar4
      000981 C0 03            [24] 1926 	push	ar3
      000983 C0 02            [24] 1927 	push	ar2
      000985 C0 01            [24] 1928 	push	ar1
      000987 C0 00            [24] 1929 	push	ar0
      000989 74r03            [12] 1930 	mov	a,#___str_30
      00098B C0 E0            [24] 1931 	push	acc
      00098D 74s05            [12] 1932 	mov	a,#(___str_30 >> 8)
      00098F C0 E0            [24] 1933 	push	acc
      000991 74 80            [12] 1934 	mov	a,#0x80
      000993 C0 E0            [24] 1935 	push	acc
      000995 12r00r00         [24] 1936 	lcall	_printf
      000998 15 81            [12] 1937 	dec	sp
      00099A 15 81            [12] 1938 	dec	sp
      00099C 15 81            [12] 1939 	dec	sp
      00099E D0 00            [24] 1940 	pop	ar0
      0009A0 D0 01            [24] 1941 	pop	ar1
      0009A2 D0 02            [24] 1942 	pop	ar2
      0009A4 D0 03            [24] 1943 	pop	ar3
      0009A6 D0 04            [24] 1944 	pop	ar4
      0009A8 D0 05            [24] 1945 	pop	ar5
      0009AA                       1946 00160$:
                                   1947 ;	main1.c:197: for(e=0; e< totalstoragecount; e++)
      0009AA 08               [12] 1948 	inc	r0
      0009AB B8 00 01         [24] 1949 	cjne	r0,#0x00,00337$
      0009AE 09               [12] 1950 	inc	r1
      0009AF                       1951 00337$:
      0009AF 02r09r01         [24] 1952 	ljmp	00159$
      0009B2                       1953 00138$:
                                   1954 ;	main1.c:205: totalstoragecount=0;
      0009B2 90r0FrE1         [24] 1955 	mov	dptr,#_main_totalstoragecount_131072_67
      0009B5 E4               [12] 1956 	clr	a
      0009B6 F0               [24] 1957 	movx	@dptr,a
      0009B7 A3               [24] 1958 	inc	dptr
      0009B8 F0               [24] 1959 	movx	@dptr,a
      0009B9                       1960 00140$:
                                   1961 ;	main1.c:208: if (takechar=='=')    //  Data printing of buffer 0
      0009B9 BA 3D 05         [24] 1962 	cjne	r2,#0x3d,00338$
      0009BC BB 00 02         [24] 1963 	cjne	r3,#0x00,00338$
      0009BF 80 03            [24] 1964 	sjmp	00339$
      0009C1                       1965 00338$:
      0009C1 02r0ArF0         [24] 1966 	ljmp	00145$
      0009C4                       1967 00339$:
                                   1968 ;	main1.c:210: DEBUGPORT(0xE5);
      0009C4 75 82 E5         [24] 1969 	mov	dpl,#0xe5
      0009C7 C0 05            [24] 1970 	push	ar5
      0009C9 C0 04            [24] 1971 	push	ar4
      0009CB C0 03            [24] 1972 	push	ar3
      0009CD C0 02            [24] 1973 	push	ar2
      0009CF 12r00r00         [24] 1974 	lcall	_dataout
                                   1975 ;	main1.c:211: printf("\n \r ########## Data Inside Buffer 0 ##############");
      0009D2 74r05            [12] 1976 	mov	a,#___str_31
      0009D4 C0 E0            [24] 1977 	push	acc
      0009D6 74s05            [12] 1978 	mov	a,#(___str_31 >> 8)
      0009D8 C0 E0            [24] 1979 	push	acc
      0009DA 74 80            [12] 1980 	mov	a,#0x80
      0009DC C0 E0            [24] 1981 	push	acc
      0009DE 12r00r00         [24] 1982 	lcall	_printf
      0009E1 15 81            [12] 1983 	dec	sp
      0009E3 15 81            [12] 1984 	dec	sp
      0009E5 15 81            [12] 1985 	dec	sp
      0009E7 D0 02            [24] 1986 	pop	ar2
      0009E9 D0 03            [24] 1987 	pop	ar3
      0009EB D0 04            [24] 1988 	pop	ar4
      0009ED D0 05            [24] 1989 	pop	ar5
                                   1990 ;	main1.c:213: for(g=0; g< totalstoragecount; g++)
      0009EF 90r0FrE1         [24] 1991 	mov	dptr,#_main_totalstoragecount_131072_67
      0009F2 E0               [24] 1992 	movx	a,@dptr
      0009F3 F5*0C            [12] 1993 	mov	_main_sloc5_1_0,a
      0009F5 A3               [24] 1994 	inc	dptr
      0009F6 E0               [24] 1995 	movx	a,@dptr
      0009F7 F5*0D            [12] 1996 	mov	(_main_sloc5_1_0 + 1),a
      0009F9 78 00            [12] 1997 	mov	r0,#0x00
      0009FB 79 00            [12] 1998 	mov	r1,#0x00
      0009FD                       1999 00162$:
      0009FD C0 04            [24] 2000 	push	ar4
      0009FF C0 05            [24] 2001 	push	ar5
      000A01 88 04            [24] 2002 	mov	ar4,r0
      000A03 89 05            [24] 2003 	mov	ar5,r1
      000A05 C3               [12] 2004 	clr	c
      000A06 EC               [12] 2005 	mov	a,r4
      000A07 95*0C            [12] 2006 	subb	a,_main_sloc5_1_0
      000A09 ED               [12] 2007 	mov	a,r5
      000A0A 95*0D            [12] 2008 	subb	a,(_main_sloc5_1_0 + 1)
      000A0C D0 05            [24] 2009 	pop	ar5
      000A0E D0 04            [24] 2010 	pop	ar4
      000A10 40 03            [24] 2011 	jc	00340$
      000A12 02r0ArF0         [24] 2012 	ljmp	00145$
      000A15                       2013 00340$:
                                   2014 ;	main1.c:215: if(g%16==0)
      000A15 90r00r00         [24] 2015 	mov	dptr,#__modsint_PARM_2
      000A18 74 10            [12] 2016 	mov	a,#0x10
      000A1A F0               [24] 2017 	movx	@dptr,a
      000A1B E4               [12] 2018 	clr	a
      000A1C A3               [24] 2019 	inc	dptr
      000A1D F0               [24] 2020 	movx	@dptr,a
      000A1E 88 82            [24] 2021 	mov	dpl,r0
      000A20 89 83            [24] 2022 	mov	dph,r1
      000A22 C0 05            [24] 2023 	push	ar5
      000A24 C0 04            [24] 2024 	push	ar4
      000A26 C0 03            [24] 2025 	push	ar3
      000A28 C0 02            [24] 2026 	push	ar2
      000A2A C0 01            [24] 2027 	push	ar1
      000A2C C0 00            [24] 2028 	push	ar0
      000A2E 12r00r00         [24] 2029 	lcall	__modsint
      000A31 E5 82            [12] 2030 	mov	a,dpl
      000A33 85 83 F0         [24] 2031 	mov	b,dph
      000A36 D0 00            [24] 2032 	pop	ar0
      000A38 D0 01            [24] 2033 	pop	ar1
      000A3A D0 02            [24] 2034 	pop	ar2
      000A3C D0 03            [24] 2035 	pop	ar3
      000A3E D0 04            [24] 2036 	pop	ar4
      000A40 D0 05            [24] 2037 	pop	ar5
      000A42 45 F0            [12] 2038 	orl	a,b
      000A44 70 4C            [24] 2039 	jnz	00142$
                                   2040 ;	main1.c:217: printf("\n \r %p :",(buffer[0]+g));
      000A46 C0 04            [24] 2041 	push	ar4
      000A48 C0 05            [24] 2042 	push	ar5
      000A4A 90r0FrA3         [24] 2043 	mov	dptr,#_main_buffer_131072_67
      000A4D E0               [24] 2044 	movx	a,@dptr
      000A4E FC               [12] 2045 	mov	r4,a
      000A4F A3               [24] 2046 	inc	dptr
      000A50 E0               [24] 2047 	movx	a,@dptr
      000A51 FD               [12] 2048 	mov	r5,a
      000A52 A3               [24] 2049 	inc	dptr
      000A53 E0               [24] 2050 	movx	a,@dptr
      000A54 FF               [12] 2051 	mov	r7,a
      000A55 E8               [12] 2052 	mov	a,r0
      000A56 2C               [12] 2053 	add	a,r4
      000A57 FC               [12] 2054 	mov	r4,a
      000A58 E9               [12] 2055 	mov	a,r1
      000A59 3D               [12] 2056 	addc	a,r5
      000A5A FD               [12] 2057 	mov	r5,a
      000A5B C0 05            [24] 2058 	push	ar5
      000A5D C0 04            [24] 2059 	push	ar4
      000A5F C0 03            [24] 2060 	push	ar3
      000A61 C0 02            [24] 2061 	push	ar2
      000A63 C0 01            [24] 2062 	push	ar1
      000A65 C0 00            [24] 2063 	push	ar0
      000A67 C0 04            [24] 2064 	push	ar4
      000A69 C0 05            [24] 2065 	push	ar5
      000A6B C0 07            [24] 2066 	push	ar7
      000A6D 74r38            [12] 2067 	mov	a,#___str_32
      000A6F C0 E0            [24] 2068 	push	acc
      000A71 74s05            [12] 2069 	mov	a,#(___str_32 >> 8)
      000A73 C0 E0            [24] 2070 	push	acc
      000A75 74 80            [12] 2071 	mov	a,#0x80
      000A77 C0 E0            [24] 2072 	push	acc
      000A79 12r00r00         [24] 2073 	lcall	_printf
      000A7C E5 81            [12] 2074 	mov	a,sp
      000A7E 24 FA            [12] 2075 	add	a,#0xfa
      000A80 F5 81            [12] 2076 	mov	sp,a
      000A82 D0 00            [24] 2077 	pop	ar0
      000A84 D0 01            [24] 2078 	pop	ar1
      000A86 D0 02            [24] 2079 	pop	ar2
      000A88 D0 03            [24] 2080 	pop	ar3
      000A8A D0 04            [24] 2081 	pop	ar4
      000A8C D0 05            [24] 2082 	pop	ar5
                                   2083 ;	main1.c:232: break;
      000A8E D0 05            [24] 2084 	pop	ar5
      000A90 D0 04            [24] 2085 	pop	ar4
                                   2086 ;	main1.c:217: printf("\n \r %p :",(buffer[0]+g));
      000A92                       2087 00142$:
                                   2088 ;	main1.c:219: printf("%x ",*(buffer[0]+g));
      000A92 C0 04            [24] 2089 	push	ar4
      000A94 C0 05            [24] 2090 	push	ar5
      000A96 90r0FrA3         [24] 2091 	mov	dptr,#_main_buffer_131072_67
      000A99 E0               [24] 2092 	movx	a,@dptr
      000A9A FD               [12] 2093 	mov	r5,a
      000A9B A3               [24] 2094 	inc	dptr
      000A9C E0               [24] 2095 	movx	a,@dptr
      000A9D FE               [12] 2096 	mov	r6,a
      000A9E A3               [24] 2097 	inc	dptr
      000A9F E0               [24] 2098 	movx	a,@dptr
      000AA0 FF               [12] 2099 	mov	r7,a
      000AA1 E8               [12] 2100 	mov	a,r0
      000AA2 2D               [12] 2101 	add	a,r5
      000AA3 FD               [12] 2102 	mov	r5,a
      000AA4 E9               [12] 2103 	mov	a,r1
      000AA5 3E               [12] 2104 	addc	a,r6
      000AA6 FE               [12] 2105 	mov	r6,a
      000AA7 8D 82            [24] 2106 	mov	dpl,r5
      000AA9 8E 83            [24] 2107 	mov	dph,r6
      000AAB 8F F0            [24] 2108 	mov	b,r7
      000AAD 12r00r00         [24] 2109 	lcall	__gptrget
      000AB0 FD               [12] 2110 	mov	r5,a
      000AB1 7F 00            [12] 2111 	mov	r7,#0x00
      000AB3 C0 05            [24] 2112 	push	ar5
      000AB5 C0 04            [24] 2113 	push	ar4
      000AB7 C0 03            [24] 2114 	push	ar3
      000AB9 C0 02            [24] 2115 	push	ar2
      000ABB C0 01            [24] 2116 	push	ar1
      000ABD C0 00            [24] 2117 	push	ar0
      000ABF C0 05            [24] 2118 	push	ar5
      000AC1 C0 07            [24] 2119 	push	ar7
      000AC3 74r41            [12] 2120 	mov	a,#___str_33
      000AC5 C0 E0            [24] 2121 	push	acc
      000AC7 74s05            [12] 2122 	mov	a,#(___str_33 >> 8)
      000AC9 C0 E0            [24] 2123 	push	acc
      000ACB 74 80            [12] 2124 	mov	a,#0x80
      000ACD C0 E0            [24] 2125 	push	acc
      000ACF 12r00r00         [24] 2126 	lcall	_printf
      000AD2 E5 81            [12] 2127 	mov	a,sp
      000AD4 24 FB            [12] 2128 	add	a,#0xfb
      000AD6 F5 81            [12] 2129 	mov	sp,a
      000AD8 D0 00            [24] 2130 	pop	ar0
      000ADA D0 01            [24] 2131 	pop	ar1
      000ADC D0 02            [24] 2132 	pop	ar2
      000ADE D0 03            [24] 2133 	pop	ar3
      000AE0 D0 04            [24] 2134 	pop	ar4
      000AE2 D0 05            [24] 2135 	pop	ar5
                                   2136 ;	main1.c:213: for(g=0; g< totalstoragecount; g++)
      000AE4 08               [12] 2137 	inc	r0
      000AE5 B8 00 01         [24] 2138 	cjne	r0,#0x00,00342$
      000AE8 09               [12] 2139 	inc	r1
      000AE9                       2140 00342$:
      000AE9 D0 05            [24] 2141 	pop	ar5
      000AEB D0 04            [24] 2142 	pop	ar4
      000AED 02r09rFD         [24] 2143 	ljmp	00162$
      000AF0                       2144 00145$:
                                   2145 ;	main1.c:222: if (takechar=='@')     //to clear all the buffers
      000AF0 BA 40 05         [24] 2146 	cjne	r2,#0x40,00343$
      000AF3 BB 00 02         [24] 2147 	cjne	r3,#0x00,00343$
      000AF6 80 03            [24] 2148 	sjmp	00344$
      000AF8                       2149 00343$:
      000AF8 02r02r94         [24] 2150 	ljmp	00150$
      000AFB                       2151 00344$:
                                   2152 ;	main1.c:224: DEBUGPORT(0xAC);
      000AFB 75 82 AC         [24] 2153 	mov	dpl,#0xac
      000AFE 12r00r00         [24] 2154 	lcall	_dataout
                                   2155 ;	main1.c:226: printf("\n \r ########## All Buffers Cleared ##############");
      000B01 74r45            [12] 2156 	mov	a,#___str_34
      000B03 C0 E0            [24] 2157 	push	acc
      000B05 74s05            [12] 2158 	mov	a,#(___str_34 >> 8)
      000B07 C0 E0            [24] 2159 	push	acc
      000B09 74 80            [12] 2160 	mov	a,#0x80
      000B0B C0 E0            [24] 2161 	push	acc
      000B0D 12r00r00         [24] 2162 	lcall	_printf
      000B10 15 81            [12] 2163 	dec	sp
      000B12 15 81            [12] 2164 	dec	sp
      000B14 15 81            [12] 2165 	dec	sp
                                   2166 ;	main1.c:227: for (k=0; k<buffnewcount; k++)
      000B16 AE*0A            [24] 2167 	mov	r6,_main_sloc4_1_0
      000B18 AF*0B            [24] 2168 	mov	r7,(_main_sloc4_1_0 + 1)
      000B1A 7C 00            [12] 2169 	mov	r4,#0x00
      000B1C 7D 00            [12] 2170 	mov	r5,#0x00
      000B1E                       2171 00165$:
      000B1E 8C 02            [24] 2172 	mov	ar2,r4
      000B20 8D 03            [24] 2173 	mov	ar3,r5
      000B22 C3               [12] 2174 	clr	c
      000B23 EA               [12] 2175 	mov	a,r2
      000B24 9E               [12] 2176 	subb	a,r6
      000B25 EB               [12] 2177 	mov	a,r3
      000B26 9F               [12] 2178 	subb	a,r7
      000B27 40 03            [24] 2179 	jc	00345$
      000B29 02r00r12         [24] 2180 	ljmp	00153$
      000B2C                       2181 00345$:
                                   2182 ;	main1.c:229: free(buffer[buffnewcount]);
      000B2C 90r00r00         [24] 2183 	mov	dptr,#__mulint_PARM_2
      000B2F EE               [12] 2184 	mov	a,r6
      000B30 F0               [24] 2185 	movx	@dptr,a
      000B31 EF               [12] 2186 	mov	a,r7
      000B32 A3               [24] 2187 	inc	dptr
      000B33 F0               [24] 2188 	movx	@dptr,a
      000B34 90 00 03         [24] 2189 	mov	dptr,#0x0003
      000B37 C0 07            [24] 2190 	push	ar7
      000B39 C0 06            [24] 2191 	push	ar6
      000B3B C0 05            [24] 2192 	push	ar5
      000B3D C0 04            [24] 2193 	push	ar4
      000B3F 12r00r00         [24] 2194 	lcall	__mulint
      000B42 AA 82            [24] 2195 	mov	r2,dpl
      000B44 AB 83            [24] 2196 	mov	r3,dph
      000B46 EA               [12] 2197 	mov	a,r2
      000B47 24rA3            [12] 2198 	add	a,#_main_buffer_131072_67
      000B49 F5 82            [12] 2199 	mov	dpl,a
      000B4B EB               [12] 2200 	mov	a,r3
      000B4C 34s0F            [12] 2201 	addc	a,#(_main_buffer_131072_67 >> 8)
      000B4E F5 83            [12] 2202 	mov	dph,a
      000B50 E0               [24] 2203 	movx	a,@dptr
      000B51 F9               [12] 2204 	mov	r1,a
      000B52 A3               [24] 2205 	inc	dptr
      000B53 E0               [24] 2206 	movx	a,@dptr
      000B54 FA               [12] 2207 	mov	r2,a
      000B55 A3               [24] 2208 	inc	dptr
      000B56 E0               [24] 2209 	movx	a,@dptr
      000B57 FB               [12] 2210 	mov	r3,a
      000B58 89 82            [24] 2211 	mov	dpl,r1
      000B5A 8A 83            [24] 2212 	mov	dph,r2
      000B5C 8B F0            [24] 2213 	mov	b,r3
      000B5E 12r00r00         [24] 2214 	lcall	_free
      000B61 D0 04            [24] 2215 	pop	ar4
      000B63 D0 05            [24] 2216 	pop	ar5
                                   2217 ;	main1.c:230: printf("\n \r Buffer %d Cleared \n",k);
      000B65 C0 05            [24] 2218 	push	ar5
      000B67 C0 04            [24] 2219 	push	ar4
      000B69 C0 04            [24] 2220 	push	ar4
      000B6B C0 05            [24] 2221 	push	ar5
      000B6D 74r77            [12] 2222 	mov	a,#___str_35
      000B6F C0 E0            [24] 2223 	push	acc
      000B71 74s05            [12] 2224 	mov	a,#(___str_35 >> 8)
      000B73 C0 E0            [24] 2225 	push	acc
      000B75 74 80            [12] 2226 	mov	a,#0x80
      000B77 C0 E0            [24] 2227 	push	acc
      000B79 12r00r00         [24] 2228 	lcall	_printf
      000B7C E5 81            [12] 2229 	mov	a,sp
      000B7E 24 FB            [12] 2230 	add	a,#0xfb
      000B80 F5 81            [12] 2231 	mov	sp,a
      000B82 D0 04            [24] 2232 	pop	ar4
      000B84 D0 05            [24] 2233 	pop	ar5
      000B86 D0 06            [24] 2234 	pop	ar6
      000B88 D0 07            [24] 2235 	pop	ar7
                                   2236 ;	main1.c:227: for (k=0; k<buffnewcount; k++)
      000B8A 0C               [12] 2237 	inc	r4
      000B8B BC 00 01         [24] 2238 	cjne	r4,#0x00,00346$
      000B8E 0D               [12] 2239 	inc	r5
      000B8F                       2240 00346$:
                                   2241 ;	main1.c:232: break;
                                   2242 ;	main1.c:238: }
      000B8F 02r0Br1E         [24] 2243 	ljmp	00165$
                                   2244 ;------------------------------------------------------------
                                   2245 ;Allocation info for local variables in function 'takeinput'
                                   2246 ;------------------------------------------------------------
                                   2247 ;no                        Allocated with name '_takeinput_no_65537_104'
                                   2248 ;number                    Allocated with name '_takeinput_number_65537_104'
                                   2249 ;i                         Allocated with name '_takeinput_i_65537_104'
                                   2250 ;------------------------------------------------------------
                                   2251 ;	main1.c:242: int takeinput()  // to take input from a user
                                   2252 ;	-----------------------------------------
                                   2253 ;	 function takeinput
                                   2254 ;	-----------------------------------------
      000B92                       2255 _takeinput:
                                   2256 ;	main1.c:244: printf_tiny("\n \r Enter a number in valid range as mentioned \n \r");
      000B92 74r8F            [12] 2257 	mov	a,#___str_36
      000B94 C0 E0            [24] 2258 	push	acc
      000B96 74s05            [12] 2259 	mov	a,#(___str_36 >> 8)
      000B98 C0 E0            [24] 2260 	push	acc
      000B9A 12r00r00         [24] 2261 	lcall	_printf_tiny
      000B9D 15 81            [12] 2262 	dec	sp
      000B9F 15 81            [12] 2263 	dec	sp
                                   2264 ;	main1.c:247: uint16_t number = 0;
      000BA1 90r10rAD         [24] 2265 	mov	dptr,#_takeinput_number_65537_104
      000BA4 E4               [12] 2266 	clr	a
      000BA5 F0               [24] 2267 	movx	@dptr,a
      000BA6 A3               [24] 2268 	inc	dptr
      000BA7 F0               [24] 2269 	movx	@dptr,a
                                   2270 ;	main1.c:249: do
      000BA8 7E 01            [12] 2271 	mov	r6,#0x01
      000BAA 7F 00            [12] 2272 	mov	r7,#0x00
      000BAC                       2273 00105$:
                                   2274 ;	main1.c:251: no= getchar();
      000BAC C0 07            [24] 2275 	push	ar7
      000BAE C0 06            [24] 2276 	push	ar6
      000BB0 12r0Cr53         [24] 2277 	lcall	_getchar
      000BB3 AC 82            [24] 2278 	mov	r4,dpl
      000BB5 AD 83            [24] 2279 	mov	r5,dph
      000BB7 D0 06            [24] 2280 	pop	ar6
      000BB9 D0 07            [24] 2281 	pop	ar7
                                   2282 ;	main1.c:252: if (no>47 && no<58){
      000BBB 8C 02            [24] 2283 	mov	ar2,r4
      000BBD 8D 03            [24] 2284 	mov	ar3,r5
      000BBF C3               [12] 2285 	clr	c
      000BC0 74 2F            [12] 2286 	mov	a,#0x2f
      000BC2 9A               [12] 2287 	subb	a,r2
      000BC3 E4               [12] 2288 	clr	a
      000BC4 9B               [12] 2289 	subb	a,r3
      000BC5 50 5E            [24] 2290 	jnc	00107$
      000BC7 8C 02            [24] 2291 	mov	ar2,r4
      000BC9 8D 03            [24] 2292 	mov	ar3,r5
      000BCB C3               [12] 2293 	clr	c
      000BCC EA               [12] 2294 	mov	a,r2
      000BCD 94 3A            [12] 2295 	subb	a,#0x3a
      000BCF EB               [12] 2296 	mov	a,r3
      000BD0 94 00            [12] 2297 	subb	a,#0x00
      000BD2 50 51            [24] 2298 	jnc	00107$
                                   2299 ;	main1.c:253: number = (number*10) + (no - '0');
      000BD4 90r10rAD         [24] 2300 	mov	dptr,#_takeinput_number_65537_104
      000BD7 E0               [24] 2301 	movx	a,@dptr
      000BD8 FA               [12] 2302 	mov	r2,a
      000BD9 A3               [24] 2303 	inc	dptr
      000BDA E0               [24] 2304 	movx	a,@dptr
      000BDB FB               [12] 2305 	mov	r3,a
      000BDC 90r00r00         [24] 2306 	mov	dptr,#__mulint_PARM_2
      000BDF EA               [12] 2307 	mov	a,r2
      000BE0 F0               [24] 2308 	movx	@dptr,a
      000BE1 EB               [12] 2309 	mov	a,r3
      000BE2 A3               [24] 2310 	inc	dptr
      000BE3 F0               [24] 2311 	movx	@dptr,a
      000BE4 90 00 0A         [24] 2312 	mov	dptr,#0x000a
      000BE7 C0 07            [24] 2313 	push	ar7
      000BE9 C0 06            [24] 2314 	push	ar6
      000BEB C0 05            [24] 2315 	push	ar5
      000BED C0 04            [24] 2316 	push	ar4
      000BEF 12r00r00         [24] 2317 	lcall	__mulint
      000BF2 AA 82            [24] 2318 	mov	r2,dpl
      000BF4 AB 83            [24] 2319 	mov	r3,dph
      000BF6 D0 04            [24] 2320 	pop	ar4
      000BF8 D0 05            [24] 2321 	pop	ar5
      000BFA EC               [12] 2322 	mov	a,r4
      000BFB 24 D0            [12] 2323 	add	a,#0xd0
      000BFD F8               [12] 2324 	mov	r0,a
      000BFE ED               [12] 2325 	mov	a,r5
      000BFF 34 FF            [12] 2326 	addc	a,#0xff
      000C01 F9               [12] 2327 	mov	r1,a
      000C02 90r10rAD         [24] 2328 	mov	dptr,#_takeinput_number_65537_104
      000C05 E8               [12] 2329 	mov	a,r0
      000C06 2A               [12] 2330 	add	a,r2
      000C07 F0               [24] 2331 	movx	@dptr,a
      000C08 E9               [12] 2332 	mov	a,r1
      000C09 3B               [12] 2333 	addc	a,r3
      000C0A A3               [24] 2334 	inc	dptr
      000C0B F0               [24] 2335 	movx	@dptr,a
                                   2336 ;	main1.c:258: putchar(no);
      000C0C 8C 82            [24] 2337 	mov	dpl,r4
      000C0E 8D 83            [24] 2338 	mov	dph,r5
      000C10 12r0Cr61         [24] 2339 	lcall	_putchar
      000C13 D0 06            [24] 2340 	pop	ar6
      000C15 D0 07            [24] 2341 	pop	ar7
                                   2342 ;	main1.c:259: i++;
      000C17 0E               [12] 2343 	inc	r6
      000C18 BE 00 01         [24] 2344 	cjne	r6,#0x00,00125$
      000C1B 0F               [12] 2345 	inc	r7
      000C1C                       2346 00125$:
                                   2347 ;	main1.c:260: } while (i < 5);
      000C1C C3               [12] 2348 	clr	c
      000C1D EE               [12] 2349 	mov	a,r6
      000C1E 94 05            [12] 2350 	subb	a,#0x05
      000C20 EF               [12] 2351 	mov	a,r7
      000C21 94 00            [12] 2352 	subb	a,#0x00
      000C23 40 87            [24] 2353 	jc	00105$
      000C25                       2354 00107$:
                                   2355 ;	main1.c:261: printf("\n Size Number = %d \n",number);
      000C25 90r10rAD         [24] 2356 	mov	dptr,#_takeinput_number_65537_104
      000C28 E0               [24] 2357 	movx	a,@dptr
      000C29 FE               [12] 2358 	mov	r6,a
      000C2A A3               [24] 2359 	inc	dptr
      000C2B E0               [24] 2360 	movx	a,@dptr
      000C2C FF               [12] 2361 	mov	r7,a
      000C2D C0 07            [24] 2362 	push	ar7
      000C2F C0 06            [24] 2363 	push	ar6
      000C31 C0 06            [24] 2364 	push	ar6
      000C33 C0 07            [24] 2365 	push	ar7
      000C35 74rC2            [12] 2366 	mov	a,#___str_37
      000C37 C0 E0            [24] 2367 	push	acc
      000C39 74s05            [12] 2368 	mov	a,#(___str_37 >> 8)
      000C3B C0 E0            [24] 2369 	push	acc
      000C3D 74 80            [12] 2370 	mov	a,#0x80
      000C3F C0 E0            [24] 2371 	push	acc
      000C41 12r00r00         [24] 2372 	lcall	_printf
      000C44 E5 81            [12] 2373 	mov	a,sp
      000C46 24 FB            [12] 2374 	add	a,#0xfb
      000C48 F5 81            [12] 2375 	mov	sp,a
      000C4A D0 06            [24] 2376 	pop	ar6
      000C4C D0 07            [24] 2377 	pop	ar7
                                   2378 ;	main1.c:262: return number;
      000C4E 8E 82            [24] 2379 	mov	dpl,r6
      000C50 8F 83            [24] 2380 	mov	dph,r7
                                   2381 ;	main1.c:266: }
      000C52 22               [24] 2382 	ret
                                   2383 ;------------------------------------------------------------
                                   2384 ;Allocation info for local variables in function 'getchar'
                                   2385 ;------------------------------------------------------------
                                   2386 ;x                         Allocated with name '_getchar_x_65536_108'
                                   2387 ;------------------------------------------------------------
                                   2388 ;	main1.c:267: int getchar()
                                   2389 ;	-----------------------------------------
                                   2390 ;	 function getchar
                                   2391 ;	-----------------------------------------
      000C53                       2392 _getchar:
                                   2393 ;	main1.c:270: while(!RI)
      000C53                       2394 00101$:
                                   2395 ;	main1.c:274: RI =0;
                                   2396 ;	assignBit
      000C53 10 98 02         [24] 2397 	jbc	_RI,00114$
      000C56 80 FB            [24] 2398 	sjmp	00101$
      000C58                       2399 00114$:
                                   2400 ;	main1.c:275: x = SBUF;
      000C58 AE 99            [24] 2401 	mov	r6,_SBUF
      000C5A 7F 00            [12] 2402 	mov	r7,#0x00
                                   2403 ;	main1.c:276: return x;
      000C5C 8E 82            [24] 2404 	mov	dpl,r6
      000C5E 8F 83            [24] 2405 	mov	dph,r7
                                   2406 ;	main1.c:277: }
      000C60 22               [24] 2407 	ret
                                   2408 ;------------------------------------------------------------
                                   2409 ;Allocation info for local variables in function 'putchar'
                                   2410 ;------------------------------------------------------------
                                   2411 ;b                         Allocated with name '_putchar_b_65536_110'
                                   2412 ;------------------------------------------------------------
                                   2413 ;	main1.c:280: int putchar(int b)
                                   2414 ;	-----------------------------------------
                                   2415 ;	 function putchar
                                   2416 ;	-----------------------------------------
      000C61                       2417 _putchar:
      000C61 AF 83            [24] 2418 	mov	r7,dph
      000C63 E5 82            [12] 2419 	mov	a,dpl
      000C65 90r10rAF         [24] 2420 	mov	dptr,#_putchar_b_65536_110
      000C68 F0               [24] 2421 	movx	@dptr,a
      000C69 EF               [12] 2422 	mov	a,r7
      000C6A A3               [24] 2423 	inc	dptr
      000C6B F0               [24] 2424 	movx	@dptr,a
                                   2425 ;	main1.c:282: while(!TI){
      000C6C                       2426 00101$:
                                   2427 ;	main1.c:285: TI =0;
                                   2428 ;	assignBit
      000C6C 10 99 02         [24] 2429 	jbc	_TI,00114$
      000C6F 80 FB            [24] 2430 	sjmp	00101$
      000C71                       2431 00114$:
                                   2432 ;	main1.c:286: SBUF = b;
      000C71 90r10rAF         [24] 2433 	mov	dptr,#_putchar_b_65536_110
      000C74 E0               [24] 2434 	movx	a,@dptr
      000C75 FE               [12] 2435 	mov	r6,a
      000C76 A3               [24] 2436 	inc	dptr
      000C77 E0               [24] 2437 	movx	a,@dptr
      000C78 8E 99            [24] 2438 	mov	_SBUF,r6
                                   2439 ;	main1.c:287: return 0;
      000C7A 90 00 00         [24] 2440 	mov	dptr,#0x0000
                                   2441 ;	main1.c:288: }
      000C7D 22               [24] 2442 	ret
                                   2443 	.area CSEG    (CODE)
                                   2444 	.area CONST   (CODE)
      000000                       2445 ___sdcc_heap_size:
      000000 A0 0F                 2446 	.byte #0xa0, #0x0f	; 4000
                                   2447 	.area CONST   (CODE)
      000002                       2448 ___str_0:
      000002 23 23 23 20 45 6E 74  2449 	.ascii "### Enter a valid buffer size for buffer 0 and 1 ###"
             65 72 20 61 20 76 61
             6C 69 64 20 62 75 66
             66 65 72 20 73 69 7A
             65 20 66 6F 72 20 62
             75 66 66 65 72 20 30
             20 61 6E 64 20 31 20
             23 23 23
      000036 00                    2450 	.db 0x00
                                   2451 	.area CSEG    (CODE)
                                   2452 	.area CONST   (CODE)
      000037                       2453 ___str_1:
      000037 0A                    2454 	.db 0x0a
      000038 20                    2455 	.ascii " "
      000039 0D                    2456 	.db 0x0d
      00003A 4D 61 6C 6C 6F 63 20  2457 	.ascii "Malloc buffer0 failed"
             62 75 66 66 65 72 30
             20 66 61 69 6C 65 64
      00004F 0A                    2458 	.db 0x0a
      000050 0D                    2459 	.db 0x0d
      000051 00                    2460 	.db 0x00
                                   2461 	.area CSEG    (CODE)
                                   2462 	.area CONST   (CODE)
      000052                       2463 ___str_2:
      000052 0A                    2464 	.db 0x0a
      000053 20                    2465 	.ascii " "
      000054 0D                    2466 	.db 0x0d
      000055 4D 61 6C 6C 6F 63 20  2467 	.ascii "Malloc buffer0 passed"
             62 75 66 66 65 72 30
             20 70 61 73 73 65 64
      00006A 0A                    2468 	.db 0x0a
      00006B 0D                    2469 	.db 0x0d
      00006C 00                    2470 	.db 0x00
                                   2471 	.area CSEG    (CODE)
                                   2472 	.area CONST   (CODE)
      00006D                       2473 ___str_3:
      00006D 0A                    2474 	.db 0x0a
      00006E 20                    2475 	.ascii " "
      00006F 0D                    2476 	.db 0x0d
      000070 42 75 66 66 65 72 20  2477 	.ascii "Buffer 0 created at :0X0%x "
             30 20 63 72 65 61 74
             65 64 20 61 74 20 3A
             30 58 30 25 78 20
      00008B 0A                    2478 	.db 0x0a
      00008C 20                    2479 	.ascii " "
      00008D 0D                    2480 	.db 0x0d
      00008E 00                    2481 	.db 0x00
                                   2482 	.area CSEG    (CODE)
                                   2483 	.area CONST   (CODE)
      00008F                       2484 ___str_4:
      00008F 0A                    2485 	.db 0x0a
      000090 20                    2486 	.ascii " "
      000091 0D                    2487 	.db 0x0d
      000092 4D 61 6C 6C 6F 63 20  2488 	.ascii "Malloc buffer1 passed "
             62 75 66 66 65 72 31
             20 70 61 73 73 65 64
             20
      0000A8 0A                    2489 	.db 0x0a
      0000A9 20                    2490 	.ascii " "
      0000AA 0D                    2491 	.db 0x0d
      0000AB 00                    2492 	.db 0x00
                                   2493 	.area CSEG    (CODE)
                                   2494 	.area CONST   (CODE)
      0000AC                       2495 ___str_5:
      0000AC 0A                    2496 	.db 0x0a
      0000AD 20                    2497 	.ascii " "
      0000AE 0D                    2498 	.db 0x0d
      0000AF 42 75 66 66 65 72 20  2499 	.ascii "Buffer 1 created at : :0X0%x "
             31 20 63 72 65 61 74
             65 64 20 61 74 20 3A
             20 3A 30 58 30 25 78
             20
      0000CC 0A                    2500 	.db 0x0a
      0000CD 20                    2501 	.ascii " "
      0000CE 0D                    2502 	.db 0x0d
      0000CF 00                    2503 	.db 0x00
                                   2504 	.area CSEG    (CODE)
                                   2505 	.area CONST   (CODE)
      0000D0                       2506 ___str_6:
      0000D0 0A                    2507 	.db 0x0a
      0000D1 20                    2508 	.ascii " "
      0000D2 0D                    2509 	.db 0x0d
      0000D3 4D 61 6C 6C 6F 63 20  2510 	.ascii "Malloc buffer1 failed so reenter value"
             62 75 66 66 65 72 31
             20 66 61 69 6C 65 64
             20 73 6F 20 72 65 65
             6E 74 65 72 20 76 61
             6C 75 65
      0000F9 0A                    2511 	.db 0x0a
      0000FA 0D                    2512 	.db 0x0d
      0000FB 00                    2513 	.db 0x00
                                   2514 	.area CSEG    (CODE)
                                   2515 	.area CONST   (CODE)
      0000FC                       2516 ___str_7:
      0000FC 0A                    2517 	.db 0x0a
      0000FD 0D                    2518 	.db 0x0d
      0000FE 20 23 23 23 23 23 23  2519 	.ascii " ####### Select from the command options below ##########"
             23 20 53 65 6C 65 63
             74 20 66 72 6F 6D 20
             74 68 65 20 63 6F 6D
             6D 61 6E 64 20 6F 70
             74 69 6F 6E 73 20 62
             65 6C 6F 77 20 23 23
             23 23 23 23 23 23 23
             23
      000137 00                    2520 	.db 0x00
                                   2521 	.area CSEG    (CODE)
                                   2522 	.area CONST   (CODE)
      000138                       2523 ___str_8:
      000138 0A                    2524 	.db 0x0a
      000139 20                    2525 	.ascii " "
      00013A 0D                    2526 	.db 0x0d
      00013B 20 31 2E 20 27 2B 27  2527 	.ascii " 1. '+' Sign --> Add a New Buffer"
             20 53 69 67 6E 20 2D
             2D 3E 20 41 64 64 20
             61 20 4E 65 77 20 42
             75 66 66 65 72
      00015C 00                    2528 	.db 0x00
                                   2529 	.area CSEG    (CODE)
                                   2530 	.area CONST   (CODE)
      00015D                       2531 ___str_9:
      00015D 0A                    2532 	.db 0x0a
      00015E 20                    2533 	.ascii " "
      00015F 0D                    2534 	.db 0x0d
      000160 20 32 2E 20 27 2D 27  2535 	.ascii " 2. '-' Sign --> Clean a Buffer"
             20 53 69 67 6E 20 2D
             2D 3E 20 43 6C 65 61
             6E 20 61 20 42 75 66
             66 65 72
      00017F 00                    2536 	.db 0x00
                                   2537 	.area CSEG    (CODE)
                                   2538 	.area CONST   (CODE)
      000180                       2539 ___str_10:
      000180 0A                    2540 	.db 0x0a
      000181 20                    2541 	.ascii " "
      000182 0D                    2542 	.db 0x0d
      000183 20 33 2E 20 27 3F 27  2543 	.ascii " 3. '?' Sign --> Display a Detailed Heap Report"
             20 53 69 67 6E 20 2D
             2D 3E 20 44 69 73 70
             6C 61 79 20 61 20 44
             65 74 61 69 6C 65 64
             20 48 65 61 70 20 52
             65 70 6F 72 74
      0001B2 00                    2544 	.db 0x00
                                   2545 	.area CSEG    (CODE)
                                   2546 	.area CONST   (CODE)
      0001B3                       2547 ___str_11:
      0001B3 0A                    2548 	.db 0x0a
      0001B4 20                    2549 	.ascii " "
      0001B5 0D                    2550 	.db 0x0d
      0001B6 20 34 2E 20 27 40 27  2551 	.ascii " 4. '@' Sign --> Clear all Buffers Data and Start Again"
             20 53 69 67 6E 20 2D
             2D 3E 20 43 6C 65 61
             72 20 61 6C 6C 20 42
             75 66 66 65 72 73 20
             44 61 74 61 20 61 6E
             64 20 53 74 61 72 74
             20 41 67 61 69 6E
      0001ED 00                    2552 	.db 0x00
                                   2553 	.area CSEG    (CODE)
                                   2554 	.area CONST   (CODE)
      0001EE                       2555 ___str_12:
      0001EE 0A                    2556 	.db 0x0a
      0001EF 20                    2557 	.ascii " "
      0001F0 0D                    2558 	.db 0x0d
      0001F1 20 35 2E 20 27 61 27  2559 	.ascii " 5. 'a'-'z'  --> Store these Characters in Buffer 0"
             2D 27 7A 27 20 20 2D
             2D 3E 20 53 74 6F 72
             65 20 74 68 65 73 65
             20 43 68 61 72 61 63
             74 65 72 73 20 69 6E
             20 42 75 66 66 65 72
             20 30
      000224 00                    2560 	.db 0x00
                                   2561 	.area CSEG    (CODE)
                                   2562 	.area CONST   (CODE)
      000225                       2563 ___str_13:
      000225 23 23 23 23 23 23 23  2564 	.ascii "############################################################"
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23
      000261 23 23                 2565 	.ascii "##"
      000263 00                    2566 	.db 0x00
                                   2567 	.area CSEG    (CODE)
                                   2568 	.area CONST   (CODE)
      000264                       2569 ___str_14:
      000264 0A                    2570 	.db 0x0a
      000265 20                    2571 	.ascii " "
      000266 0D                    2572 	.db 0x0d
      000267 45 6E 74 65 72 20 63  2573 	.ascii "Enter character "
             68 61 72 61 63 74 65
             72 20
      000277 0A                    2574 	.db 0x0a
      000278 20                    2575 	.ascii " "
      000279 0D                    2576 	.db 0x0d
      00027A 00                    2577 	.db 0x00
                                   2578 	.area CSEG    (CODE)
                                   2579 	.area CONST   (CODE)
      00027B                       2580 ___str_15:
      00027B 0A                    2581 	.db 0x0a
      00027C 20                    2582 	.ascii " "
      00027D 0D                    2583 	.db 0x0d
      00027E 54 6F 74 61 6C 20 6E  2584 	.ascii "Total number of characters =%d "
             75 6D 62 65 72 20 6F
             66 20 63 68 61 72 61
             63 74 65 72 73 20 3D
             25 64 20
      00029D 0A                    2585 	.db 0x0a
      00029E 20                    2586 	.ascii " "
      00029F 0D                    2587 	.db 0x0d
      0002A0 00                    2588 	.db 0x00
                                   2589 	.area CSEG    (CODE)
                                   2590 	.area CONST   (CODE)
      0002A1                       2591 ___str_16:
      0002A1 20 2D 2D 3E 20 54 68  2592 	.ascii " --> This character is stored at %p "
             69 73 20 63 68 61 72
             61 63 74 65 72 20 69
             73 20 73 74 6F 72 65
             64 20 61 74 20 25 70
             20
      0002C5 0A                    2593 	.db 0x0a
      0002C6 00                    2594 	.db 0x00
                                   2595 	.area CSEG    (CODE)
                                   2596 	.area CONST   (CODE)
      0002C7                       2597 ___str_17:
      0002C7 0A                    2598 	.db 0x0a
      0002C8 20                    2599 	.ascii " "
      0002C9 0D                    2600 	.db 0x0d
      0002CA 20 54 6F 74 61 6C 20  2601 	.ascii " Total number of storage characters =%d "
             6E 75 6D 62 65 72 20
             6F 66 20 73 74 6F 72
             61 67 65 20 63 68 61
             72 61 63 74 65 72 73
             20 3D 25 64 20
      0002F2 0A                    2602 	.db 0x0a
      0002F3 00                    2603 	.db 0x00
                                   2604 	.area CSEG    (CODE)
                                   2605 	.area CONST   (CODE)
      0002F4                       2606 ___str_18:
      0002F4 0A                    2607 	.db 0x0a
      0002F5 20                    2608 	.ascii " "
      0002F6 0D                    2609 	.db 0x0d
      0002F7 20 59 6F 75 20 6E 65  2610 	.ascii " You need to enter a number between 30 to 300 bytes to creat"
             65 64 20 74 6F 20 65
             6E 74 65 72 20 61 20
             6E 75 6D 62 65 72 20
             62 65 74 77 65 65 6E
             20 33 30 20 74 6F 20
             33 30 30 20 62 79 74
             65 73 20 74 6F 20 63
             72 65 61 74
      000333 65 20 61 20 6E 65 77  2611 	.ascii "e a new buffer "
             20 62 75 66 66 65 72
             20
      000342 0A                    2612 	.db 0x0a
      000343 00                    2613 	.db 0x00
                                   2614 	.area CSEG    (CODE)
                                   2615 	.area CONST   (CODE)
      000344                       2616 ___str_19:
      000344 0A                    2617 	.db 0x0a
      000345 20                    2618 	.ascii " "
      000346 0D                    2619 	.db 0x0d
      000347 20 4E 65 77 20 4D 61  2620 	.ascii " New Malloc buffer %d passed"
             6C 6C 6F 63 20 62 75
             66 66 65 72 20 25 64
             20 70 61 73 73 65 64
      000363 0A                    2621 	.db 0x0a
      000364 0D                    2622 	.db 0x0d
      000365 00                    2623 	.db 0x00
                                   2624 	.area CSEG    (CODE)
                                   2625 	.area CONST   (CODE)
      000366                       2626 ___str_20:
      000366 0A                    2627 	.db 0x0a
      000367 20                    2628 	.ascii " "
      000368 0D                    2629 	.db 0x0d
      000369 20 41 64 64 72 65 73  2630 	.ascii " Address of buffer no %d: %p "
             73 20 6F 66 20 62 75
             66 66 65 72 20 6E 6F
             20 25 64 3A 20 25 70
             20
      000386 0A                    2631 	.db 0x0a
      000387 20                    2632 	.ascii " "
      000388 0D                    2633 	.db 0x0d
      000389 00                    2634 	.db 0x00
                                   2635 	.area CSEG    (CODE)
                                   2636 	.area CONST   (CODE)
      00038A                       2637 ___str_21:
      00038A 0A                    2638 	.db 0x0a
      00038B 20                    2639 	.ascii " "
      00038C 0D                    2640 	.db 0x0d
      00038D 20 59 6F 75 20 6E 65  2641 	.ascii " You need to enter a valid buffer number to clear it "
             65 64 20 74 6F 20 65
             6E 74 65 72 20 61 20
             76 61 6C 69 64 20 62
             75 66 66 65 72 20 6E
             75 6D 62 65 72 20 74
             6F 20 63 6C 65 61 72
             20 69 74 20
      0003C2 0A                    2642 	.db 0x0a
      0003C3 00                    2643 	.db 0x00
                                   2644 	.area CSEG    (CODE)
                                   2645 	.area CONST   (CODE)
      0003C4                       2646 ___str_22:
      0003C4 0A                    2647 	.db 0x0a
      0003C5 20                    2648 	.ascii " "
      0003C6 0D                    2649 	.db 0x0d
      0003C7 20 42 75 66 66 65 72  2650 	.ascii " Buffer %d Cleared "
             20 25 64 20 43 6C 65
             61 72 65 64 20
      0003DA 0A                    2651 	.db 0x0a
      0003DB 20                    2652 	.ascii " "
      0003DC 0D                    2653 	.db 0x0d
      0003DD 00                    2654 	.db 0x00
                                   2655 	.area CSEG    (CODE)
                                   2656 	.area CONST   (CODE)
      0003DE                       2657 ___str_23:
      0003DE 0A                    2658 	.db 0x0a
      0003DF 20                    2659 	.ascii " "
      0003E0 0D                    2660 	.db 0x0d
      0003E1 20 59 6F 75 20 65 6E  2661 	.ascii " You entered a wrong Buffer number "
             74 65 72 65 64 20 61
             20 77 72 6F 6E 67 20
             42 75 66 66 65 72 20
             6E 75 6D 62 65 72 20
      000404 0A                    2662 	.db 0x0a
      000405 20                    2663 	.ascii " "
      000406 0D                    2664 	.db 0x0d
      000407 00                    2665 	.db 0x00
                                   2666 	.area CSEG    (CODE)
                                   2667 	.area CONST   (CODE)
      000408                       2668 ___str_24:
      000408 0A                    2669 	.db 0x0a
      000409 20                    2670 	.ascii " "
      00040A 0D                    2671 	.db 0x0d
      00040B 20 23 23 23 23 23 23  2672 	.ascii " ########################## Heap Report ####################"
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 20
             48 65 61 70 20 52 65
             70 6F 72 74 20 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23
      000447 23 23 23 23 23 23 23  2673 	.ascii "####### "
             20
      00044F 0A                    2674 	.db 0x0a
      000450 00                    2675 	.db 0x00
                                   2676 	.area CSEG    (CODE)
                                   2677 	.area CONST   (CODE)
      000451                       2678 ___str_25:
      000451 0A                    2679 	.db 0x0a
      000452 0D                    2680 	.db 0x0d
      000453 42 75 66 66 65 72     2681 	.ascii "Buffer"
      000459 09                    2682 	.db 0x09
      00045A 53 74 61 72 74 69 6E  2683 	.ascii "Starting Addr"
             67 20 41 64 64 72
      000467 09                    2684 	.db 0x09
      000468 45 6E 64 69 6E 67 20  2685 	.ascii "Ending Addr"
             41 64 64 72
      000473 09                    2686 	.db 0x09
      000474 53 69 7A 65           2687 	.ascii "Size"
      000478 09                    2688 	.db 0x09
      000479 53 74 6F 72 61 67 65  2689 	.ascii "StorageChar"
             43 68 61 72
      000484 09                    2690 	.db 0x09
      000485 20 46 72 65 65 20 53  2691 	.ascii " Free Space "
             70 61 63 65 20
      000491 0A                    2692 	.db 0x0a
      000492 00                    2693 	.db 0x00
                                   2694 	.area CSEG    (CODE)
                                   2695 	.area CONST   (CODE)
      000493                       2696 ___str_26:
      000493 0A                    2697 	.db 0x0a
      000494 0D                    2698 	.db 0x0d
      000495 25 64                 2699 	.ascii "%d"
      000497 09                    2700 	.db 0x09
      000498 30 58 30 25 78        2701 	.ascii "0X0%x"
      00049D 09                    2702 	.db 0x09
      00049E 09                    2703 	.db 0x09
      00049F 30 58 30 25 78        2704 	.ascii "0X0%x"
      0004A4 09                    2705 	.db 0x09
      0004A5 09                    2706 	.db 0x09
      0004A6 20 25 64              2707 	.ascii " %d"
      0004A9 09                    2708 	.db 0x09
      0004AA 09                    2709 	.db 0x09
      0004AB 25 64                 2710 	.ascii "%d"
      0004AD 09                    2711 	.db 0x09
      0004AE 25 64                 2712 	.ascii "%d"
      0004B0 0A                    2713 	.db 0x0a
      0004B1 0D                    2714 	.db 0x0d
      0004B2 00                    2715 	.db 0x00
                                   2716 	.area CSEG    (CODE)
                                   2717 	.area CONST   (CODE)
      0004B3                       2718 ___str_27:
      0004B3 0A                    2719 	.db 0x0a
      0004B4 20                    2720 	.ascii " "
      0004B5 0D                    2721 	.db 0x0d
      0004B6 20 54 6F 74 61 6C 20  2722 	.ascii " Total no. of characters after ? sign --> %d "
             6E 6F 2E 20 6F 66 20
             63 68 61 72 61 63 74
             65 72 73 20 61 66 74
             65 72 20 3F 20 73 69
             67 6E 20 2D 2D 3E 20
             25 64 20
      0004E3 0A                    2723 	.db 0x0a
      0004E4 20                    2724 	.ascii " "
      0004E5 0D                    2725 	.db 0x0d
      0004E6 00                    2726 	.db 0x00
                                   2727 	.area CSEG    (CODE)
                                   2728 	.area CONST   (CODE)
      0004E7                       2729 ___str_28:
      0004E7 0A                    2730 	.db 0x0a
      0004E8 20                    2731 	.ascii " "
      0004E9 0D                    2732 	.db 0x0d
      0004EA 44 61 74 61 20 61 74  2733 	.ascii "Data at Buffer 0: "
             20 42 75 66 66 65 72
             20 30 3A 20
      0004FC 09                    2734 	.db 0x09
      0004FD 00                    2735 	.db 0x00
                                   2736 	.area CSEG    (CODE)
                                   2737 	.area CONST   (CODE)
      0004FE                       2738 ___str_29:
      0004FE 25 63 20 20           2739 	.ascii "%c  "
      000502 00                    2740 	.db 0x00
                                   2741 	.area CSEG    (CODE)
                                   2742 	.area CONST   (CODE)
      000503                       2743 ___str_30:
      000503 0A                    2744 	.db 0x0a
      000504 00                    2745 	.db 0x00
                                   2746 	.area CSEG    (CODE)
                                   2747 	.area CONST   (CODE)
      000505                       2748 ___str_31:
      000505 0A                    2749 	.db 0x0a
      000506 20                    2750 	.ascii " "
      000507 0D                    2751 	.db 0x0d
      000508 20 23 23 23 23 23 23  2752 	.ascii " ########## Data Inside Buffer 0 ##############"
             23 23 23 23 20 44 61
             74 61 20 49 6E 73 69
             64 65 20 42 75 66 66
             65 72 20 30 20 23 23
             23 23 23 23 23 23 23
             23 23 23 23 23
      000537 00                    2753 	.db 0x00
                                   2754 	.area CSEG    (CODE)
                                   2755 	.area CONST   (CODE)
      000538                       2756 ___str_32:
      000538 0A                    2757 	.db 0x0a
      000539 20                    2758 	.ascii " "
      00053A 0D                    2759 	.db 0x0d
      00053B 20 25 70 20 3A        2760 	.ascii " %p :"
      000540 00                    2761 	.db 0x00
                                   2762 	.area CSEG    (CODE)
                                   2763 	.area CONST   (CODE)
      000541                       2764 ___str_33:
      000541 25 78 20              2765 	.ascii "%x "
      000544 00                    2766 	.db 0x00
                                   2767 	.area CSEG    (CODE)
                                   2768 	.area CONST   (CODE)
      000545                       2769 ___str_34:
      000545 0A                    2770 	.db 0x0a
      000546 20                    2771 	.ascii " "
      000547 0D                    2772 	.db 0x0d
      000548 20 23 23 23 23 23 23  2773 	.ascii " ########## All Buffers Cleared ##############"
             23 23 23 23 20 41 6C
             6C 20 42 75 66 66 65
             72 73 20 43 6C 65 61
             72 65 64 20 23 23 23
             23 23 23 23 23 23 23
             23 23 23 23
      000576 00                    2774 	.db 0x00
                                   2775 	.area CSEG    (CODE)
                                   2776 	.area CONST   (CODE)
      000577                       2777 ___str_35:
      000577 0A                    2778 	.db 0x0a
      000578 20                    2779 	.ascii " "
      000579 0D                    2780 	.db 0x0d
      00057A 20 42 75 66 66 65 72  2781 	.ascii " Buffer %d Cleared "
             20 25 64 20 43 6C 65
             61 72 65 64 20
      00058D 0A                    2782 	.db 0x0a
      00058E 00                    2783 	.db 0x00
                                   2784 	.area CSEG    (CODE)
                                   2785 	.area CONST   (CODE)
      00058F                       2786 ___str_36:
      00058F 0A                    2787 	.db 0x0a
      000590 20                    2788 	.ascii " "
      000591 0D                    2789 	.db 0x0d
      000592 20 45 6E 74 65 72 20  2790 	.ascii " Enter a number in valid range as mentioned "
             61 20 6E 75 6D 62 65
             72 20 69 6E 20 76 61
             6C 69 64 20 72 61 6E
             67 65 20 61 73 20 6D
             65 6E 74 69 6F 6E 65
             64 20
      0005BE 0A                    2791 	.db 0x0a
      0005BF 20                    2792 	.ascii " "
      0005C0 0D                    2793 	.db 0x0d
      0005C1 00                    2794 	.db 0x00
                                   2795 	.area CSEG    (CODE)
                                   2796 	.area CONST   (CODE)
      0005C2                       2797 ___str_37:
      0005C2 0A                    2798 	.db 0x0a
      0005C3 20 53 69 7A 65 20 4E  2799 	.ascii " Size Number = %d "
             75 6D 62 65 72 20 3D
             20 25 64 20
      0005D5 0A                    2800 	.db 0x0a
      0005D6 00                    2801 	.db 0x00
                                   2802 	.area CSEG    (CODE)
                                   2803 	.area XINIT   (CODE)
      000000                       2804 __xinit__ptr:
      000000 00 00                 2805 	.byte #0x00,#0x00
                                   2806 	.area CABS    (ABS,CODE)
